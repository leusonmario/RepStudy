import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int24 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory26.setResourceLoader(resourceLoader37);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory40.workerThreads;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file50);
        boolean boolean52 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        undertowEmbeddedServletContainerFactory54.setRegisterJspServlet(true);
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory54.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet61 = undertowEmbeddedServletContainerFactory54.getJspServlet();
        undertowEmbeddedServletContainerFactory40.setJspServlet(jspServlet61);
        undertowEmbeddedServletContainerFactory26.setJspServlet(jspServlet61);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet61);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo65 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo65);
        undertowEmbeddedServletContainerFactory1.ioThreads = 52;
        org.springframework.core.io.ResourceLoader resourceLoader69 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(jspServlet61);
        org.junit.Assert.assertNull(resourceLoader69);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file4 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(10);
        int int13 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNull(file4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jspServlet8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setUseForwardHeaders(false);
        java.lang.String str21 = undertowEmbeddedServletContainerFactory16.getDisplayName();
        boolean boolean22 = undertowEmbeddedServletContainerFactory16.isAccessLogEnabled();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = undertowEmbeddedServletContainerFactory16.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory26.setDocumentRoot(file29);
        boolean boolean31 = undertowEmbeddedServletContainerFactory26.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory33.setDocumentRoot(file36);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection38 = undertowEmbeddedServletContainerFactory33.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file45);
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory40.getEmbeddedServletContainer(servletContextInitializerArray49);
        undertowEmbeddedServletContainerFactory33.addInitializers(servletContextInitializerArray49);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory26.createDeploymentManager(servletContextInitializerArray49);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer53 = undertowEmbeddedServletContainerFactory16.getEmbeddedServletContainer(servletContextInitializerArray49);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer54 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray49);
        org.springframework.boot.context.embedded.Compression compression55 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(compression24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNotNull(deploymentManager52);
        org.junit.Assert.assertNotNull(embeddedServletContainer53);
        org.junit.Assert.assertNotNull(embeddedServletContainer54);
        org.junit.Assert.assertNull(compression55);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.xnio.XnioWorker xnioWorker8 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 0, timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(jspServlet4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(xnioWorker8);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(0);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        int int7 = undertowEmbeddedServletContainerFactory1.getPort();
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        io.undertow.server.handlers.resource.ResourceManager resourceManager7 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(resourceManager7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.JspServlet jspServlet12 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Compression compression16 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(jspServlet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(compression16);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.io.File file5 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray6 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray12 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.boot.context.embedded.Ssl ssl20 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl20);
        io.undertow.Undertow.Builder builder23 = undertowEmbeddedServletContainerFactory1.createBuilder(1800);
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setPort(10);
        org.springframework.boot.context.embedded.Ssl ssl33 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.xnio.XnioWorker xnioWorker34 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(ssl33);
        org.junit.Assert.assertNotNull(xnioWorker34);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file15);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer25.initializers = servletContextInitializerArray36;
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = undertowEmbeddedServletContainerFactory22.createDeploymentManager(servletContextInitializerArray36);
        io.undertow.servlet.api.DeploymentManager deploymentManager40 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray36);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory42.ioThreads;
        org.springframework.boot.context.embedded.Compression compression44 = null;
        undertowEmbeddedServletContainerFactory42.setCompression(compression44);
        int int46 = undertowEmbeddedServletContainerFactory42.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression47 = null;
        undertowEmbeddedServletContainerFactory42.setCompression(compression47);
        undertowEmbeddedServletContainerFactory42.buffersPerRegion = 0;
        org.springframework.boot.context.embedded.JspServlet jspServlet51 = undertowEmbeddedServletContainerFactory42.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet51);
        java.lang.String str53 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file54);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertNull(compression14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(deploymentManager39);
        org.junit.Assert.assertNotNull(deploymentManager40);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1800 + "'", int46 == 1800);
        org.junit.Assert.assertNotNull(jspServlet51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection11 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory13.setResourceLoader(resourceLoader14);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList17, undertowDeploymentInfoCustomizerArray16);
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList17;
        undertowEmbeddedServletContainerFactory13.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection24 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        boolean boolean25 = undertowEmbeddedServletContainerFactory13.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader30;
        org.springframework.core.io.ResourceLoader resourceLoader32 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader33 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader33;
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection38 = undertowEmbeddedServletContainerFactory37.getBuilderCustomizers();
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory37.workerThreads;
        undertowEmbeddedServletContainerFactory37.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory37.setAccessLogDirectory(file42);
        undertowEmbeddedServletContainerFactory37.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory37.getEmbeddedServletContainer(servletContextInitializerArray46);
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray46);
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray46);
        java.net.InetAddress inetAddress51 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(resourceLoader32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNull(inetAddress51);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file9);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.JspServlet jspServlet12 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.0.0.0" + "'", str11, "0.0.0.0");
        org.junit.Assert.assertNull(jspServlet12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.ErrorPage errorPage14 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage15 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet59 = undertowEmbeddedServletContainerFactory54.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory61.ioThreads;
        java.lang.String str63 = undertowEmbeddedServletContainerFactory61.accessLogPattern;
        undertowEmbeddedServletContainerFactory61.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray66 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList67 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList67, undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory61.builderCustomizers = undertowBuilderCustomizerList67;
        undertowEmbeddedServletContainerFactory54.builderCustomizers = undertowBuilderCustomizerList67;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList67;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection72 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str73 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.String str74 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        org.junit.Assert.assertNotNull(errorPageSet59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0.0.0.0" + "'", str73, "0.0.0.0");
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.setDocumentRoot(file17);
        boolean boolean19 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory21.setDocumentRoot(file24);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory21.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection29 = undertowEmbeddedServletContainerFactory28.getBuilderCustomizers();
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory28.workerThreads;
        undertowEmbeddedServletContainerFactory28.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory28.setAccessLogDirectory(file33);
        undertowEmbeddedServletContainerFactory28.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer38 = undertowEmbeddedServletContainerFactory28.getEmbeddedServletContainer(servletContextInitializerArray37);
        undertowEmbeddedServletContainerFactory21.addInitializers(servletContextInitializerArray37);
        io.undertow.servlet.api.DeploymentManager deploymentManager40 = undertowEmbeddedServletContainerFactory14.createDeploymentManager(servletContextInitializerArray37);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer41 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray37);
        java.lang.String str42 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.core.io.ResourceLoader resourceLoader43 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader43);
        java.io.File file45 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file46);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        org.junit.Assert.assertNotNull(embeddedServletContainer38);
        org.junit.Assert.assertNotNull(deploymentManager40);
        org.junit.Assert.assertNotNull(embeddedServletContainer41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(file45);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory10.setResourceLoader(resourceLoader11);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory10.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.Compression compression18 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression18);
        int int20 = undertowEmbeddedServletContainerFactory16.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker21 = undertowEmbeddedServletContainerFactory16.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory16.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory26.setDocumentRoot(file29);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection31 = undertowEmbeddedServletContainerFactory26.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        undertowEmbeddedServletContainerFactory33.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory33.setAccessLogDirectory(file38);
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer43 = undertowEmbeddedServletContainerFactory33.getEmbeddedServletContainer(servletContextInitializerArray42);
        undertowEmbeddedServletContainerFactory26.addInitializers(servletContextInitializerArray42);
        io.undertow.servlet.api.DeploymentManager deploymentManager45 = undertowEmbeddedServletContainerFactory16.createDeploymentManager(servletContextInitializerArray42);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer47 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder14, deploymentManager45, (-1));
        java.lang.String str48 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1800 + "'", int20 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker21);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        org.junit.Assert.assertNotNull(embeddedServletContainer43);
        org.junit.Assert.assertNotNull(deploymentManager45);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file20);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file23);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress27);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory32.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet35 = null;
        undertowEmbeddedServletContainerFactory32.setJspServlet(jspServlet35);
        java.io.File file37 = undertowEmbeddedServletContainerFactory32.getDocumentRoot();
        org.springframework.boot.context.embedded.Compression compression38 = undertowEmbeddedServletContainerFactory32.getCompression();
        java.net.InetAddress inetAddress39 = null;
        undertowEmbeddedServletContainerFactory32.setAddress(inetAddress39);
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory32.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings43);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(file37);
        org.junit.Assert.assertNull(compression38);
        org.junit.Assert.assertNotNull(mimeMappings43);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        java.net.InetAddress inetAddress25 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(inetAddress25);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory2.createBuilder((int) (byte) 100);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 1800;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory8.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory8.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory8.setRegisterJspServlet(false);
        java.io.File file16 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList17 = undertowEmbeddedServletContainerFactory8.builderCustomizers;
        undertowEmbeddedServletContainerFactory8.setJspServletClassName("0.0.0.0");
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory8.setDocumentRoot(file20);
        undertowEmbeddedServletContainerFactory8.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory8.setBuffersPerRegion((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings26 = undertowEmbeddedServletContainerFactory8.getMimeMappings();
        undertowEmbeddedServletContainerFactory2.setMimeMappings(mimeMappings26);
        undertowEmbeddedServletContainerFactory2.bufferSize = 1800;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList17);
        org.junit.Assert.assertNotNull(mimeMappings26);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file47);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo49 = null;
        undertowEmbeddedServletContainerFactory42.configureErrorPages(deploymentInfo49);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress53 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress53);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file55);
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory52.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList58 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory42.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file61);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.lang.String str65 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.core.io.ResourceLoader resourceLoader66 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader66);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList58);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file8);
        undertowEmbeddedServletContainerFactory1.bufferSize = 10;
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        boolean boolean4 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        int int12 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection18 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.net.InetAddress inetAddress21 = null;
        undertowEmbeddedServletContainerFactory14.setAddress(inetAddress21);
        io.undertow.server.handlers.resource.ResourceManager resourceManager23 = undertowEmbeddedServletContainerFactory14.getDocumentRootResourceManager();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory14.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory26.setPersistSession(false);
        undertowEmbeddedServletContainerFactory26.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList31 = undertowEmbeddedServletContainerFactory26.builderCustomizers;
        undertowEmbeddedServletContainerFactory14.builderCustomizers = undertowBuilderCustomizerList31;
        undertowEmbeddedServletContainerFactory14.setDisplayName("hi!");
        int int35 = undertowEmbeddedServletContainerFactory14.getSessionTimeout();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet36 = undertowEmbeddedServletContainerFactory14.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet36);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1800 + "'", int12 == 1800);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection18);
        org.junit.Assert.assertNotNull(resourceManager23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1800 + "'", int35 == 1800);
        org.junit.Assert.assertNotNull(errorPageSet36);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) -1);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.lang.String str18 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0.0.0.0" + "'", str19, "0.0.0.0");
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        undertowEmbeddedServletContainerFactory2.setWorkerThreads((java.lang.Integer) 97);
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader15 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.Compression compression16 = undertowEmbeddedServletContainerFactory1.getCompression();
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(resourceLoader15);
        org.junit.Assert.assertNull(compression16);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo47);
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file49);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress59);
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList64 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory52.accessLogPattern = "hi!";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory68 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory68.ioThreads;
        org.springframework.boot.context.embedded.Compression compression70 = null;
        undertowEmbeddedServletContainerFactory68.setCompression(compression70);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection72 = undertowEmbeddedServletContainerFactory68.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo73 = null;
        undertowEmbeddedServletContainerFactory68.configureErrorPages(deploymentInfo73);
        java.net.InetAddress inetAddress75 = null;
        undertowEmbeddedServletContainerFactory68.setAddress(inetAddress75);
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory68.workerThreads;
        undertowEmbeddedServletContainerFactory68.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList80 = undertowEmbeddedServletContainerFactory68.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList80;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList80;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.core.io.ResourceLoader resourceLoader87 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader87;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection72);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList80);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression26);
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory18.setAccessLogDirectory(file28);
        undertowEmbeddedServletContainerFactory18.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str32 = undertowEmbeddedServletContainerFactory18.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory34.ioThreads;
        org.springframework.boot.context.embedded.Compression compression36 = null;
        undertowEmbeddedServletContainerFactory34.setCompression(compression36);
        int int38 = undertowEmbeddedServletContainerFactory34.getSessionTimeout();
        undertowEmbeddedServletContainerFactory34.buffersPerRegion = 100;
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory34.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer42 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray43 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer42 };
        undertowEmbeddedServletContainerFactory34.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        undertowEmbeddedServletContainerFactory18.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection49 = undertowEmbeddedServletContainerFactory48.getBuilderCustomizers();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory48.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader51 = null;
        undertowEmbeddedServletContainerFactory48.resourceLoader = resourceLoader51;
        org.springframework.core.io.ResourceLoader resourceLoader53 = undertowEmbeddedServletContainerFactory48.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader54 = null;
        undertowEmbeddedServletContainerFactory48.resourceLoader = resourceLoader54;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray56 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList57 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList57, undertowBuilderCustomizerArray56);
        undertowEmbeddedServletContainerFactory48.builderCustomizers = undertowBuilderCustomizerList57;
        undertowEmbeddedServletContainerFactory48.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory48.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader64 = undertowEmbeddedServletContainerFactory48.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory66.ioThreads;
        java.lang.String str68 = undertowEmbeddedServletContainerFactory66.accessLogPattern;
        undertowEmbeddedServletContainerFactory66.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray71 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList72 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList72, undertowBuilderCustomizerArray71);
        undertowEmbeddedServletContainerFactory66.builderCustomizers = undertowBuilderCustomizerList72;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection77 = undertowEmbeddedServletContainerFactory76.getBuilderCustomizers();
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory76.workerThreads;
        undertowEmbeddedServletContainerFactory76.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray81 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory76.addBuilderCustomizers(undertowBuilderCustomizerArray81);
        undertowEmbeddedServletContainerFactory66.addBuilderCustomizers(undertowBuilderCustomizerArray81);
        undertowEmbeddedServletContainerFactory48.addBuilderCustomizers(undertowBuilderCustomizerArray81);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray81);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        int int88 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1800 + "'", int38 == 1800);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(resourceLoader53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(resourceLoader64);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection77);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray81);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        boolean boolean7 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener8 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0.0.0.0" + "'", str5, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory6.getBuilderCustomizers();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory6.workerThreads;
        undertowEmbeddedServletContainerFactory6.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory6.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray15);
        initializer4.initializers = servletContextInitializerArray15;
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray15);
        boolean boolean19 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        boolean boolean22 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(servletContextInitializerArray15);
        org.junit.Assert.assertNotNull(embeddedServletContainer16);
        org.junit.Assert.assertNotNull(deploymentManager18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory18.setResourceLoader(resourceLoader19);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray21 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList22, undertowDeploymentInfoCustomizerArray21);
        undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList22;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList22;
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(xnioWorker30);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings20);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress23 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress23);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory26.ioThreads;
        org.springframework.boot.context.embedded.Compression compression28 = null;
        undertowEmbeddedServletContainerFactory26.setCompression(compression28);
        int int30 = undertowEmbeddedServletContainerFactory26.getSessionTimeout();
        undertowEmbeddedServletContainerFactory26.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory26.directBuffers = true;
        undertowEmbeddedServletContainerFactory26.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory26.setContextPath("");
        undertowEmbeddedServletContainerFactory26.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory42.setDocumentRoot(file45);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection47 = undertowEmbeddedServletContainerFactory42.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory49.getBuilderCustomizers();
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file54);
        undertowEmbeddedServletContainerFactory49.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray58 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer59 = undertowEmbeddedServletContainerFactory49.getEmbeddedServletContainer(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory42.addInitializers(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory26.addInitializers(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray58);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mimeMappings20);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1800 + "'", int30 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection47);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(servletContextInitializerArray58);
        org.junit.Assert.assertNotNull(embeddedServletContainer59);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory18.setResourceLoader(resourceLoader19);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray21 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList22, undertowDeploymentInfoCustomizerArray21);
        undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList22;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList22;
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression30);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file4;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection11 = undertowEmbeddedServletContainerFactory7.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory7.configureErrorPages(deploymentInfo12);
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory7.setAddress(inetAddress14);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory7.workerThreads;
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory7.setAccessLogDirectory(file17);
        boolean boolean19 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory21.ioThreads;
        org.springframework.boot.context.embedded.Compression compression23 = null;
        undertowEmbeddedServletContainerFactory21.setCompression(compression23);
        undertowEmbeddedServletContainerFactory21.setRegisterJspServlet(true);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory21.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet28 = undertowEmbeddedServletContainerFactory21.getJspServlet();
        undertowEmbeddedServletContainerFactory7.setJspServlet(jspServlet28);
        undertowEmbeddedServletContainerFactory7.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory33.ioThreads;
        org.springframework.boot.context.embedded.Compression compression35 = null;
        undertowEmbeddedServletContainerFactory33.setCompression(compression35);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection37 = undertowEmbeddedServletContainerFactory33.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo38 = null;
        undertowEmbeddedServletContainerFactory33.configureErrorPages(deploymentInfo38);
        java.net.InetAddress inetAddress40 = null;
        undertowEmbeddedServletContainerFactory33.setAddress(inetAddress40);
        org.springframework.boot.context.embedded.ErrorPage errorPage42 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray43 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage42 };
        undertowEmbeddedServletContainerFactory33.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray43);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList46 = undertowEmbeddedServletContainerFactory7.builderCustomizers;
        undertowEmbeddedServletContainerFactory2.builderCustomizers = undertowBuilderCustomizerList46;
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(true);
        io.undertow.server.handlers.resource.ResourceManager resourceManager52 = undertowEmbeddedServletContainerFactory2.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(file3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection11);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(jspServlet28);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection37);
        org.junit.Assert.assertNotNull(errorPageArray43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList46);
        org.junit.Assert.assertNotNull(resourceManager52);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.xnio.XnioWorker xnioWorker15 = undertowEmbeddedServletContainerFactory13.createWorker();
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory13.setCompression(compression16);
        java.lang.ClassLoader classLoader18 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory20.ioThreads;
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory20.setCompression(compression22);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection24 = undertowEmbeddedServletContainerFactory20.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory20.configureErrorPages(deploymentInfo25);
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory20.setAddress(inetAddress27);
        org.springframework.boot.context.embedded.ErrorPage errorPage29 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage29 };
        undertowEmbeddedServletContainerFactory20.addErrorPages(errorPageArray30);
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory20.resourceLoader = resourceLoader32;
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory20.setDocumentRoot(file34);
        org.springframework.core.io.ResourceLoader resourceLoader36 = null;
        undertowEmbeddedServletContainerFactory20.resourceLoader = resourceLoader36;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer40 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer44 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer46 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap45);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer40, initParameterConfiguringServletContextInitializer42, initParameterConfiguringServletContextInitializer44, initParameterConfiguringServletContextInitializer46 };
        initializer38.initializers = servletContextInitializerArray47;
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray47);
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray47);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray47);
        boolean boolean52 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file53;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(file11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(xnioWorker15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection24);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings15 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl17 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl17);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(mimeMappings14);
        org.junit.Assert.assertNotNull(mimeMappings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(resourceLoader21);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.Compression compression6 = undertowEmbeddedServletContainerFactory1.getCompression();
        io.undertow.Undertow.Builder builder8 = undertowEmbeddedServletContainerFactory1.createBuilder((int) 'a');
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression11 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file12;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(compression6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(compression11);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) -1);
        java.net.InetAddress inetAddress2 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.io.File file3 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo4 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inetAddress2);
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray23);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray23);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file26);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        java.io.File file30 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory32.ioThreads;
        org.springframework.boot.context.embedded.Compression compression34 = null;
        undertowEmbeddedServletContainerFactory32.setCompression(compression34);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection36 = undertowEmbeddedServletContainerFactory32.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo37 = null;
        undertowEmbeddedServletContainerFactory32.configureErrorPages(deploymentInfo37);
        java.net.InetAddress inetAddress39 = null;
        undertowEmbeddedServletContainerFactory32.setAddress(inetAddress39);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory32.workerThreads;
        undertowEmbeddedServletContainerFactory32.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList44 = undertowEmbeddedServletContainerFactory32.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory32.ioThreads = 0;
        undertowEmbeddedServletContainerFactory32.bufferSize = 100;
        java.io.File file49 = undertowEmbeddedServletContainerFactory32.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory51.ioThreads;
        java.lang.String str53 = undertowEmbeddedServletContainerFactory51.accessLogPattern;
        undertowEmbeddedServletContainerFactory51.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory57.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray59 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory57.addErrorPages(errorPageArray59);
        undertowEmbeddedServletContainerFactory51.addErrorPages(errorPageArray59);
        undertowEmbeddedServletContainerFactory32.addErrorPages(errorPageArray59);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray59);
        java.lang.String str64 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet65 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(errorPageArray10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNull(file30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList44);
        org.junit.Assert.assertNull(file49);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(errorPageArray59);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(errorPageSet65);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file15);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory18.setResourceLoader(resourceLoader19);
        org.xnio.XnioWorker xnioWorker21 = undertowEmbeddedServletContainerFactory18.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory23.setPersistSession(false);
        io.undertow.Undertow.Builder builder27 = undertowEmbeddedServletContainerFactory23.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory23.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        undertowEmbeddedServletContainerFactory31.setUseForwardHeaders(false);
        java.lang.String str36 = undertowEmbeddedServletContainerFactory31.getDisplayName();
        boolean boolean37 = undertowEmbeddedServletContainerFactory31.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet38 = undertowEmbeddedServletContainerFactory31.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        java.lang.String str42 = undertowEmbeddedServletContainerFactory40.accessLogPattern;
        undertowEmbeddedServletContainerFactory40.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray45 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList46 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList46, undertowBuilderCustomizerArray45);
        undertowEmbeddedServletContainerFactory40.builderCustomizers = undertowBuilderCustomizerList46;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        undertowEmbeddedServletContainerFactory50.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray55 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory50.addBuilderCustomizers(undertowBuilderCustomizerArray55);
        undertowEmbeddedServletContainerFactory40.addBuilderCustomizers(undertowBuilderCustomizerArray55);
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray55);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection61 = undertowEmbeddedServletContainerFactory60.getBuilderCustomizers();
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory60.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer64 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap63);
        java.util.Map<java.lang.String, java.lang.String> strMap65 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer66 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap65);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer68 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap67);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray69 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer64, initParameterConfiguringServletContextInitializer66, initParameterConfiguringServletContextInitializer68 };
        undertowEmbeddedServletContainerFactory60.addInitializers(servletContextInitializerArray69);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory72 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection73 = undertowEmbeddedServletContainerFactory72.getBuilderCustomizers();
        java.lang.Integer int74 = undertowEmbeddedServletContainerFactory72.workerThreads;
        undertowEmbeddedServletContainerFactory72.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file77 = null;
        undertowEmbeddedServletContainerFactory72.setAccessLogDirectory(file77);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList79 = undertowEmbeddedServletContainerFactory72.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory81 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection82 = undertowEmbeddedServletContainerFactory81.getBuilderCustomizers();
        java.lang.Integer int83 = undertowEmbeddedServletContainerFactory81.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet84 = undertowEmbeddedServletContainerFactory81.getJspServlet();
        undertowEmbeddedServletContainerFactory72.setJspServlet(jspServlet84);
        undertowEmbeddedServletContainerFactory60.setJspServlet(jspServlet84);
        undertowEmbeddedServletContainerFactory31.setJspServlet(jspServlet84);
        undertowEmbeddedServletContainerFactory23.setJspServlet(jspServlet84);
        undertowEmbeddedServletContainerFactory18.setJspServlet(jspServlet84);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet84);
        org.xnio.XnioWorker xnioWorker91 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.io.File file92 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.server.HttpHandler httpHandler93 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler94 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(xnioWorker21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(errorPageSet38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray55);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection61);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(servletContextInitializerArray69);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList79);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection82);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNotNull(jspServlet84);
        org.junit.Assert.assertNotNull(xnioWorker91);
        org.junit.Assert.assertNull(file92);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList11 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(100, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(ssl8);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList11);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.boot.context.embedded.ErrorPage errorPage13 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage14 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(inetAddress10);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        io.undertow.Undertow.Builder builder41 = undertowEmbeddedServletContainerFactory1.createBuilder(0);
        undertowEmbeddedServletContainerFactory1.ioThreads = 52;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory13.getBuilderCustomizers();
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory13.workerThreads;
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(false);
        java.lang.String str18 = undertowEmbeddedServletContainerFactory13.getDisplayName();
        undertowEmbeddedServletContainerFactory13.setBufferSize((java.lang.Integer) 1);
        boolean boolean21 = undertowEmbeddedServletContainerFactory13.isRegisterDefaultServlet();
        java.lang.Boolean boolean22 = undertowEmbeddedServletContainerFactory13.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        org.springframework.boot.context.embedded.JspServlet jspServlet24 = undertowEmbeddedServletContainerFactory13.getJspServlet();
        undertowEmbeddedServletContainerFactory13.workerThreads = 0;
        boolean boolean27 = undertowEmbeddedServletContainerFactory13.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory29.setCompression(compression31);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory29.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        undertowEmbeddedServletContainerFactory29.configureErrorPages(deploymentInfo34);
        java.net.InetAddress inetAddress36 = null;
        undertowEmbeddedServletContainerFactory29.setAddress(inetAddress36);
        org.springframework.boot.context.embedded.ErrorPage errorPage38 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray39 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage38 };
        undertowEmbeddedServletContainerFactory29.addErrorPages(errorPageArray39);
        org.springframework.core.io.ResourceLoader resourceLoader41 = null;
        undertowEmbeddedServletContainerFactory29.resourceLoader = resourceLoader41;
        java.io.File file43 = null;
        undertowEmbeddedServletContainerFactory29.setDocumentRoot(file43);
        undertowEmbeddedServletContainerFactory29.accessLogEnabled = false;
        java.net.InetAddress inetAddress47 = undertowEmbeddedServletContainerFactory29.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList48 = undertowEmbeddedServletContainerFactory29.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList48;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList48;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.lang.String str53 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(boolean22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList23);
        org.junit.Assert.assertNotNull(jspServlet24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        org.junit.Assert.assertNotNull(errorPageArray39);
        org.junit.Assert.assertNull(inetAddress47);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.0.0.0" + "'", str53, "0.0.0.0");
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.Ssl ssl13 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl13);
        org.xnio.XnioWorker xnioWorker15 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(xnioWorker15);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.springframework.boot.context.embedded.JspServlet jspServlet6 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet6);
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(jspServlet8);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int24 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 10);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str28 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Ssl ssl31 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(ssl31);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file15);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer25.initializers = servletContextInitializerArray36;
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = undertowEmbeddedServletContainerFactory22.createDeploymentManager(servletContextInitializerArray36);
        io.undertow.servlet.api.DeploymentManager deploymentManager40 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray36);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file47);
        undertowEmbeddedServletContainerFactory42.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer52 = undertowEmbeddedServletContainerFactory42.getEmbeddedServletContainer(servletContextInitializerArray51);
        org.springframework.core.io.ResourceLoader resourceLoader53 = null;
        undertowEmbeddedServletContainerFactory42.setResourceLoader(resourceLoader53);
        undertowEmbeddedServletContainerFactory42.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory58.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet61 = null;
        undertowEmbeddedServletContainerFactory58.setJspServlet(jspServlet61);
        org.springframework.core.io.ResourceLoader resourceLoader63 = null;
        undertowEmbeddedServletContainerFactory58.resourceLoader = resourceLoader63;
        int int65 = undertowEmbeddedServletContainerFactory58.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap67 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer68 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap67);
        java.util.Map<java.lang.String, java.lang.String> strMap69 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer70 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap69);
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer72 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap71);
        java.util.Map<java.lang.String, java.lang.String> strMap73 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer74 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap73);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray75 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer68, initParameterConfiguringServletContextInitializer70, initParameterConfiguringServletContextInitializer72, initParameterConfiguringServletContextInitializer74 };
        initializer66.initializers = servletContextInitializerArray75;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray77 = initializer66.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory79 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection80 = undertowEmbeddedServletContainerFactory79.getBuilderCustomizers();
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory79.workerThreads;
        undertowEmbeddedServletContainerFactory79.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file84 = null;
        undertowEmbeddedServletContainerFactory79.setAccessLogDirectory(file84);
        undertowEmbeddedServletContainerFactory79.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray88 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer89 = undertowEmbeddedServletContainerFactory79.getEmbeddedServletContainer(servletContextInitializerArray88);
        initializer66.initializers = servletContextInitializerArray88;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer91 = undertowEmbeddedServletContainerFactory58.getEmbeddedServletContainer(servletContextInitializerArray88);
        io.undertow.servlet.api.DeploymentManager deploymentManager92 = undertowEmbeddedServletContainerFactory42.createDeploymentManager(servletContextInitializerArray88);
        io.undertow.servlet.api.DeploymentManager deploymentManager93 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray88);
        java.lang.String str94 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean95 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertNull(compression14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(deploymentManager39);
        org.junit.Assert.assertNotNull(deploymentManager40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
        org.junit.Assert.assertNotNull(embeddedServletContainer52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray75);
        org.junit.Assert.assertNotNull(servletContextInitializerArray77);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection80);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNotNull(servletContextInitializerArray88);
        org.junit.Assert.assertNotNull(embeddedServletContainer89);
        org.junit.Assert.assertNotNull(embeddedServletContainer91);
        org.junit.Assert.assertNotNull(deploymentManager92);
        org.junit.Assert.assertNotNull(deploymentManager93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.lang.Boolean boolean17 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader18);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 97);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file24);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer13 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray14 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer13 };
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray14);
        org.springframework.core.io.ResourceLoader resourceLoader16 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader16;
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.workerThreads = 32;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray14);
        org.junit.Assert.assertNotNull(xnioWorker18);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet13 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setUseForwardHeaders(false);
        java.lang.String str20 = undertowEmbeddedServletContainerFactory15.getDisplayName();
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 1);
        boolean boolean23 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray30 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory25.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory15.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory34.ioThreads;
        org.springframework.boot.context.embedded.Compression compression36 = null;
        undertowEmbeddedServletContainerFactory34.setCompression(compression36);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection38 = undertowEmbeddedServletContainerFactory34.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo39 = null;
        undertowEmbeddedServletContainerFactory34.configureErrorPages(deploymentInfo39);
        java.net.InetAddress inetAddress41 = null;
        undertowEmbeddedServletContainerFactory34.setAddress(inetAddress41);
        java.io.File file43 = undertowEmbeddedServletContainerFactory34.getDocumentRoot();
        io.undertow.Undertow.Builder builder45 = undertowEmbeddedServletContainerFactory34.createBuilder((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection48 = undertowEmbeddedServletContainerFactory47.getBuilderCustomizers();
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory47.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setAccessLogDirectory(file57);
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer62 = undertowEmbeddedServletContainerFactory52.getEmbeddedServletContainer(servletContextInitializerArray61);
        initializer50.initializers = servletContextInitializerArray61;
        io.undertow.servlet.api.DeploymentManager deploymentManager64 = undertowEmbeddedServletContainerFactory47.createDeploymentManager(servletContextInitializerArray61);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer66 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder45, deploymentManager64, 0);
        java.lang.String str67 = undertowEmbeddedServletContainerFactory15.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory69 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int70 = undertowEmbeddedServletContainerFactory69.ioThreads;
        org.springframework.boot.context.embedded.Compression compression71 = null;
        undertowEmbeddedServletContainerFactory69.setCompression(compression71);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection73 = undertowEmbeddedServletContainerFactory69.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo74 = null;
        undertowEmbeddedServletContainerFactory69.configureErrorPages(deploymentInfo74);
        java.net.InetAddress inetAddress76 = null;
        undertowEmbeddedServletContainerFactory69.setAddress(inetAddress76);
        java.io.File file78 = undertowEmbeddedServletContainerFactory69.getDocumentRoot();
        io.undertow.Undertow.Builder builder80 = undertowEmbeddedServletContainerFactory69.createBuilder((int) (short) 100);
        boolean boolean81 = undertowEmbeddedServletContainerFactory69.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory83 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection84 = undertowEmbeddedServletContainerFactory83.getBuilderCustomizers();
        java.lang.Integer int85 = undertowEmbeddedServletContainerFactory83.workerThreads;
        undertowEmbeddedServletContainerFactory83.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file88 = null;
        undertowEmbeddedServletContainerFactory83.setAccessLogDirectory(file88);
        undertowEmbeddedServletContainerFactory83.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray92 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer93 = undertowEmbeddedServletContainerFactory83.getEmbeddedServletContainer(servletContextInitializerArray92);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer94 = undertowEmbeddedServletContainerFactory69.getEmbeddedServletContainer(servletContextInitializerArray92);
        io.undertow.servlet.api.DeploymentManager deploymentManager95 = undertowEmbeddedServletContainerFactory15.createDeploymentManager(servletContextInitializerArray92);
        io.undertow.servlet.api.DeploymentManager deploymentManager96 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray92);
        java.io.File file97 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(errorPageSet13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray30);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection38);
        org.junit.Assert.assertNull(file43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
        org.junit.Assert.assertNotNull(embeddedServletContainer62);
        org.junit.Assert.assertNotNull(deploymentManager64);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection73);
        org.junit.Assert.assertNull(file78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection84);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNotNull(servletContextInitializerArray92);
        org.junit.Assert.assertNotNull(embeddedServletContainer93);
        org.junit.Assert.assertNotNull(embeddedServletContainer94);
        org.junit.Assert.assertNotNull(deploymentManager95);
        org.junit.Assert.assertNotNull(deploymentManager96);
        org.junit.Assert.assertNull(file97);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file6);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory1.getAddress();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(inetAddress10);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer21 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer21, initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27 };
        initializer19.initializers = servletContextInitializerArray28;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) ' ');
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.Compression compression36 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        boolean boolean39 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(compression36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) (-1));
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file13;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file20;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(resourceLoader17);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        int int11 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setUseForwardHeaders(false);
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory15.createBuilder(0);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet22 = undertowEmbeddedServletContainerFactory15.getErrorPages();
        boolean boolean23 = undertowEmbeddedServletContainerFactory15.accessLogEnabled;
        undertowEmbeddedServletContainerFactory15.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        undertowEmbeddedServletContainerFactory27.buffersPerRegion = 100;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList31 = undertowEmbeddedServletContainerFactory27.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory33.buffersPerRegion = 100;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory33.setAccessLogDirectory(file36);
        undertowEmbeddedServletContainerFactory33.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory33.setSessionStoreDir(file40);
        java.io.File file42 = undertowEmbeddedServletContainerFactory33.getSessionStoreDir();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList43 = undertowEmbeddedServletContainerFactory33.builderCustomizers;
        undertowEmbeddedServletContainerFactory27.builderCustomizers = undertowBuilderCustomizerList43;
        undertowEmbeddedServletContainerFactory15.builderCustomizers = undertowBuilderCustomizerList43;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection49 = undertowEmbeddedServletContainerFactory48.getBuilderCustomizers();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory48.workerThreads;
        undertowEmbeddedServletContainerFactory48.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory48.setAccessLogDirectory(file53);
        undertowEmbeddedServletContainerFactory48.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer58 = undertowEmbeddedServletContainerFactory48.getEmbeddedServletContainer(servletContextInitializerArray57);
        initializer46.initializers = servletContextInitializerArray57;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray60 = initializer46.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = initializer46.initializers;
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray61);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray61);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(jspServlet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(mimeMappings12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(errorPageSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList31);
        org.junit.Assert.assertNull(file42);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        org.junit.Assert.assertNotNull(embeddedServletContainer58);
        org.junit.Assert.assertNotNull(servletContextInitializerArray60);
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 0);
        org.springframework.core.io.ResourceLoader resourceLoader2 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.JspServlet jspServlet3 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection8 = undertowEmbeddedServletContainerFactory7.getBuilderCustomizers();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory7.workerThreads;
        undertowEmbeddedServletContainerFactory7.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory7.buffersPerRegion = 0;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory7.getDisplayName();
        boolean boolean15 = undertowEmbeddedServletContainerFactory7.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory7.useForwardHeaders = false;
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory7.setSsl(ssl18);
        undertowEmbeddedServletContainerFactory7.setWorkerThreads((java.lang.Integer) 10);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory7.getListenAddress();
        org.springframework.boot.context.embedded.ErrorPage errorPage23 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray24 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage23 };
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray24);
        org.junit.Assert.assertNull(resourceLoader2);
        org.junit.Assert.assertNotNull(jspServlet3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0.0.0.0" + "'", str22, "0.0.0.0");
        org.junit.Assert.assertNotNull(errorPageArray24);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.lang.Boolean boolean19 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        org.springframework.boot.context.embedded.ErrorPage errorPage22 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage23 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + boolean19 + "' != '" + true + "'", boolean19, true);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        java.io.File file20 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        boolean boolean21 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        int int24 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNull(file20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory11.setDocumentRoot(file14);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory18.workerThreads;
        undertowEmbeddedServletContainerFactory18.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setAccessLogDirectory(file23);
        undertowEmbeddedServletContainerFactory18.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer28 = undertowEmbeddedServletContainerFactory18.getEmbeddedServletContainer(servletContextInitializerArray27);
        undertowEmbeddedServletContainerFactory11.addInitializers(servletContextInitializerArray27);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray27);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        org.junit.Assert.assertNotNull(embeddedServletContainer28);
        org.junit.Assert.assertNotNull(deploymentManager30);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.Compression compression7 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) (-1));
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        int int15 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        boolean boolean18 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(compression7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1800 + "'", int15 == 1800);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory54.setPersistSession(false);
        io.undertow.Undertow.Builder builder58 = undertowEmbeddedServletContainerFactory54.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory54.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory62.ioThreads;
        org.springframework.boot.context.embedded.Compression compression64 = null;
        undertowEmbeddedServletContainerFactory62.setCompression(compression64);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection66 = undertowEmbeddedServletContainerFactory62.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo67 = null;
        undertowEmbeddedServletContainerFactory62.configureErrorPages(deploymentInfo67);
        java.net.InetAddress inetAddress69 = null;
        undertowEmbeddedServletContainerFactory62.setAddress(inetAddress69);
        java.lang.Integer int71 = undertowEmbeddedServletContainerFactory62.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings72 = undertowEmbeddedServletContainerFactory62.getMimeMappings();
        undertowEmbeddedServletContainerFactory54.setMimeMappings(mimeMappings72);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader76 = null;
        undertowEmbeddedServletContainerFactory75.setResourceLoader(resourceLoader76);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory79 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int80 = undertowEmbeddedServletContainerFactory79.ioThreads;
        org.springframework.boot.context.embedded.Compression compression81 = null;
        undertowEmbeddedServletContainerFactory79.setCompression(compression81);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection83 = undertowEmbeddedServletContainerFactory79.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo84 = null;
        undertowEmbeddedServletContainerFactory79.configureErrorPages(deploymentInfo84);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList86 = undertowEmbeddedServletContainerFactory79.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory75.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList86;
        undertowEmbeddedServletContainerFactory54.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList86;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList86;
        java.io.File file90 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection66);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(mimeMappings72);
        org.junit.Assert.assertNull(int80);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection83);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList86);
        org.junit.Assert.assertNull(file90);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList14, undertowBuilderCustomizerArray13);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray30);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo33);
        java.io.File file35 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertNull(file35);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        int int5 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.ErrorPage errorPage6 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage7 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.JspServlet jspServlet10 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        undertowEmbeddedServletContainerFactory13.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray17 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory13.addErrorPages(errorPageArray17);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray17);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader22;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(jspServlet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(errorPageArray17);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer7 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer9 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer7, initParameterConfiguringServletContextInitializer9, initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13 };
        initializer5.initializers = servletContextInitializerArray14;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = initializer5.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory18.workerThreads;
        undertowEmbeddedServletContainerFactory18.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setAccessLogDirectory(file23);
        undertowEmbeddedServletContainerFactory18.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer28 = undertowEmbeddedServletContainerFactory18.getEmbeddedServletContainer(servletContextInitializerArray27);
        initializer5.initializers = servletContextInitializerArray27;
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray27);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(servletContextInitializerArray14);
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        org.junit.Assert.assertNotNull(embeddedServletContainer28);
        org.junit.Assert.assertNotNull(deploymentManager30);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 10);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file5 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        undertowEmbeddedServletContainerFactory8.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList14, undertowBuilderCustomizerArray13);
        undertowEmbeddedServletContainerFactory8.builderCustomizers = undertowBuilderCustomizerList14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory18.workerThreads;
        undertowEmbeddedServletContainerFactory18.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray23 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory18.addBuilderCustomizers(undertowBuilderCustomizerArray23);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray23);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray23);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray23);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        java.lang.String str4 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        java.lang.String str7 = jarResourceManager0.jarPath;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.ClassLoader classLoader15 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.xnio.XnioWorker xnioWorker16 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.lang.Boolean boolean17 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNull(file14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(xnioWorker16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList4 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList4, undertowBuilderCustomizerArray3);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList4;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader7);
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo10);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        boolean boolean17 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection18 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(resourceLoader9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0.0.0.0" + "'", str16, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection18);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader8;
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader11);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(jspServlet5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        int int11 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.getContextPath();
        int int15 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1800 + "'", int11 == 1800);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setUseForwardHeaders(false);
        java.lang.String str14 = undertowEmbeddedServletContainerFactory9.getDisplayName();
        undertowEmbeddedServletContainerFactory9.setBufferSize((java.lang.Integer) 1);
        boolean boolean17 = undertowEmbeddedServletContainerFactory9.isRegisterDefaultServlet();
        java.lang.Boolean boolean18 = undertowEmbeddedServletContainerFactory9.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList19 = undertowEmbeddedServletContainerFactory9.builderCustomizers;
        undertowEmbeddedServletContainerFactory9.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory9.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings22);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1);
        java.net.InetAddress inetAddress26 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(boolean18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList19);
        org.junit.Assert.assertNotNull(mimeMappings22);
        org.junit.Assert.assertNull(inetAddress26);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode11 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection18 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.net.InetAddress inetAddress21 = null;
        undertowEmbeddedServletContainerFactory14.setAddress(inetAddress21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory14.workerThreads;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory14.setAccessLogDirectory(file24);
        boolean boolean26 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        undertowEmbeddedServletContainerFactory28.setRegisterJspServlet(true);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory28.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet35 = undertowEmbeddedServletContainerFactory28.getJspServlet();
        undertowEmbeddedServletContainerFactory14.setJspServlet(jspServlet35);
        undertowEmbeddedServletContainerFactory14.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        org.springframework.boot.context.embedded.ErrorPage errorPage49 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray50 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage49 };
        undertowEmbeddedServletContainerFactory40.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory14.addErrorPages(errorPageArray50);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList53 = undertowEmbeddedServletContainerFactory14.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList53;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        io.undertow.server.handlers.resource.ResourceManager resourceManager57 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.core.io.ResourceLoader resourceLoader58 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader58;
        java.lang.String str60 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(jspServlet35);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNotNull(errorPageArray50);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList53);
        org.junit.Assert.assertNotNull(resourceManager57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0.0.0.0" + "'", str60, "0.0.0.0");
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int24 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory26.setResourceLoader(resourceLoader37);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory40.workerThreads;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file50);
        boolean boolean52 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        undertowEmbeddedServletContainerFactory54.setRegisterJspServlet(true);
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory54.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet61 = undertowEmbeddedServletContainerFactory54.getJspServlet();
        undertowEmbeddedServletContainerFactory40.setJspServlet(jspServlet61);
        undertowEmbeddedServletContainerFactory26.setJspServlet(jspServlet61);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet61);
        org.springframework.boot.context.embedded.Ssl ssl65 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.boot.context.embedded.Ssl ssl66 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 0);
        java.io.File file69 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(jspServlet61);
        org.junit.Assert.assertNull(ssl65);
        org.junit.Assert.assertNull(ssl66);
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        org.xnio.XnioWorker xnioWorker12 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        undertowEmbeddedServletContainerFactory16.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer26 = undertowEmbeddedServletContainerFactory16.getEmbeddedServletContainer(servletContextInitializerArray25);
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory16.setResourceLoader(resourceLoader27);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory30.ioThreads;
        org.springframework.boot.context.embedded.Compression compression32 = null;
        undertowEmbeddedServletContainerFactory30.setCompression(compression32);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection34 = undertowEmbeddedServletContainerFactory30.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo35 = null;
        undertowEmbeddedServletContainerFactory30.configureErrorPages(deploymentInfo35);
        java.net.InetAddress inetAddress37 = null;
        undertowEmbeddedServletContainerFactory30.setAddress(inetAddress37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory30.workerThreads;
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory30.setAccessLogDirectory(file40);
        boolean boolean42 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        undertowEmbeddedServletContainerFactory44.setRegisterJspServlet(true);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory44.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet51 = undertowEmbeddedServletContainerFactory44.getJspServlet();
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet51);
        undertowEmbeddedServletContainerFactory16.setJspServlet(jspServlet51);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet51);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(xnioWorker12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(embeddedServletContainer26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection34);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(jspServlet51);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.Ssl ssl26 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(ssl26);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file12;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNotNull(xnioWorker18);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.close();
        boolean boolean12 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean13 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str15 = jarResourceManager0.jarPath;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0.0.0.0" + "'", str15, "0.0.0.0");
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setIoThreads((java.lang.Integer) (-1));
        java.io.File file18 = undertowEmbeddedServletContainerFactory13.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory13.resourceLoader = resourceLoader19;
        java.lang.ClassLoader classLoader21 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        org.springframework.boot.context.embedded.JspServlet jspServlet22 = undertowEmbeddedServletContainerFactory13.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet22);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory26.ioThreads;
        java.lang.String str28 = undertowEmbeddedServletContainerFactory26.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager29 = undertowEmbeddedServletContainerFactory26.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory26.setJspServletClassName("hi!");
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory26.ioThreads;
        undertowEmbeddedServletContainerFactory26.workerThreads = 32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory36.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo41);
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress43);
        org.springframework.boot.context.embedded.ErrorPage errorPage45 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray46 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage45 };
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray46);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory36.resourceLoader = resourceLoader48;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory36.setDocumentRoot(file50);
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory36.ioThreads;
        undertowEmbeddedServletContainerFactory36.bufferSize = 100;
        undertowEmbeddedServletContainerFactory36.setPort((int) (short) 0);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory36.setSessionStoreDir(file57);
        org.springframework.boot.context.embedded.JspServlet jspServlet59 = undertowEmbeddedServletContainerFactory36.getJspServlet();
        undertowEmbeddedServletContainerFactory26.setJspServlet(jspServlet59);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet59);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(jspServlet22);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(resourceManager29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNotNull(errorPageArray46);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(jspServlet59);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file4;
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 97);
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("0.0.0.0", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory12.setRegisterJspServlet(true);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file19;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory12.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList25;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection31 = undertowEmbeddedServletContainerFactory30.getBuilderCustomizers();
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory30.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet33 = undertowEmbeddedServletContainerFactory30.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression34 = null;
        undertowEmbeddedServletContainerFactory30.setCompression(compression34);
        org.springframework.core.io.ResourceLoader resourceLoader36 = null;
        undertowEmbeddedServletContainerFactory30.resourceLoader = resourceLoader36;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection38 = undertowEmbeddedServletContainerFactory30.getBuilderCustomizers();
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory30.setResourceLoader(resourceLoader39);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList41 = undertowEmbeddedServletContainerFactory30.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList41;
        java.lang.String str43 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory1.bufferSize;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(jspServlet33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0.0.0.0" + "'", str43, "0.0.0.0");
        org.junit.Assert.assertNull(int44);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1800);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file10;
        io.undertow.server.HttpHandler httpHandler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler13 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        java.lang.String str4 = jarResourceManager0.jarPath;
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        java.lang.String str8 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection17 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage19 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection17);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        java.lang.ClassLoader classLoader49 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        java.lang.ClassLoader classLoader50 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file4;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection19 = undertowEmbeddedServletContainerFactory15.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet20 = undertowEmbeddedServletContainerFactory15.getErrorPages();
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file21);
        org.springframework.boot.context.embedded.Compression compression23 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = undertowEmbeddedServletContainerFactory15.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList25;
        boolean boolean27 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection19);
        org.junit.Assert.assertNotNull(errorPageSet20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList16 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory20.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet23 = null;
        undertowEmbeddedServletContainerFactory20.setJspServlet(jspServlet23);
        java.net.InetAddress inetAddress25 = undertowEmbeddedServletContainerFactory20.getAddress();
        boolean boolean26 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        undertowEmbeddedServletContainerFactory20.setAccessLogPattern("0.0.0.0");
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory20.bufferSize;
        java.lang.String str30 = undertowEmbeddedServletContainerFactory20.getDisplayName();
        org.springframework.boot.context.embedded.Compression compression31 = undertowEmbeddedServletContainerFactory20.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        undertowEmbeddedServletContainerFactory33.setUseForwardHeaders(false);
        java.lang.String str38 = undertowEmbeddedServletContainerFactory33.getDisplayName();
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory33.directBuffers = false;
        boolean boolean43 = undertowEmbeddedServletContainerFactory33.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory33.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress48 = null;
        undertowEmbeddedServletContainerFactory47.setAddress(inetAddress48);
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory47.setSessionStoreDir(file50);
        undertowEmbeddedServletContainerFactory47.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory47.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.ErrorPage errorPage56 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray57 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage56 };
        undertowEmbeddedServletContainerFactory47.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory33.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory20.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 97);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList16);
        org.junit.Assert.assertNull(inetAddress25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(compression31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(errorPageArray57);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.ClassLoader classLoader7 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader12;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1800);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 10);
        io.undertow.server.handlers.resource.ResourceManager resourceManager19 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.ioThreads = 97;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(resourceManager19);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader15);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        java.net.InetAddress inetAddress20 = undertowEmbeddedServletContainerFactory18.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo27);
        java.net.InetAddress inetAddress29 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress29);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory22.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory34.setPersistSession(false);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory34.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer41 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder38, deploymentManager39, (int) '4');
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file42);
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory22.buffersPerRegion;
        io.undertow.Undertow.Builder builder46 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory48.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet51 = null;
        undertowEmbeddedServletContainerFactory48.setJspServlet(jspServlet51);
        java.net.InetAddress inetAddress53 = undertowEmbeddedServletContainerFactory48.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection57 = undertowEmbeddedServletContainerFactory56.getBuilderCustomizers();
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory56.workerThreads;
        undertowEmbeddedServletContainerFactory56.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory56.setAccessLogDirectory(file61);
        undertowEmbeddedServletContainerFactory56.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer66 = undertowEmbeddedServletContainerFactory56.getEmbeddedServletContainer(servletContextInitializerArray65);
        initializer54.initializers = servletContextInitializerArray65;
        io.undertow.servlet.api.DeploymentManager deploymentManager68 = undertowEmbeddedServletContainerFactory48.createDeploymentManager(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray65);
        io.undertow.servlet.api.DeploymentManager deploymentManager70 = undertowEmbeddedServletContainerFactory18.createDeploymentManager(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory18.ioThreads = 0;
        undertowEmbeddedServletContainerFactory18.directBuffers = true;
        undertowEmbeddedServletContainerFactory18.setIoThreads((java.lang.Integer) 10);
        java.io.File file77 = null;
        undertowEmbeddedServletContainerFactory18.setAccessLogDirectory(file77);
        org.springframework.boot.context.embedded.Compression compression79 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression79);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory82 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection83 = undertowEmbeddedServletContainerFactory82.getBuilderCustomizers();
        java.lang.Integer int84 = undertowEmbeddedServletContainerFactory82.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap85 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer86 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap85);
        java.util.Map<java.lang.String, java.lang.String> strMap87 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer88 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap87);
        java.util.Map<java.lang.String, java.lang.String> strMap89 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer90 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap89);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray91 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer86, initParameterConfiguringServletContextInitializer88, initParameterConfiguringServletContextInitializer90 };
        undertowEmbeddedServletContainerFactory82.addInitializers(servletContextInitializerArray91);
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer94 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NullPointerException");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNotNull(resourceManager12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mimeMappings19);
        org.junit.Assert.assertNull(inetAddress20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(mimeMappings32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer41);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(inetAddress53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        org.junit.Assert.assertNotNull(embeddedServletContainer66);
        org.junit.Assert.assertNotNull(deploymentManager68);
        org.junit.Assert.assertNotNull(deploymentManager70);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection83);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNotNull(servletContextInitializerArray91);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 52);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file10);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray10 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) '#');
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection20 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection20);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader13);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file8);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(resourceLoader13);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        undertowEmbeddedServletContainerFactory15.setRegisterJspServlet(true);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory15.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet22 = undertowEmbeddedServletContainerFactory15.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet22);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList28 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        io.undertow.server.handlers.resource.ResourceManager resourceManager29 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet36 = undertowEmbeddedServletContainerFactory33.getJspServlet();
        undertowEmbeddedServletContainerFactory31.setJspServlet(jspServlet36);
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory31.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        int int44 = undertowEmbeddedServletContainerFactory40.getSessionTimeout();
        undertowEmbeddedServletContainerFactory40.buffersPerRegion = 100;
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory40.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader48 = undertowEmbeddedServletContainerFactory40.resourceLoader;
        undertowEmbeddedServletContainerFactory40.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 10);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray54 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory53.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        undertowEmbeddedServletContainerFactory40.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory58.setAddress(inetAddress59);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory58.setSessionStoreDir(file61);
        undertowEmbeddedServletContainerFactory58.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray65 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory58.addBuilderCustomizers(undertowBuilderCustomizerArray65);
        undertowEmbeddedServletContainerFactory40.addBuilderCustomizers(undertowBuilderCustomizerArray65);
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray65);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray65);
        io.undertow.server.HttpHandler httpHandler70 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler71 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(jspServlet22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList28);
        org.junit.Assert.assertNotNull(resourceManager29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(jspServlet36);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1800 + "'", int44 == 1800);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(resourceLoader48);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray54);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray65);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo19);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet25 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory29.setCompression(compression31);
        int int33 = undertowEmbeddedServletContainerFactory29.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker34 = undertowEmbeddedServletContainerFactory29.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = undertowEmbeddedServletContainerFactory29.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory29.setIoThreads((java.lang.Integer) 1);
        java.lang.String str38 = undertowEmbeddedServletContainerFactory29.getContextPath();
        boolean boolean39 = undertowEmbeddedServletContainerFactory29.useForwardHeaders;
        undertowEmbeddedServletContainerFactory29.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        undertowEmbeddedServletContainerFactory49.setRegisterJspServlet(true);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory49.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet56 = undertowEmbeddedServletContainerFactory49.getJspServlet();
        undertowEmbeddedServletContainerFactory43.setJspServlet(jspServlet56);
        undertowEmbeddedServletContainerFactory43.accessLogEnabled = false;
        java.lang.String str60 = undertowEmbeddedServletContainerFactory43.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory62.ioThreads;
        org.springframework.boot.context.embedded.Compression compression64 = null;
        undertowEmbeddedServletContainerFactory62.setCompression(compression64);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection66 = undertowEmbeddedServletContainerFactory62.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo67 = null;
        undertowEmbeddedServletContainerFactory62.configureErrorPages(deploymentInfo67);
        java.net.InetAddress inetAddress69 = null;
        undertowEmbeddedServletContainerFactory62.setAddress(inetAddress69);
        org.springframework.boot.context.embedded.ErrorPage errorPage71 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray72 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage71 };
        undertowEmbeddedServletContainerFactory62.addErrorPages(errorPageArray72);
        org.springframework.core.io.ResourceLoader resourceLoader74 = null;
        undertowEmbeddedServletContainerFactory62.resourceLoader = resourceLoader74;
        java.io.File file76 = null;
        undertowEmbeddedServletContainerFactory62.setDocumentRoot(file76);
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory62.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress81 = null;
        undertowEmbeddedServletContainerFactory80.setAddress(inetAddress81);
        java.io.File file83 = null;
        undertowEmbeddedServletContainerFactory80.setSessionStoreDir(file83);
        undertowEmbeddedServletContainerFactory80.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings87 = undertowEmbeddedServletContainerFactory80.getMimeMappings();
        undertowEmbeddedServletContainerFactory62.setMimeMappings(mimeMappings87);
        undertowEmbeddedServletContainerFactory43.setMimeMappings(mimeMappings87);
        undertowEmbeddedServletContainerFactory29.setMimeMappings(mimeMappings87);
        undertowEmbeddedServletContainerFactory22.setMimeMappings(mimeMappings87);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings87);
        java.lang.String str93 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(jspServlet25);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1800 + "'", int33 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker34);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(jspServlet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection66);
        org.junit.Assert.assertNotNull(errorPageArray72);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(mimeMappings87);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0.0.0.0" + "'", str93, "0.0.0.0");
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file9);
        java.lang.ClassLoader classLoader11 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader11);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression15);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        boolean boolean18 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray19);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        int int29 = undertowEmbeddedServletContainerFactory25.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory25.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList35 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file36);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1800 + "'", int29 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList35);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory1.createBuilder(0);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl4 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl4);
        int int6 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        org.xnio.XnioWorker xnioWorker22 = undertowEmbeddedServletContainerFactory11.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory24.setResourceLoader(resourceLoader25);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray27 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList28 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList28, undertowDeploymentInfoCustomizerArray27);
        undertowEmbeddedServletContainerFactory24.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList28;
        undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList28;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory35.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory39.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet42 = null;
        undertowEmbeddedServletContainerFactory39.setJspServlet(jspServlet42);
        java.net.InetAddress inetAddress44 = undertowEmbeddedServletContainerFactory39.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection48 = undertowEmbeddedServletContainerFactory47.getBuilderCustomizers();
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory47.workerThreads;
        undertowEmbeddedServletContainerFactory47.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory47.setAccessLogDirectory(file52);
        undertowEmbeddedServletContainerFactory47.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray56 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer57 = undertowEmbeddedServletContainerFactory47.getEmbeddedServletContainer(servletContextInitializerArray56);
        initializer45.initializers = servletContextInitializerArray56;
        io.undertow.servlet.api.DeploymentManager deploymentManager59 = undertowEmbeddedServletContainerFactory39.createDeploymentManager(servletContextInitializerArray56);
        undertowEmbeddedServletContainerFactory35.addInitializers(servletContextInitializerArray56);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer61 = undertowEmbeddedServletContainerFactory11.getEmbeddedServletContainer(servletContextInitializerArray56);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo9, servletContextInitializerArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(xnioWorker22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inetAddress44);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(servletContextInitializerArray56);
        org.junit.Assert.assertNotNull(embeddedServletContainer57);
        org.junit.Assert.assertNotNull(deploymentManager59);
        org.junit.Assert.assertNotNull(embeddedServletContainer61);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo18 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(file14);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList17);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 100);
        undertowEmbeddedServletContainerFactory1.setPort((int) ' ');
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file13;
        java.net.InetAddress inetAddress15 = undertowEmbeddedServletContainerFactory12.getAddress();
        undertowEmbeddedServletContainerFactory12.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory19.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory23.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = null;
        undertowEmbeddedServletContainerFactory23.setJspServlet(jspServlet26);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory23.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        undertowEmbeddedServletContainerFactory31.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory31.setAccessLogDirectory(file36);
        undertowEmbeddedServletContainerFactory31.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer41 = undertowEmbeddedServletContainerFactory31.getEmbeddedServletContainer(servletContextInitializerArray40);
        initializer29.initializers = servletContextInitializerArray40;
        io.undertow.servlet.api.DeploymentManager deploymentManager43 = undertowEmbeddedServletContainerFactory23.createDeploymentManager(servletContextInitializerArray40);
        undertowEmbeddedServletContainerFactory19.addInitializers(servletContextInitializerArray40);
        java.lang.String str45 = undertowEmbeddedServletContainerFactory19.getContextPath();
        boolean boolean46 = undertowEmbeddedServletContainerFactory19.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection49 = undertowEmbeddedServletContainerFactory48.getBuilderCustomizers();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory48.workerThreads;
        undertowEmbeddedServletContainerFactory48.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory48.setAccessLogDirectory(file53);
        undertowEmbeddedServletContainerFactory48.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer58 = undertowEmbeddedServletContainerFactory48.getEmbeddedServletContainer(servletContextInitializerArray57);
        org.springframework.core.io.ResourceLoader resourceLoader59 = null;
        undertowEmbeddedServletContainerFactory48.setResourceLoader(resourceLoader59);
        undertowEmbeddedServletContainerFactory48.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer63 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray64 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer63 };
        undertowEmbeddedServletContainerFactory48.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray64);
        undertowEmbeddedServletContainerFactory19.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray64);
        undertowEmbeddedServletContainerFactory12.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray64);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray64);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(inetAddress15);
        org.junit.Assert.assertNull(inetAddress28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
        org.junit.Assert.assertNotNull(embeddedServletContainer41);
        org.junit.Assert.assertNotNull(deploymentManager43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        org.junit.Assert.assertNotNull(embeddedServletContainer58);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray64);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory12.setCompression(compression14);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory12.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        java.net.InetAddress inetAddress19 = null;
        undertowEmbeddedServletContainerFactory12.setAddress(inetAddress19);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory12.workerThreads;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file22);
        boolean boolean24 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory26.ioThreads;
        org.springframework.boot.context.embedded.Compression compression28 = null;
        undertowEmbeddedServletContainerFactory26.setCompression(compression28);
        undertowEmbeddedServletContainerFactory26.setRegisterJspServlet(true);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory26.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet33 = undertowEmbeddedServletContainerFactory26.getJspServlet();
        undertowEmbeddedServletContainerFactory12.setJspServlet(jspServlet33);
        undertowEmbeddedServletContainerFactory12.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory12.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray42 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory40.addErrorPages(errorPageArray42);
        org.springframework.boot.context.embedded.JspServlet jspServlet44 = undertowEmbeddedServletContainerFactory40.getJspServlet();
        undertowEmbeddedServletContainerFactory12.setJspServlet(jspServlet44);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet44);
        boolean boolean47 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.lang.String str48 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(jspServlet33);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(errorPageArray42);
        org.junit.Assert.assertNotNull(jspServlet44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory11.getDisplayName();
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        boolean boolean32 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file33;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression10);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory12.setRegisterJspServlet(true);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file19;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory12.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList25;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList25;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection29 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.lang.String str30 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        io.undertow.Undertow.Builder builder32 = undertowEmbeddedServletContainerFactory1.createBuilder(1800);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer9 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer9, initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15 };
        initializer7.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = initializer7.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        undertowEmbeddedServletContainerFactory20.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory20.setAccessLogDirectory(file25);
        undertowEmbeddedServletContainerFactory20.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer30 = undertowEmbeddedServletContainerFactory20.getEmbeddedServletContainer(servletContextInitializerArray29);
        initializer7.initializers = servletContextInitializerArray29;
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray29);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.Compression compression35 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression35);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo39 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(servletContextInitializerArray29);
        org.junit.Assert.assertNotNull(embeddedServletContainer30);
        org.junit.Assert.assertNotNull(deploymentManager32);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        org.springframework.boot.context.embedded.Ssl ssl15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode16 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader39;
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress45 = null;
        undertowEmbeddedServletContainerFactory44.setAddress(inetAddress45);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.setSessionStoreDir(file47);
        org.springframework.boot.context.embedded.Compression compression49 = undertowEmbeddedServletContainerFactory44.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory51.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        undertowEmbeddedServletContainerFactory59.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file64 = null;
        undertowEmbeddedServletContainerFactory59.setAccessLogDirectory(file64);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo66 = null;
        undertowEmbeddedServletContainerFactory59.configureErrorPages(deploymentInfo66);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer68 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray69 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer68 };
        undertowEmbeddedServletContainerFactory59.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory51.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory44.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean78 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        java.io.File file79 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList80 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.ErrorPage errorPage81 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage82 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNull(compression49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray69);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(file79);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList80);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        boolean boolean35 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        io.undertow.Undertow.Builder builder37 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) 1);
        java.lang.String str38 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory46.ioThreads;
        org.springframework.boot.context.embedded.Compression compression48 = null;
        undertowEmbeddedServletContainerFactory46.setCompression(compression48);
        undertowEmbeddedServletContainerFactory46.setRegisterJspServlet(true);
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory46.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet53 = undertowEmbeddedServletContainerFactory46.getJspServlet();
        undertowEmbeddedServletContainerFactory40.setJspServlet(jspServlet53);
        undertowEmbeddedServletContainerFactory40.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory40.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory40.setJspServletClassName("");
        java.io.File file61 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo62 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo62);
        org.springframework.boot.context.embedded.JspServlet jspServlet64 = undertowEmbeddedServletContainerFactory40.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet64);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(jspServlet53);
        org.junit.Assert.assertNull(file61);
        org.junit.Assert.assertNotNull(jspServlet64);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file17);
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getEmbeddedServletContainer(servletContextInitializerArray21);
        initializer10.initializers = servletContextInitializerArray21;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer24 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        boolean boolean28 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.String str29 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings30 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection33 = undertowEmbeddedServletContainerFactory32.getBuilderCustomizers();
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory32.workerThreads;
        undertowEmbeddedServletContainerFactory32.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory32.setAccessLogDirectory(file37);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList39 = undertowEmbeddedServletContainerFactory32.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress40 = null;
        undertowEmbeddedServletContainerFactory32.setAddress(inetAddress40);
        undertowEmbeddedServletContainerFactory32.accessLogPattern = "hi!";
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet44 = undertowEmbeddedServletContainerFactory32.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer47 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer49 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer51 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap50);
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer53 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap52);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray54 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer47, initParameterConfiguringServletContextInitializer49, initParameterConfiguringServletContextInitializer51, initParameterConfiguringServletContextInitializer53 };
        initializer45.initializers = servletContextInitializerArray54;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray56 = initializer45.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection59 = undertowEmbeddedServletContainerFactory58.getBuilderCustomizers();
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory58.workerThreads;
        undertowEmbeddedServletContainerFactory58.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file63 = null;
        undertowEmbeddedServletContainerFactory58.setAccessLogDirectory(file63);
        undertowEmbeddedServletContainerFactory58.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray67 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer68 = undertowEmbeddedServletContainerFactory58.getEmbeddedServletContainer(servletContextInitializerArray67);
        initializer45.initializers = servletContextInitializerArray67;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = initializer45.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray71 = initializer45.initializers;
        undertowEmbeddedServletContainerFactory32.addInitializers(servletContextInitializerArray71);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray71);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        org.junit.Assert.assertNotNull(embeddedServletContainer22);
        org.junit.Assert.assertNotNull(embeddedServletContainer24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(mimeMappings30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList39);
        org.junit.Assert.assertNotNull(errorPageSet44);
        org.junit.Assert.assertNotNull(servletContextInitializerArray54);
        org.junit.Assert.assertNotNull(servletContextInitializerArray56);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(servletContextInitializerArray67);
        org.junit.Assert.assertNotNull(embeddedServletContainer68);
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        org.junit.Assert.assertNotNull(servletContextInitializerArray71);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory15.setDisplayName("hi!");
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory15.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory23.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory27.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet30 = null;
        undertowEmbeddedServletContainerFactory27.setJspServlet(jspServlet30);
        java.net.InetAddress inetAddress32 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory35.setAccessLogDirectory(file40);
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getEmbeddedServletContainer(servletContextInitializerArray44);
        initializer33.initializers = servletContextInitializerArray44;
        io.undertow.servlet.api.DeploymentManager deploymentManager47 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray44);
        undertowEmbeddedServletContainerFactory23.addInitializers(servletContextInitializerArray44);
        io.undertow.servlet.api.DeploymentManager deploymentManager49 = undertowEmbeddedServletContainerFactory15.createDeploymentManager(servletContextInitializerArray44);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray44);
        java.lang.String str51 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inetAddress32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(embeddedServletContainer45);
        org.junit.Assert.assertNotNull(deploymentManager47);
        org.junit.Assert.assertNotNull(deploymentManager49);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean7 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource12 = jarResourceManager0.getResource("hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.lang.String str18 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory20.ioThreads;
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory20.setCompression(compression22);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection24 = undertowEmbeddedServletContainerFactory20.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory20.configureErrorPages(deploymentInfo25);
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory20.setAddress(inetAddress27);
        org.springframework.boot.context.embedded.ErrorPage errorPage29 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage29 };
        undertowEmbeddedServletContainerFactory20.addErrorPages(errorPageArray30);
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory20.resourceLoader = resourceLoader32;
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory20.setDocumentRoot(file34);
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory20.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress39 = null;
        undertowEmbeddedServletContainerFactory38.setAddress(inetAddress39);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory38.setSessionStoreDir(file41);
        undertowEmbeddedServletContainerFactory38.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory38.getMimeMappings();
        undertowEmbeddedServletContainerFactory20.setMimeMappings(mimeMappings45);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        java.lang.String str51 = undertowEmbeddedServletContainerFactory49.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet52 = undertowEmbeddedServletContainerFactory49.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet52);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray54 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection24);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(mimeMappings45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(errorPageSet52);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        java.lang.String str2 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener9 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        int int47 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.Compression compression48 = undertowEmbeddedServletContainerFactory1.getCompression();
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNull(compression48);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        java.net.InetAddress inetAddress7 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder26, deploymentManager27, (int) '4');
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory10.setSessionStoreDir(file30);
        io.undertow.Undertow.Builder builder33 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory37.ioThreads;
        org.springframework.boot.context.embedded.Compression compression39 = null;
        undertowEmbeddedServletContainerFactory37.setCompression(compression39);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection41 = undertowEmbeddedServletContainerFactory37.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo42 = null;
        undertowEmbeddedServletContainerFactory37.configureErrorPages(deploymentInfo42);
        java.net.InetAddress inetAddress44 = null;
        undertowEmbeddedServletContainerFactory37.setAddress(inetAddress44);
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory37.workerThreads;
        undertowEmbeddedServletContainerFactory37.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList49 = undertowEmbeddedServletContainerFactory37.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory37.ioThreads = 0;
        io.undertow.Undertow.Builder builder53 = undertowEmbeddedServletContainerFactory37.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection56 = undertowEmbeddedServletContainerFactory55.getBuilderCustomizers();
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory55.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection61 = undertowEmbeddedServletContainerFactory60.getBuilderCustomizers();
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory60.workerThreads;
        undertowEmbeddedServletContainerFactory60.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file65 = null;
        undertowEmbeddedServletContainerFactory60.setAccessLogDirectory(file65);
        undertowEmbeddedServletContainerFactory60.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray69 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer70 = undertowEmbeddedServletContainerFactory60.getEmbeddedServletContainer(servletContextInitializerArray69);
        initializer58.initializers = servletContextInitializerArray69;
        io.undertow.servlet.api.DeploymentManager deploymentManager72 = undertowEmbeddedServletContainerFactory55.createDeploymentManager(servletContextInitializerArray69);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer74 = undertowEmbeddedServletContainerFactory35.getUndertowEmbeddedServletContainer(builder53, deploymentManager72, (int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer76 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder33, deploymentManager72, 0);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        java.io.File file79 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Ssl ssl80 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(inetAddress7);
        org.junit.Assert.assertNull(resourceLoader8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(mimeMappings20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection41);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection61);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(servletContextInitializerArray69);
        org.junit.Assert.assertNotNull(embeddedServletContainer70);
        org.junit.Assert.assertNotNull(deploymentManager72);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer74);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer76);
        org.junit.Assert.assertNull(file79);
        org.junit.Assert.assertNull(ssl80);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo3 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo3);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        org.springframework.boot.context.embedded.Ssl ssl11 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(100);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 32);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        java.lang.String str21 = undertowEmbeddedServletContainerFactory19.accessLogPattern;
        undertowEmbeddedServletContainerFactory19.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory19.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory29.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory19.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Boolean boolean41 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        java.lang.Boolean boolean44 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(resourceLoader17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray34);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNull(boolean44);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory12.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        java.lang.String str24 = undertowEmbeddedServletContainerFactory22.accessLogPattern;
        undertowEmbeddedServletContainerFactory22.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray30);
        org.springframework.boot.context.embedded.Ssl ssl35 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl35);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        int int48 = undertowEmbeddedServletContainerFactory44.getSessionTimeout();
        undertowEmbeddedServletContainerFactory44.buffersPerRegion = 100;
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory44.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer52 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray53 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer52 };
        undertowEmbeddedServletContainerFactory44.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet55 = undertowEmbeddedServletContainerFactory44.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet55);
        org.springframework.boot.context.embedded.ErrorPage errorPage57 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage58 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1800 + "'", int48 == 1800);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray53);
        org.junit.Assert.assertNotNull(errorPageSet55);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 52);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        java.lang.String str4 = jarResourceManager0.jarPath;
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str6 = jarResourceManager0.jarPath;
        boolean boolean7 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean8 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource10 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file13);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet17 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.net.InetAddress inetAddress18 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress18);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(jspServlet17);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.io.File file2 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file2);
        java.net.InetAddress inetAddress4 = undertowEmbeddedServletContainerFactory1.getAddress();
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory7.builderCustomizers;
        boolean boolean13 = undertowEmbeddedServletContainerFactory7.isAccessLogEnabled();
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory7.setDocumentRoot(file14);
        boolean boolean16 = undertowEmbeddedServletContainerFactory7.isAccessLogEnabled();
        java.io.File file17 = undertowEmbeddedServletContainerFactory7.getSessionStoreDir();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory7.buffersPerRegion;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList19 = undertowEmbeddedServletContainerFactory7.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList19;
        org.junit.Assert.assertNull(inetAddress4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(file17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList19);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        org.springframework.boot.context.embedded.Compression compression28 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file29);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(compression28);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList14, undertowBuilderCustomizerArray13);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        java.util.concurrent.TimeUnit timeUnit28 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 0, timeUnit28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file16);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.springframework.boot.context.embedded.Ssl ssl12 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl12);
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        int int21 = undertowEmbeddedServletContainerFactory17.getSessionTimeout();
        undertowEmbeddedServletContainerFactory17.buffersPerRegion = 100;
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory17.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader25 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        undertowEmbeddedServletContainerFactory17.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 10);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray31 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory30.addBuilderCustomizers(undertowBuilderCustomizerArray31);
        undertowEmbeddedServletContainerFactory17.addBuilderCustomizers(undertowBuilderCustomizerArray31);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress36 = null;
        undertowEmbeddedServletContainerFactory35.setAddress(inetAddress36);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory35.setSessionStoreDir(file38);
        undertowEmbeddedServletContainerFactory35.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray42 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory35.addBuilderCustomizers(undertowBuilderCustomizerArray42);
        undertowEmbeddedServletContainerFactory17.addBuilderCustomizers(undertowBuilderCustomizerArray42);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray42);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        org.xnio.XnioWorker xnioWorker50 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1800 + "'", int21 == 1800);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(resourceLoader25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray42);
        org.junit.Assert.assertNotNull(xnioWorker50);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory32.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet35 = null;
        undertowEmbeddedServletContainerFactory32.setJspServlet(jspServlet35);
        java.net.InetAddress inetAddress37 = undertowEmbeddedServletContainerFactory32.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file45);
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory40.getEmbeddedServletContainer(servletContextInitializerArray49);
        initializer38.initializers = servletContextInitializerArray49;
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory32.createDeploymentManager(servletContextInitializerArray49);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray53 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        java.util.LinkedHashSet<org.springframework.boot.context.embedded.ErrorPage> errorPageSet54 = new java.util.LinkedHashSet<org.springframework.boot.context.embedded.ErrorPage>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.ErrorPage>) errorPageSet54, errorPageArray53);
        undertowEmbeddedServletContainerFactory32.setErrorPages((java.util.Set<org.springframework.boot.context.embedded.ErrorPage>) errorPageSet54);
        undertowEmbeddedServletContainerFactory1.setErrorPages((java.util.Set<org.springframework.boot.context.embedded.ErrorPage>) errorPageSet54);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(xnioWorker14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNull(inetAddress37);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNotNull(deploymentManager52);
        org.junit.Assert.assertNotNull(errorPageArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.Compression compression4 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression4);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        java.lang.String str2 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "hi!";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.io.File file16 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 0);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection19 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection19);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo13);
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory8.setAddress(inetAddress15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory8.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory8.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory20.setPersistSession(false);
        io.undertow.Undertow.Builder builder24 = undertowEmbeddedServletContainerFactory20.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer27 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder24, deploymentManager25, (int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory29.setCompression(compression31);
        int int33 = undertowEmbeddedServletContainerFactory29.getSessionTimeout();
        undertowEmbeddedServletContainerFactory29.buffersPerRegion = 100;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory29.setDocumentRoot(file36);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory39.setDocumentRoot(file42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory39.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection47 = undertowEmbeddedServletContainerFactory46.getBuilderCustomizers();
        java.lang.Integer int48 = undertowEmbeddedServletContainerFactory46.workerThreads;
        undertowEmbeddedServletContainerFactory46.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory46.setAccessLogDirectory(file51);
        undertowEmbeddedServletContainerFactory46.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray55 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer56 = undertowEmbeddedServletContainerFactory46.getEmbeddedServletContainer(servletContextInitializerArray55);
        undertowEmbeddedServletContainerFactory39.addInitializers(servletContextInitializerArray55);
        io.undertow.servlet.api.DeploymentManager deploymentManager58 = undertowEmbeddedServletContainerFactory29.createDeploymentManager(servletContextInitializerArray55);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer60 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder24, deploymentManager58, (int) (byte) 10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection61 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.io.File file62 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file62);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(mimeMappings18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer27);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1800 + "'", int33 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(servletContextInitializerArray55);
        org.junit.Assert.assertNotNull(embeddedServletContainer56);
        org.junit.Assert.assertNotNull(deploymentManager58);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer60);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection61);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "";
        java.lang.String str7 = jarResourceManager0.jarPath;
        boolean boolean8 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory11.setAccessLogDirectory(file16);
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer21 = undertowEmbeddedServletContainerFactory11.getEmbeddedServletContainer(servletContextInitializerArray20);
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray20);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1;
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress25);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(embeddedServletContainer21);
        org.junit.Assert.assertNotNull(deploymentManager22);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        int int7 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression8 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression8);
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader12;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1800 + "'", int7 == 1800);
        org.junit.Assert.assertNotNull(mimeMappings14);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        undertowEmbeddedServletContainerFactory14.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory14.setAccessLogDirectory(file19);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo21);
        org.springframework.boot.context.embedded.Ssl ssl23 = undertowEmbeddedServletContainerFactory14.getSsl();
        undertowEmbeddedServletContainerFactory14.setAccessLogPattern("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray29 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray29);
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression31);
        io.undertow.server.handlers.resource.ResourceManager resourceManager33 = undertowEmbeddedServletContainerFactory27.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.Compression compression34 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression34);
        org.springframework.boot.context.embedded.Ssl ssl36 = null;
        undertowEmbeddedServletContainerFactory27.setSsl(ssl36);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory39.ioThreads;
        java.lang.String str41 = undertowEmbeddedServletContainerFactory39.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager42 = undertowEmbeddedServletContainerFactory39.getDocumentRootResourceManager();
        boolean boolean43 = undertowEmbeddedServletContainerFactory39.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory39.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory39.setAccessLogPattern("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory49.getBuilderCustomizers();
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file54);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo56 = null;
        undertowEmbeddedServletContainerFactory49.configureErrorPages(deploymentInfo56);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer58 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray59 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer58 };
        undertowEmbeddedServletContainerFactory49.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray59);
        undertowEmbeddedServletContainerFactory39.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray59);
        undertowEmbeddedServletContainerFactory27.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray59);
        undertowEmbeddedServletContainerFactory14.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray59);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray59);
        java.lang.String str65 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.net.InetAddress inetAddress66 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory1.bufferSize;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(ssl23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(errorPageArray29);
        org.junit.Assert.assertNotNull(resourceManager33);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(resourceManager42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray59);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(inetAddress66);
        org.junit.Assert.assertNull(int67);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener12 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader5;
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader9;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(errorPageSet8);
        org.junit.Assert.assertNotNull(mimeMappings11);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList16 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList16);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression12);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings16 = undertowEmbeddedServletContainerFactory15.getMimeMappings();
        java.net.InetAddress inetAddress17 = undertowEmbeddedServletContainerFactory15.getAddress();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.ioThreads = 100;
        java.lang.String str21 = undertowEmbeddedServletContainerFactory15.accessLogPattern;
        org.xnio.XnioWorker xnioWorker22 = undertowEmbeddedServletContainerFactory15.createWorker();
        boolean boolean23 = undertowEmbeddedServletContainerFactory15.isAccessLogEnabled();
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression24);
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory15.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet26);
        org.springframework.boot.context.embedded.Compression compression28 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(mimeMappings16);
        org.junit.Assert.assertNull(inetAddress17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(xnioWorker22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNull(compression28);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader6);
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.Undertow.Builder builder11 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 1);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.lang.String str22 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(mimeMappings21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0.0.0.0" + "'", str22, "0.0.0.0");
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection8 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 10;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 32);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection8);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file12;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.JspServlet jspServlet17 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jspServlet17);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 10);
        undertowEmbeddedServletContainerFactory20.workerThreads = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory24.buffersPerRegion = 100;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory24.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory24.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str31 = undertowEmbeddedServletContainerFactory24.getListenAddress();
        java.lang.Boolean boolean32 = undertowEmbeddedServletContainerFactory24.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl33 = null;
        undertowEmbeddedServletContainerFactory24.setSsl(ssl33);
        undertowEmbeddedServletContainerFactory24.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setUseForwardHeaders(false);
        java.lang.String str47 = undertowEmbeddedServletContainerFactory42.getDisplayName();
        undertowEmbeddedServletContainerFactory42.setBufferSize((java.lang.Integer) 1);
        boolean boolean50 = undertowEmbeddedServletContainerFactory42.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setUseForwardHeaders(false);
        java.lang.String str57 = undertowEmbeddedServletContainerFactory52.getDisplayName();
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 1);
        boolean boolean60 = undertowEmbeddedServletContainerFactory52.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection63 = undertowEmbeddedServletContainerFactory62.getBuilderCustomizers();
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory62.workerThreads;
        undertowEmbeddedServletContainerFactory62.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray67 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory62.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        undertowEmbeddedServletContainerFactory52.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        undertowEmbeddedServletContainerFactory42.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        undertowEmbeddedServletContainerFactory39.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        undertowEmbeddedServletContainerFactory20.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray67);
        boolean boolean75 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.io.File file76 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ssl12);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0.0.0.0" + "'", str31, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean32 + "' != '" + true + "'", boolean32, true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection63);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(file76);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader3 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        int int9 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0.0.0.0" + "'", str10, "0.0.0.0");
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) -1);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.lang.Boolean boolean4 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file5;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression7);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file17);
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getEmbeddedServletContainer(servletContextInitializerArray21);
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory12.setResourceLoader(resourceLoader23);
        org.springframework.boot.context.embedded.Ssl ssl25 = null;
        undertowEmbeddedServletContainerFactory12.setSsl(ssl25);
        boolean boolean27 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory12.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress33 = null;
        undertowEmbeddedServletContainerFactory32.setAddress(inetAddress33);
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory32.setSessionStoreDir(file35);
        undertowEmbeddedServletContainerFactory32.bufferSize = 1800;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList39 = undertowEmbeddedServletContainerFactory32.deploymentInfoCustomizers;
        boolean boolean40 = undertowEmbeddedServletContainerFactory32.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory42.ioThreads;
        org.springframework.boot.context.embedded.Compression compression44 = null;
        undertowEmbeddedServletContainerFactory42.setCompression(compression44);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection46 = undertowEmbeddedServletContainerFactory42.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        undertowEmbeddedServletContainerFactory42.configureErrorPages(deploymentInfo47);
        java.net.InetAddress inetAddress49 = null;
        undertowEmbeddedServletContainerFactory42.setAddress(inetAddress49);
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory42.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings52 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory54.setPersistSession(false);
        io.undertow.Undertow.Builder builder58 = undertowEmbeddedServletContainerFactory54.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager59 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer61 = undertowEmbeddedServletContainerFactory42.getUndertowEmbeddedServletContainer(builder58, deploymentManager59, (int) '4');
        undertowEmbeddedServletContainerFactory42.buffersPerRegion = 1800;
        undertowEmbeddedServletContainerFactory42.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int68 = undertowEmbeddedServletContainerFactory67.ioThreads;
        org.springframework.boot.context.embedded.Compression compression69 = null;
        undertowEmbeddedServletContainerFactory67.setCompression(compression69);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection71 = undertowEmbeddedServletContainerFactory67.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo72 = null;
        undertowEmbeddedServletContainerFactory67.configureErrorPages(deploymentInfo72);
        java.net.InetAddress inetAddress74 = null;
        undertowEmbeddedServletContainerFactory67.setAddress(inetAddress74);
        org.springframework.boot.context.embedded.ErrorPage errorPage76 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray77 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage76 };
        undertowEmbeddedServletContainerFactory67.addErrorPages(errorPageArray77);
        undertowEmbeddedServletContainerFactory42.addErrorPages(errorPageArray77);
        undertowEmbeddedServletContainerFactory32.addErrorPages(errorPageArray77);
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray77);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray77);
        org.springframework.boot.context.embedded.ErrorPage errorPage83 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage84 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(boolean4);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        org.junit.Assert.assertNotNull(embeddedServletContainer22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection46);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(mimeMappings52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer61);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection71);
        org.junit.Assert.assertNotNull(errorPageArray77);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection4 = undertowEmbeddedServletContainerFactory3.getBuilderCustomizers();
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory3.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet6 = undertowEmbeddedServletContainerFactory3.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet6);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory9.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory9.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList20;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(10);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings26 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings26);
        org.springframework.boot.context.embedded.Ssl ssl28 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl28);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(jspServlet6);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
        org.junit.Assert.assertNotNull(mimeMappings26);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        boolean boolean8 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0.0.0.0" + "'", str5, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setPort(100);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.0.0.0" + "'", str12, "0.0.0.0");
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress16);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) (-1));
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray20 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader14;
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.util.concurrent.TimeUnit timeUnit19 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 1, timeUnit19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(compression13);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        io.undertow.Undertow.Builder builder6 = null;
        io.undertow.servlet.api.DeploymentManager deploymentManager7 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer9 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder6, deploymentManager7, (int) (short) -1);
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression10);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file20);
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray24 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer25 = undertowEmbeddedServletContainerFactory15.getEmbeddedServletContainer(servletContextInitializerArray24);
        org.springframework.core.io.ResourceLoader resourceLoader26 = null;
        undertowEmbeddedServletContainerFactory15.setResourceLoader(resourceLoader26);
        undertowEmbeddedServletContainerFactory15.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer30 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray31 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer30 };
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray31);
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file33;
        undertowEmbeddedServletContainerFactory15.setSessionTimeout((int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress39 = null;
        undertowEmbeddedServletContainerFactory38.setAddress(inetAddress39);
        undertowEmbeddedServletContainerFactory38.setWorkerThreads((java.lang.Integer) 1);
        boolean boolean43 = undertowEmbeddedServletContainerFactory38.isAccessLogEnabled();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory38.builderCustomizers;
        undertowEmbeddedServletContainerFactory15.builderCustomizers = undertowBuilderCustomizerList44;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList44;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(servletContextInitializerArray24);
        org.junit.Assert.assertNotNull(embeddedServletContainer25);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray31);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.xnio.XnioWorker xnioWorker7 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory1.getSsl();
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(xnioWorker7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(ssl12);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file17);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo19);
        undertowEmbeddedServletContainerFactory12.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory12.setWorkerThreads((java.lang.Integer) 1800);
        boolean boolean25 = undertowEmbeddedServletContainerFactory12.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray29 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray29);
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression31);
        boolean boolean33 = undertowEmbeddedServletContainerFactory27.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        undertowEmbeddedServletContainerFactory27.configureErrorPages(deploymentInfo34);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection39 = undertowEmbeddedServletContainerFactory38.getBuilderCustomizers();
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory38.workerThreads;
        undertowEmbeddedServletContainerFactory38.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file43 = null;
        undertowEmbeddedServletContainerFactory38.setAccessLogDirectory(file43);
        undertowEmbeddedServletContainerFactory38.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer48 = undertowEmbeddedServletContainerFactory38.getEmbeddedServletContainer(servletContextInitializerArray47);
        initializer36.initializers = servletContextInitializerArray47;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray47);
        io.undertow.servlet.api.DeploymentManager deploymentManager51 = undertowEmbeddedServletContainerFactory12.createDeploymentManager(servletContextInitializerArray47);
        io.undertow.Undertow.Builder builder53 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (byte) -1);
        org.springframework.boot.context.embedded.Ssl ssl54 = null;
        undertowEmbeddedServletContainerFactory12.setSsl(ssl54);
        java.io.File file56 = undertowEmbeddedServletContainerFactory12.getSessionStoreDir();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings57 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList58 = undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(errorPageArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        org.junit.Assert.assertNotNull(embeddedServletContainer48);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNotNull(deploymentManager51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(file56);
        org.junit.Assert.assertNotNull(mimeMappings57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList58);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader5;
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) '#');
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(ssl7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.0.0.0" + "'", str12, "0.0.0.0");
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        java.lang.String str7 = jarResourceManager0.jarPath;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory13.setCompression(compression15);
        int int17 = undertowEmbeddedServletContainerFactory13.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory13.createWorker();
        java.lang.String str19 = undertowEmbeddedServletContainerFactory13.getDisplayName();
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) (-1));
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList22 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList22;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        boolean boolean26 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        org.springframework.boot.context.embedded.Ssl ssl29 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl29);
        java.lang.String str31 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1800 + "'", int17 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader13);
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageSet6);
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        io.undertow.server.HttpHandler httpHandler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler13 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNull(ssl7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader19);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection25 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection25);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        java.lang.String str9 = jarResourceManager0.jarPath;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource11 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory10.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet13);
        org.springframework.boot.context.embedded.Ssl ssl15 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory17.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo22 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo22);
        java.net.InetAddress inetAddress24 = null;
        undertowEmbeddedServletContainerFactory17.setAddress(inetAddress24);
        java.io.File file26 = undertowEmbeddedServletContainerFactory17.getDocumentRoot();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory17.createBuilder((int) (short) 100);
        boolean boolean29 = undertowEmbeddedServletContainerFactory17.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        undertowEmbeddedServletContainerFactory31.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory31.setAccessLogDirectory(file36);
        undertowEmbeddedServletContainerFactory31.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer41 = undertowEmbeddedServletContainerFactory31.getEmbeddedServletContainer(servletContextInitializerArray40);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer42 = undertowEmbeddedServletContainerFactory17.getEmbeddedServletContainer(servletContextInitializerArray40);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory44.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet47 = null;
        undertowEmbeddedServletContainerFactory44.setJspServlet(jspServlet47);
        java.io.File file49 = undertowEmbeddedServletContainerFactory44.getDocumentRoot();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory44.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress59);
        org.springframework.boot.context.embedded.ErrorPage errorPage61 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray62 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage61 };
        undertowEmbeddedServletContainerFactory52.addErrorPages(errorPageArray62);
        org.springframework.core.io.ResourceLoader resourceLoader64 = null;
        undertowEmbeddedServletContainerFactory52.resourceLoader = resourceLoader64;
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory52.setDocumentRoot(file66);
        org.springframework.core.io.ResourceLoader resourceLoader68 = null;
        undertowEmbeddedServletContainerFactory52.resourceLoader = resourceLoader68;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer72 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap71);
        java.util.Map<java.lang.String, java.lang.String> strMap73 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer74 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap73);
        java.util.Map<java.lang.String, java.lang.String> strMap75 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer76 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap75);
        java.util.Map<java.lang.String, java.lang.String> strMap77 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer78 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap77);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray79 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer72, initParameterConfiguringServletContextInitializer74, initParameterConfiguringServletContextInitializer76, initParameterConfiguringServletContextInitializer78 };
        initializer70.initializers = servletContextInitializerArray79;
        undertowEmbeddedServletContainerFactory52.addInitializers(servletContextInitializerArray79);
        undertowEmbeddedServletContainerFactory44.addInitializers(servletContextInitializerArray79);
        java.lang.Boolean boolean83 = undertowEmbeddedServletContainerFactory44.directBuffers;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray84 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory44.addErrorPages(errorPageArray84);
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray84);
        undertowEmbeddedServletContainerFactory17.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray89 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray89);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray89);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray92 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNull(ssl15);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        org.junit.Assert.assertNull(file26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
        org.junit.Assert.assertNotNull(embeddedServletContainer41);
        org.junit.Assert.assertNotNull(embeddedServletContainer42);
        org.junit.Assert.assertNull(file49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNotNull(errorPageArray62);
        org.junit.Assert.assertNotNull(servletContextInitializerArray79);
        org.junit.Assert.assertNull(boolean83);
        org.junit.Assert.assertNotNull(errorPageArray84);
        org.junit.Assert.assertNotNull(errorPageArray89);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(resourceManager10);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory11.setAccessLogDirectory(file16);
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer21 = undertowEmbeddedServletContainerFactory11.getEmbeddedServletContainer(servletContextInitializerArray20);
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory11.setResourceLoader(resourceLoader22);
        org.springframework.boot.context.embedded.Ssl ssl24 = null;
        undertowEmbeddedServletContainerFactory11.setSsl(ssl24);
        undertowEmbeddedServletContainerFactory11.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1800);
        boolean boolean31 = undertowEmbeddedServletContainerFactory30.useForwardHeaders;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory30.getMimeMappings();
        undertowEmbeddedServletContainerFactory11.setMimeMappings(mimeMappings32);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings32);
        org.springframework.boot.context.embedded.Compression compression35 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression35);
        java.io.File file37 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(embeddedServletContainer21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mimeMappings32);
        org.junit.Assert.assertNull(file37);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 100);
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.net.InetAddress inetAddress11 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress11);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.JspServlet jspServlet53 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        boolean boolean54 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        boolean boolean55 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNotNull(jspServlet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(10);
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.accessLogEnabled;
        io.undertow.Undertow.Builder builder24 = undertowEmbeddedServletContainerFactory21.createBuilder((-1));
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl18, (int) (short) 10, builder24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo47);
        java.lang.String str49 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory51.ioThreads;
        org.springframework.boot.context.embedded.Compression compression53 = null;
        undertowEmbeddedServletContainerFactory51.setCompression(compression53);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection55 = undertowEmbeddedServletContainerFactory51.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo56 = null;
        undertowEmbeddedServletContainerFactory51.configureErrorPages(deploymentInfo56);
        java.net.InetAddress inetAddress58 = null;
        undertowEmbeddedServletContainerFactory51.setAddress(inetAddress58);
        io.undertow.server.handlers.resource.ResourceManager resourceManager60 = undertowEmbeddedServletContainerFactory51.getDocumentRootResourceManager();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory51.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory63.setPersistSession(false);
        undertowEmbeddedServletContainerFactory63.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList68 = undertowEmbeddedServletContainerFactory63.builderCustomizers;
        undertowEmbeddedServletContainerFactory51.builderCustomizers = undertowBuilderCustomizerList68;
        java.lang.String str70 = undertowEmbeddedServletContainerFactory51.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer71 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap72 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer73 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap72);
        java.util.Map<java.lang.String, java.lang.String> strMap74 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer75 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap74);
        java.util.Map<java.lang.String, java.lang.String> strMap76 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer77 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap76);
        java.util.Map<java.lang.String, java.lang.String> strMap78 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer79 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap78);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray80 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer73, initParameterConfiguringServletContextInitializer75, initParameterConfiguringServletContextInitializer77, initParameterConfiguringServletContextInitializer79 };
        initializer71.initializers = servletContextInitializerArray80;
        undertowEmbeddedServletContainerFactory51.addInitializers(servletContextInitializerArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer83 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection55);
        org.junit.Assert.assertNotNull(resourceManager60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(servletContextInitializerArray80);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1800);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 1;
        org.springframework.boot.context.embedded.Ssl ssl5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode6 = undertowEmbeddedServletContainerFactory2.getSslClientAuthMode(ssl5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.ClassLoader classLoader7 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList9 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList9;
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection19 = undertowEmbeddedServletContainerFactory15.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo20 = null;
        undertowEmbeddedServletContainerFactory15.configureErrorPages(deploymentInfo20);
        java.net.InetAddress inetAddress22 = null;
        undertowEmbeddedServletContainerFactory15.setAddress(inetAddress22);
        org.springframework.boot.context.embedded.ErrorPage errorPage24 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray25 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage24 };
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray25);
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader27;
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory15.setDocumentRoot(file29);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader31;
        org.springframework.boot.context.embedded.Ssl ssl33 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory35.setPersistSession(false);
        io.undertow.Undertow.Builder builder39 = undertowEmbeddedServletContainerFactory35.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory35.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory43.ioThreads;
        org.springframework.boot.context.embedded.Compression compression45 = null;
        undertowEmbeddedServletContainerFactory43.setCompression(compression45);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection47 = undertowEmbeddedServletContainerFactory43.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo48 = null;
        undertowEmbeddedServletContainerFactory43.configureErrorPages(deploymentInfo48);
        java.net.InetAddress inetAddress50 = null;
        undertowEmbeddedServletContainerFactory43.setAddress(inetAddress50);
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory43.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings53 = undertowEmbeddedServletContainerFactory43.getMimeMappings();
        undertowEmbeddedServletContainerFactory35.setMimeMappings(mimeMappings53);
        undertowEmbeddedServletContainerFactory15.setMimeMappings(mimeMappings53);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNull(resourceLoader8);
        org.junit.Assert.assertNotNull(xnioWorker11);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection19);
        org.junit.Assert.assertNotNull(errorPageArray25);
        org.junit.Assert.assertNull(ssl33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection47);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(mimeMappings53);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Class<?> wildcardClass12 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.core.io.ResourceLoader resourceLoader16 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader16;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(xnioWorker14);
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.springframework.boot.context.embedded.JspServlet jspServlet6 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet6);
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(jspServlet8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.0.0.0" + "'", str11, "0.0.0.0");
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 10);
        java.io.File file2 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file2);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file15);
        java.lang.String str17 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNotNull(resourceManager12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        io.undertow.Undertow.Builder builder6 = null;
        io.undertow.servlet.api.DeploymentManager deploymentManager7 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer9 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder6, deploymentManager7, (int) (short) -1);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 97);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory6.getBuilderCustomizers();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory6.workerThreads;
        undertowEmbeddedServletContainerFactory6.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory6.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray15);
        initializer4.initializers = servletContextInitializerArray15;
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray15);
        io.undertow.server.handlers.resource.ResourceManager resourceManager19 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.String str20 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file21;
        boolean boolean23 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setUseForwardHeaders(false);
        java.lang.String str30 = undertowEmbeddedServletContainerFactory25.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection33 = undertowEmbeddedServletContainerFactory32.getBuilderCustomizers();
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory32.workerThreads;
        undertowEmbeddedServletContainerFactory32.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory32.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file45);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo47);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer49 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray50 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer49 };
        undertowEmbeddedServletContainerFactory40.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray50);
        undertowEmbeddedServletContainerFactory32.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray50);
        undertowEmbeddedServletContainerFactory25.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray50);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray50);
        java.lang.String str55 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(servletContextInitializerArray15);
        org.junit.Assert.assertNotNull(embeddedServletContainer16);
        org.junit.Assert.assertNotNull(deploymentManager18);
        org.junit.Assert.assertNotNull(resourceManager19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        boolean boolean7 = jarResourceManager0.isResourceChangeListenerSupported();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo3 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo3);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory9.setPersistSession(false);
        undertowEmbeddedServletContainerFactory9.setIoThreads((java.lang.Integer) (-1));
        java.io.File file14 = undertowEmbeddedServletContainerFactory9.getDocumentRoot();
        boolean boolean15 = undertowEmbeddedServletContainerFactory9.isAccessLogEnabled();
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory9.accessLogDirectory = file16;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory9.builderCustomizers;
        int int19 = undertowEmbeddedServletContainerFactory9.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        undertowEmbeddedServletContainerFactory21.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList26 = undertowEmbeddedServletContainerFactory21.builderCustomizers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings27 = undertowEmbeddedServletContainerFactory21.getMimeMappings();
        undertowEmbeddedServletContainerFactory9.setMimeMappings(mimeMappings27);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings27);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file34;
        boolean boolean36 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(file14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList26);
        org.junit.Assert.assertNotNull(mimeMappings27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        org.junit.Assert.assertNull(ssl8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 1);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: [Assertion failed] - this argument is required; it must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNotNull(resourceManager12);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.Compression compression23 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression23);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory8.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet11);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setUseForwardHeaders(false);
        java.lang.String str21 = undertowEmbeddedServletContainerFactory16.getDisplayName();
        undertowEmbeddedServletContainerFactory16.setBufferSize((java.lang.Integer) 1);
        boolean boolean24 = undertowEmbeddedServletContainerFactory16.isRegisterDefaultServlet();
        java.lang.Boolean boolean25 = undertowEmbeddedServletContainerFactory16.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        java.lang.String str29 = undertowEmbeddedServletContainerFactory27.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager30 = undertowEmbeddedServletContainerFactory27.getDocumentRootResourceManager();
        boolean boolean31 = undertowEmbeddedServletContainerFactory27.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        undertowEmbeddedServletContainerFactory27.configureErrorPages(deploymentInfo32);
        undertowEmbeddedServletContainerFactory27.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory37.ioThreads;
        java.lang.String str39 = undertowEmbeddedServletContainerFactory37.accessLogPattern;
        undertowEmbeddedServletContainerFactory37.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory43.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray45 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory43.addErrorPages(errorPageArray45);
        undertowEmbeddedServletContainerFactory37.addErrorPages(errorPageArray45);
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray45);
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory51.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet54 = null;
        undertowEmbeddedServletContainerFactory51.setJspServlet(jspServlet54);
        org.springframework.core.io.ResourceLoader resourceLoader56 = null;
        undertowEmbeddedServletContainerFactory51.resourceLoader = resourceLoader56;
        int int58 = undertowEmbeddedServletContainerFactory51.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer61 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap60);
        java.util.Map<java.lang.String, java.lang.String> strMap62 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer63 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer65 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer67 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap66);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray68 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer61, initParameterConfiguringServletContextInitializer63, initParameterConfiguringServletContextInitializer65, initParameterConfiguringServletContextInitializer67 };
        initializer59.initializers = servletContextInitializerArray68;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = initializer59.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory72 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection73 = undertowEmbeddedServletContainerFactory72.getBuilderCustomizers();
        java.lang.Integer int74 = undertowEmbeddedServletContainerFactory72.workerThreads;
        undertowEmbeddedServletContainerFactory72.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file77 = null;
        undertowEmbeddedServletContainerFactory72.setAccessLogDirectory(file77);
        undertowEmbeddedServletContainerFactory72.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray81 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer82 = undertowEmbeddedServletContainerFactory72.getEmbeddedServletContainer(servletContextInitializerArray81);
        initializer59.initializers = servletContextInitializerArray81;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer84 = undertowEmbeddedServletContainerFactory51.getEmbeddedServletContainer(servletContextInitializerArray81);
        undertowEmbeddedServletContainerFactory16.addInitializers(servletContextInitializerArray81);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer86 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray81);
        boolean boolean87 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        java.lang.String str88 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Integer int89 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(boolean25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(resourceManager30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(errorPageArray45);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray68);
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNotNull(servletContextInitializerArray81);
        org.junit.Assert.assertNotNull(embeddedServletContainer82);
        org.junit.Assert.assertNotNull(embeddedServletContainer84);
        org.junit.Assert.assertNotNull(embeddedServletContainer86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(int89);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        int int16 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1800 + "'", int16 == 1800);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 0);
        undertowEmbeddedServletContainerFactory14.setIoThreads((java.lang.Integer) 100);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory14.setAddress(inetAddress17);
        org.springframework.boot.context.embedded.Compression compression19 = undertowEmbeddedServletContainerFactory14.getCompression();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = undertowEmbeddedServletContainerFactory14.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo27);
        java.net.InetAddress inetAddress29 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress29);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory22.workerThreads;
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file32);
        boolean boolean34 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl35 = undertowEmbeddedServletContainerFactory22.getSsl();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        undertowEmbeddedServletContainerFactory14.setMimeMappings(mimeMappings37);
        org.springframework.boot.context.embedded.Ssl ssl39 = undertowEmbeddedServletContainerFactory14.getSsl();
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory14.setDocumentRoot(file40);
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory14.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory45.ioThreads;
        java.lang.String str47 = undertowEmbeddedServletContainerFactory45.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl48 = null;
        undertowEmbeddedServletContainerFactory45.setSsl(ssl48);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader54 = null;
        undertowEmbeddedServletContainerFactory51.resourceLoader = resourceLoader54;
        org.springframework.core.io.ResourceLoader resourceLoader56 = undertowEmbeddedServletContainerFactory51.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader57 = null;
        undertowEmbeddedServletContainerFactory51.resourceLoader = resourceLoader57;
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory51.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection62 = undertowEmbeddedServletContainerFactory61.getBuilderCustomizers();
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory61.workerThreads;
        undertowEmbeddedServletContainerFactory61.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory61.setAccessLogDirectory(file66);
        undertowEmbeddedServletContainerFactory61.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer71 = undertowEmbeddedServletContainerFactory61.getEmbeddedServletContainer(servletContextInitializerArray70);
        io.undertow.servlet.api.DeploymentManager deploymentManager72 = undertowEmbeddedServletContainerFactory51.createDeploymentManager(servletContextInitializerArray70);
        io.undertow.servlet.api.DeploymentManager deploymentManager73 = undertowEmbeddedServletContainerFactory45.createDeploymentManager(servletContextInitializerArray70);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer75 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder43, deploymentManager73, 52);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(compression19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(ssl35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNotNull(mimeMappings37);
        org.junit.Assert.assertNull(ssl39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(resourceLoader56);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection62);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        org.junit.Assert.assertNotNull(embeddedServletContainer71);
        org.junit.Assert.assertNotNull(deploymentManager72);
        org.junit.Assert.assertNotNull(deploymentManager73);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer75);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1800);
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        int int26 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) '#');
        java.lang.String str29 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings30 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        boolean boolean31 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        int int32 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1800 + "'", int26 == 1800);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0.0.0.0" + "'", str29, "0.0.0.0");
        org.junit.Assert.assertNotNull(mimeMappings30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file19 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0.0.0.0" + "'", str16, "0.0.0.0");
        org.junit.Assert.assertNull(file19);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file13);
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        java.lang.Boolean boolean40 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNull(boolean40);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings5 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(mimeMappings5);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        java.lang.String str20 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray30);
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file33);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 0);
        boolean boolean39 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(int40);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.springframework.boot.context.embedded.Ssl ssl12 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl12);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mimeMappings14);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        org.xnio.XnioWorker xnioWorker35 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertNotNull(xnioWorker35);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap1 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer2 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer4 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer6 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer8 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap7);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray9 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer2, initParameterConfiguringServletContextInitializer4, initParameterConfiguringServletContextInitializer6, initParameterConfiguringServletContextInitializer8 };
        initializer0.initializers = servletContextInitializerArray9;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray12 = initializer0.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory14.setDisplayName("hi!");
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.setAccessLogDirectory(file17);
        undertowEmbeddedServletContainerFactory14.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory22.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory26.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet29 = null;
        undertowEmbeddedServletContainerFactory26.setJspServlet(jspServlet29);
        java.net.InetAddress inetAddress31 = undertowEmbeddedServletContainerFactory26.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer32.initializers = servletContextInitializerArray43;
        io.undertow.servlet.api.DeploymentManager deploymentManager46 = undertowEmbeddedServletContainerFactory26.createDeploymentManager(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray43);
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory14.createDeploymentManager(servletContextInitializerArray43);
        initializer0.initializers = servletContextInitializerArray43;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray50 = initializer0.initializers;
        org.junit.Assert.assertNotNull(servletContextInitializerArray9);
        org.junit.Assert.assertNotNull(servletContextInitializerArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray12);
        org.junit.Assert.assertNull(inetAddress31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNotNull(deploymentManager46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(servletContextInitializerArray50);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        java.lang.String str17 = undertowEmbeddedServletContainerFactory15.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory15.setSsl(ssl18);
        int int20 = undertowEmbeddedServletContainerFactory15.getPort();
        undertowEmbeddedServletContainerFactory15.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory15.setDisplayName("");
        undertowEmbeddedServletContainerFactory15.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        org.springframework.boot.context.embedded.Compression compression32 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression32);
        boolean boolean34 = undertowEmbeddedServletContainerFactory28.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo35 = null;
        undertowEmbeddedServletContainerFactory28.configureErrorPages(deploymentInfo35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory39.setAccessLogDirectory(file44);
        undertowEmbeddedServletContainerFactory39.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer49 = undertowEmbeddedServletContainerFactory39.getEmbeddedServletContainer(servletContextInitializerArray48);
        initializer37.initializers = servletContextInitializerArray48;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer51 = undertowEmbeddedServletContainerFactory28.getEmbeddedServletContainer(servletContextInitializerArray48);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory53.ioThreads;
        java.lang.String str55 = undertowEmbeddedServletContainerFactory53.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager56 = undertowEmbeddedServletContainerFactory53.getDocumentRootResourceManager();
        boolean boolean57 = undertowEmbeddedServletContainerFactory53.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo58 = null;
        undertowEmbeddedServletContainerFactory53.configureErrorPages(deploymentInfo58);
        undertowEmbeddedServletContainerFactory53.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        java.lang.String str65 = undertowEmbeddedServletContainerFactory63.accessLogPattern;
        undertowEmbeddedServletContainerFactory63.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory69 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int70 = undertowEmbeddedServletContainerFactory69.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray71 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory69.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory63.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory53.addErrorPages(errorPageArray71);
        java.lang.String str75 = undertowEmbeddedServletContainerFactory53.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory77 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory77.ioThreads;
        org.springframework.boot.context.embedded.Compression compression79 = null;
        undertowEmbeddedServletContainerFactory77.setCompression(compression79);
        int int81 = undertowEmbeddedServletContainerFactory77.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker82 = undertowEmbeddedServletContainerFactory77.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList83 = undertowEmbeddedServletContainerFactory77.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory53.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList83;
        undertowEmbeddedServletContainerFactory28.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList83;
        undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList83;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList83;
        boolean boolean88 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.net.InetAddress inetAddress89 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNotNull(mimeMappings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        org.junit.Assert.assertNotNull(embeddedServletContainer49);
        org.junit.Assert.assertNotNull(embeddedServletContainer51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(resourceManager56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(errorPageArray71);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1800 + "'", int81 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker82);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(inetAddress89);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        java.net.InetAddress inetAddress22 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings23 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray24 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(inetAddress22);
        org.junit.Assert.assertNotNull(mimeMappings23);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNull(ssl7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(xnioWorker14);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertEquals("'" + boolean10 + "' != '" + true + "'", boolean10, true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo13);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression16);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory24.setCompression(compression26);
        int int28 = undertowEmbeddedServletContainerFactory24.getSessionTimeout();
        undertowEmbeddedServletContainerFactory24.buffersPerRegion = 100;
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer32 };
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file37);
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader39);
        org.springframework.core.io.ResourceLoader resourceLoader41 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader41;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1800 + "'", int28 == 1800);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 100, timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Compression compression4 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory6.setJspServlet(jspServlet9);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory6.resourceLoader = resourceLoader11;
        int int13 = undertowEmbeddedServletContainerFactory6.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        initializer14.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = initializer14.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer14.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        int int41 = undertowEmbeddedServletContainerFactory1.getPort();
        org.xnio.XnioWorker xnioWorker42 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory46.ioThreads;
        java.lang.String str48 = undertowEmbeddedServletContainerFactory46.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager49 = undertowEmbeddedServletContainerFactory46.getDocumentRootResourceManager();
        boolean boolean50 = undertowEmbeddedServletContainerFactory46.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo51 = null;
        undertowEmbeddedServletContainerFactory46.configureErrorPages(deploymentInfo51);
        undertowEmbeddedServletContainerFactory46.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory56.ioThreads;
        org.xnio.XnioWorker xnioWorker58 = undertowEmbeddedServletContainerFactory56.createWorker();
        undertowEmbeddedServletContainerFactory56.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection63 = undertowEmbeddedServletContainerFactory62.getBuilderCustomizers();
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory62.workerThreads;
        undertowEmbeddedServletContainerFactory62.setUseForwardHeaders(false);
        java.lang.String str67 = undertowEmbeddedServletContainerFactory62.getDisplayName();
        boolean boolean68 = undertowEmbeddedServletContainerFactory62.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet69 = undertowEmbeddedServletContainerFactory62.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory71 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int72 = undertowEmbeddedServletContainerFactory71.ioThreads;
        java.lang.String str73 = undertowEmbeddedServletContainerFactory71.accessLogPattern;
        undertowEmbeddedServletContainerFactory71.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray76 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList77 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList77, undertowBuilderCustomizerArray76);
        undertowEmbeddedServletContainerFactory71.builderCustomizers = undertowBuilderCustomizerList77;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory81 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection82 = undertowEmbeddedServletContainerFactory81.getBuilderCustomizers();
        java.lang.Integer int83 = undertowEmbeddedServletContainerFactory81.workerThreads;
        undertowEmbeddedServletContainerFactory81.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray86 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory81.addBuilderCustomizers(undertowBuilderCustomizerArray86);
        undertowEmbeddedServletContainerFactory71.addBuilderCustomizers(undertowBuilderCustomizerArray86);
        undertowEmbeddedServletContainerFactory62.addBuilderCustomizers(undertowBuilderCustomizerArray86);
        undertowEmbeddedServletContainerFactory56.addBuilderCustomizers(undertowBuilderCustomizerArray86);
        undertowEmbeddedServletContainerFactory46.addBuilderCustomizers(undertowBuilderCustomizerArray86);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray86);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        io.undertow.server.HttpHandler httpHandler95 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler96 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(compression4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(xnioWorker42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(resourceManager49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(xnioWorker58);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection63);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(errorPageSet69);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection82);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray86);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file47);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo49 = null;
        undertowEmbeddedServletContainerFactory42.configureErrorPages(deploymentInfo49);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress53 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress53);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file55);
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory52.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList58 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory42.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file61);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.lang.String str65 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.core.io.ResourceLoader resourceLoader66 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader66);
        java.io.File file68 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList58);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(file68);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray13 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file9);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.JspServlet jspServlet12 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file15;
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.0.0.0" + "'", str11, "0.0.0.0");
        org.junit.Assert.assertNull(jspServlet12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mimeMappings14);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer21 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer21, initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27 };
        initializer19.initializers = servletContextInitializerArray28;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.String str36 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.Ssl ssl37 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression38);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0.0.0.0" + "'", str36, "0.0.0.0");
        org.junit.Assert.assertNull(ssl37);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        int int11 = undertowEmbeddedServletContainerFactory1.getPort();
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        org.springframework.boot.context.embedded.Ssl ssl15 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl15);
        org.springframework.boot.context.embedded.Ssl ssl17 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(ssl17);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray12 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        org.junit.Assert.assertNotNull(mimeMappings11);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        int int18 = undertowEmbeddedServletContainerFactory14.getSessionTimeout();
        undertowEmbeddedServletContainerFactory14.buffersPerRegion = 100;
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory14.workerThreads;
        boolean boolean22 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory14.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory26.ioThreads;
        org.springframework.boot.context.embedded.Compression compression28 = null;
        undertowEmbeddedServletContainerFactory26.setCompression(compression28);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection30 = undertowEmbeddedServletContainerFactory26.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo31 = null;
        undertowEmbeddedServletContainerFactory26.configureErrorPages(deploymentInfo31);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList33 = undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader34 = undertowEmbeddedServletContainerFactory26.getServletClassLoader();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory26.bufferSize;
        org.springframework.boot.context.embedded.Ssl ssl36 = null;
        undertowEmbeddedServletContainerFactory26.setSsl(ssl36);
        java.lang.String str38 = undertowEmbeddedServletContainerFactory26.getListenAddress();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer39 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray40 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer39 };
        undertowEmbeddedServletContainerFactory26.addBuilderCustomizers(undertowBuilderCustomizerArray40);
        undertowEmbeddedServletContainerFactory14.addBuilderCustomizers(undertowBuilderCustomizerArray40);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray40);
        java.lang.Boolean boolean44 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1800 + "'", int18 == 1800);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0.0.0.0" + "'", str38, "0.0.0.0");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray40);
        org.junit.Assert.assertNull(boolean44);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList2;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.xnio.XnioWorker xnioWorker12 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file16 = undertowEmbeddedServletContainerFactory15.getDocumentRoot();
        io.undertow.Undertow.Builder builder18 = undertowEmbeddedServletContainerFactory15.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean21 = undertowEmbeddedServletContainerFactory20.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory20.setResourceLoader(resourceLoader22);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean26 = undertowEmbeddedServletContainerFactory25.directBuffers;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file27);
        undertowEmbeddedServletContainerFactory25.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection33 = undertowEmbeddedServletContainerFactory32.getBuilderCustomizers();
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory32.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet35 = undertowEmbeddedServletContainerFactory32.getJspServlet();
        undertowEmbeddedServletContainerFactory25.setJspServlet(jspServlet35);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader41 = null;
        undertowEmbeddedServletContainerFactory40.setResourceLoader(resourceLoader41);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection48 = undertowEmbeddedServletContainerFactory44.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo49 = null;
        undertowEmbeddedServletContainerFactory44.configureErrorPages(deploymentInfo49);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList51 = undertowEmbeddedServletContainerFactory44.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory40.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList51;
        org.springframework.boot.context.embedded.Compression compression53 = undertowEmbeddedServletContainerFactory40.getCompression();
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory40.setSessionStoreDir(file54);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo56 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo56);
        undertowEmbeddedServletContainerFactory40.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection62 = undertowEmbeddedServletContainerFactory61.getBuilderCustomizers();
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory61.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection67 = undertowEmbeddedServletContainerFactory66.getBuilderCustomizers();
        java.lang.Integer int68 = undertowEmbeddedServletContainerFactory66.workerThreads;
        undertowEmbeddedServletContainerFactory66.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file71 = null;
        undertowEmbeddedServletContainerFactory66.setAccessLogDirectory(file71);
        undertowEmbeddedServletContainerFactory66.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray75 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer76 = undertowEmbeddedServletContainerFactory66.getEmbeddedServletContainer(servletContextInitializerArray75);
        initializer64.initializers = servletContextInitializerArray75;
        io.undertow.servlet.api.DeploymentManager deploymentManager78 = undertowEmbeddedServletContainerFactory61.createDeploymentManager(servletContextInitializerArray75);
        io.undertow.servlet.api.DeploymentManager deploymentManager79 = undertowEmbeddedServletContainerFactory40.createDeploymentManager(servletContextInitializerArray75);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer81 = undertowEmbeddedServletContainerFactory20.getUndertowEmbeddedServletContainer(builder38, deploymentManager79, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer83 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder18, deploymentManager79, 10);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(xnioWorker12);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(boolean21);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(jspServlet35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection48);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList51);
        org.junit.Assert.assertNull(compression53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection62);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(servletContextInitializerArray75);
        org.junit.Assert.assertNotNull(embeddedServletContainer76);
        org.junit.Assert.assertNotNull(deploymentManager78);
        org.junit.Assert.assertNotNull(deploymentManager79);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer81);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer83);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file15);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo17);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.net.InetAddress inetAddress20 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo27);
        java.net.InetAddress inetAddress29 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress29);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory22.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory34.setPersistSession(false);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory34.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer41 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder38, deploymentManager39, (int) '4');
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file42);
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory22.buffersPerRegion;
        io.undertow.Undertow.Builder builder46 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '#');
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList51 = undertowEmbeddedServletContainerFactory22.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList51;
        java.lang.String str53 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertNull(compression14);
        org.junit.Assert.assertNotNull(mimeMappings19);
        org.junit.Assert.assertNull(inetAddress20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(mimeMappings32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer41);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.0.0.0" + "'", str53, "0.0.0.0");
        org.junit.Assert.assertNull(int54);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        int int11 = undertowEmbeddedServletContainerFactory1.getPort();
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(jspServlet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.0.0.0" + "'", str12, "0.0.0.0");
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection6 = undertowEmbeddedServletContainerFactory5.getBuilderCustomizers();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory5.workerThreads;
        undertowEmbeddedServletContainerFactory5.setUseForwardHeaders(false);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory5.getDisplayName();
        undertowEmbeddedServletContainerFactory5.setBufferSize((java.lang.Integer) 1);
        boolean boolean13 = undertowEmbeddedServletContainerFactory5.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setUseForwardHeaders(false);
        java.lang.String str20 = undertowEmbeddedServletContainerFactory15.getDisplayName();
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 1);
        boolean boolean23 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray30 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory25.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory15.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory5.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory2.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory37.ioThreads;
        org.springframework.boot.context.embedded.Compression compression39 = null;
        undertowEmbeddedServletContainerFactory37.setCompression(compression39);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection41 = undertowEmbeddedServletContainerFactory37.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo42 = null;
        undertowEmbeddedServletContainerFactory37.configureErrorPages(deploymentInfo42);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList44 = undertowEmbeddedServletContainerFactory37.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader45 = undertowEmbeddedServletContainerFactory37.getServletClassLoader();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList46 = undertowEmbeddedServletContainerFactory37.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList46;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList46);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        int int9 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0.0.0.0" + "'", str6, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int24 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory26.setResourceLoader(resourceLoader37);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory40.workerThreads;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file50);
        boolean boolean52 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        undertowEmbeddedServletContainerFactory54.setRegisterJspServlet(true);
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory54.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet61 = undertowEmbeddedServletContainerFactory54.getJspServlet();
        undertowEmbeddedServletContainerFactory40.setJspServlet(jspServlet61);
        undertowEmbeddedServletContainerFactory26.setJspServlet(jspServlet61);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet61);
        boolean boolean65 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray66 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(jspServlet61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection3 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory2.workerThreads;
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory2.setAccessLogDirectory(file7);
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer12 = undertowEmbeddedServletContainerFactory2.getEmbeddedServletContainer(servletContextInitializerArray11);
        initializer0.initializers = servletContextInitializerArray11;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = null;
        initializer0.initializers = servletContextInitializerArray14;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray17 = initializer0.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory19.setCompression(compression21);
        undertowEmbeddedServletContainerFactory19.setSessionTimeout(100);
        boolean boolean25 = undertowEmbeddedServletContainerFactory19.accessLogEnabled;
        undertowEmbeddedServletContainerFactory19.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory19.buffersPerRegion = 1;
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory19.workerThreads;
        undertowEmbeddedServletContainerFactory19.setAccessLogPattern("0.0.0.0");
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory19.ioThreads;
        undertowEmbeddedServletContainerFactory19.ioThreads = 1;
        undertowEmbeddedServletContainerFactory19.workerThreads = 32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory39.ioThreads;
        java.lang.String str41 = undertowEmbeddedServletContainerFactory39.accessLogPattern;
        undertowEmbeddedServletContainerFactory39.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory45.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray47 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory45.addErrorPages(errorPageArray47);
        undertowEmbeddedServletContainerFactory39.addErrorPages(errorPageArray47);
        org.xnio.XnioWorker xnioWorker50 = undertowEmbeddedServletContainerFactory39.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader53 = null;
        undertowEmbeddedServletContainerFactory52.setResourceLoader(resourceLoader53);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray55 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList56 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList56, undertowDeploymentInfoCustomizerArray55);
        undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList56;
        undertowEmbeddedServletContainerFactory39.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList56;
        undertowEmbeddedServletContainerFactory39.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory63.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory67.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet70 = null;
        undertowEmbeddedServletContainerFactory67.setJspServlet(jspServlet70);
        java.net.InetAddress inetAddress72 = undertowEmbeddedServletContainerFactory67.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer73 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection76 = undertowEmbeddedServletContainerFactory75.getBuilderCustomizers();
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory75.workerThreads;
        undertowEmbeddedServletContainerFactory75.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file80 = null;
        undertowEmbeddedServletContainerFactory75.setAccessLogDirectory(file80);
        undertowEmbeddedServletContainerFactory75.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray84 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer85 = undertowEmbeddedServletContainerFactory75.getEmbeddedServletContainer(servletContextInitializerArray84);
        initializer73.initializers = servletContextInitializerArray84;
        io.undertow.servlet.api.DeploymentManager deploymentManager87 = undertowEmbeddedServletContainerFactory67.createDeploymentManager(servletContextInitializerArray84);
        undertowEmbeddedServletContainerFactory63.addInitializers(servletContextInitializerArray84);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer89 = undertowEmbeddedServletContainerFactory39.getEmbeddedServletContainer(servletContextInitializerArray84);
        undertowEmbeddedServletContainerFactory19.addInitializers(servletContextInitializerArray84);
        initializer0.initializers = servletContextInitializerArray84;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(servletContextInitializerArray11);
        org.junit.Assert.assertNotNull(embeddedServletContainer12);
        org.junit.Assert.assertNull(servletContextInitializerArray16);
        org.junit.Assert.assertNull(servletContextInitializerArray17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(errorPageArray47);
        org.junit.Assert.assertNotNull(xnioWorker50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(inetAddress72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection76);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(servletContextInitializerArray84);
        org.junit.Assert.assertNotNull(embeddedServletContainer85);
        org.junit.Assert.assertNotNull(deploymentManager87);
        org.junit.Assert.assertNotNull(embeddedServletContainer89);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.JspServlet jspServlet12 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(jspServlet12);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection4 = undertowEmbeddedServletContainerFactory3.getBuilderCustomizers();
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory3.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet6 = undertowEmbeddedServletContainerFactory3.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet6);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory9.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory9.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList20;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 0);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        java.lang.ClassLoader classLoader27 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(jspServlet6);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(classLoader27);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.JspServlet jspServlet53 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader54 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.core.io.ResourceLoader resourceLoader57 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNotNull(jspServlet53);
        org.junit.Assert.assertNull(resourceLoader54);
        org.junit.Assert.assertNull(resourceLoader57);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        undertowEmbeddedServletContainerFactory10.setDirectBuffers((java.lang.Boolean) true);
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory10.resourceLoader = resourceLoader14;
        java.lang.String str16 = undertowEmbeddedServletContainerFactory10.getDisplayName();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet17 = undertowEmbeddedServletContainerFactory10.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet17);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(jspServlet4);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(errorPageSet17);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 0);
        int int21 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader22);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1800 + "'", int21 == 1800);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str5 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) -1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0.0.0.0" + "'", str5, "0.0.0.0");
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean4 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader5);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        io.undertow.server.handlers.resource.ResourceManager resourceManager9 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 10;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(resourceManager9);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        java.lang.String str4 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file16 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file17);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNull(file16);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        undertowEmbeddedServletContainerFactory11.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray20 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory18.addErrorPages(errorPageArray20);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray20);
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = undertowEmbeddedServletContainerFactory11.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        int int32 = undertowEmbeddedServletContainerFactory28.getSessionTimeout();
        undertowEmbeddedServletContainerFactory28.buffersPerRegion = 100;
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory28.setDocumentRoot(file35);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList37 = undertowEmbeddedServletContainerFactory28.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList37;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        java.lang.String str42 = undertowEmbeddedServletContainerFactory40.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager43 = undertowEmbeddedServletContainerFactory40.getDocumentRootResourceManager();
        boolean boolean44 = undertowEmbeddedServletContainerFactory40.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory40.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory40.directBuffers = false;
        java.lang.Boolean boolean49 = undertowEmbeddedServletContainerFactory40.directBuffers;
        java.net.InetAddress inetAddress50 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress50);
        io.undertow.Undertow.Builder builder53 = undertowEmbeddedServletContainerFactory40.createBuilder(0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection56 = undertowEmbeddedServletContainerFactory55.getBuilderCustomizers();
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory55.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader58 = null;
        undertowEmbeddedServletContainerFactory55.resourceLoader = resourceLoader58;
        org.springframework.core.io.ResourceLoader resourceLoader60 = undertowEmbeddedServletContainerFactory55.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader61 = null;
        undertowEmbeddedServletContainerFactory55.resourceLoader = resourceLoader61;
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory55.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection66 = undertowEmbeddedServletContainerFactory65.getBuilderCustomizers();
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory65.workerThreads;
        undertowEmbeddedServletContainerFactory65.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file70 = null;
        undertowEmbeddedServletContainerFactory65.setAccessLogDirectory(file70);
        undertowEmbeddedServletContainerFactory65.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray74 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer75 = undertowEmbeddedServletContainerFactory65.getEmbeddedServletContainer(servletContextInitializerArray74);
        io.undertow.servlet.api.DeploymentManager deploymentManager76 = undertowEmbeddedServletContainerFactory55.createDeploymentManager(servletContextInitializerArray74);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer78 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder53, deploymentManager76, (int) (byte) 0);
        boolean boolean79 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(errorPageArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList25);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1800 + "'", int32 == 1800);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList37);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(resourceManager43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + boolean49 + "' != '" + false + "'", boolean49, false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNull(resourceLoader60);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(servletContextInitializerArray74);
        org.junit.Assert.assertNotNull(embeddedServletContainer75);
        org.junit.Assert.assertNotNull(deploymentManager76);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader14;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "0.0.0.0";
        boolean boolean13 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener16 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory8.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet11);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings6 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file7;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        int int15 = undertowEmbeddedServletContainerFactory11.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker16 = undertowEmbeddedServletContainerFactory11.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory11.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        undertowEmbeddedServletContainerFactory27.setRegisterJspServlet(true);
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory27.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet34 = undertowEmbeddedServletContainerFactory27.getJspServlet();
        undertowEmbeddedServletContainerFactory21.setJspServlet(jspServlet34);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory21.setDocumentRoot(file36);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList38 = undertowEmbeddedServletContainerFactory21.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        org.springframework.boot.context.embedded.Ssl ssl41 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNotNull(mimeMappings6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1800 + "'", int15 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList17);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(jspServlet34);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList38);
        org.junit.Assert.assertNull(ssl41);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        undertowEmbeddedServletContainerFactory15.setRegisterJspServlet(true);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory15.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet22 = undertowEmbeddedServletContainerFactory15.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet22);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection31 = undertowEmbeddedServletContainerFactory27.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        undertowEmbeddedServletContainerFactory27.configureErrorPages(deploymentInfo32);
        java.net.InetAddress inetAddress34 = null;
        undertowEmbeddedServletContainerFactory27.setAddress(inetAddress34);
        org.springframework.boot.context.embedded.ErrorPage errorPage36 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray37 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage36 };
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray37);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray37);
        int int40 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.core.io.ResourceLoader resourceLoader41 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader41;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        org.springframework.core.io.ResourceLoader resourceLoader45 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader45);
        org.springframework.boot.context.embedded.Ssl ssl47 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl47);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(jspServlet22);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection31);
        org.junit.Assert.assertNotNull(errorPageArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1800 + "'", int40 == 1800);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl10);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker16 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean17 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1);
        java.lang.String str20 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0.0.0" + "'", str8, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNotNull(xnioWorker16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener4 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(10);
        undertowEmbeddedServletContainerFactory1.setPort(0);
        undertowEmbeddedServletContainerFactory1.setPort(52);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        undertowEmbeddedServletContainerFactory1.workerThreads = 32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory21.ioThreads;
        java.lang.String str23 = undertowEmbeddedServletContainerFactory21.accessLogPattern;
        undertowEmbeddedServletContainerFactory21.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray29 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray29);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray29);
        org.xnio.XnioWorker xnioWorker32 = undertowEmbeddedServletContainerFactory21.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader35 = null;
        undertowEmbeddedServletContainerFactory34.setResourceLoader(resourceLoader35);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray37 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList38 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList38, undertowDeploymentInfoCustomizerArray37);
        undertowEmbeddedServletContainerFactory34.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        undertowEmbeddedServletContainerFactory21.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        undertowEmbeddedServletContainerFactory21.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory45.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory49.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet52 = null;
        undertowEmbeddedServletContainerFactory49.setJspServlet(jspServlet52);
        java.net.InetAddress inetAddress54 = undertowEmbeddedServletContainerFactory49.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection58 = undertowEmbeddedServletContainerFactory57.getBuilderCustomizers();
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory57.workerThreads;
        undertowEmbeddedServletContainerFactory57.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file62 = null;
        undertowEmbeddedServletContainerFactory57.setAccessLogDirectory(file62);
        undertowEmbeddedServletContainerFactory57.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray66 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer67 = undertowEmbeddedServletContainerFactory57.getEmbeddedServletContainer(servletContextInitializerArray66);
        initializer55.initializers = servletContextInitializerArray66;
        io.undertow.servlet.api.DeploymentManager deploymentManager69 = undertowEmbeddedServletContainerFactory49.createDeploymentManager(servletContextInitializerArray66);
        undertowEmbeddedServletContainerFactory45.addInitializers(servletContextInitializerArray66);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer71 = undertowEmbeddedServletContainerFactory21.getEmbeddedServletContainer(servletContextInitializerArray66);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray66);
        java.io.File file73 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file73);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(errorPageArray29);
        org.junit.Assert.assertNotNull(xnioWorker32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inetAddress54);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection58);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(servletContextInitializerArray66);
        org.junit.Assert.assertNotNull(embeddedServletContainer67);
        org.junit.Assert.assertNotNull(deploymentManager69);
        org.junit.Assert.assertNotNull(embeddedServletContainer71);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource10 = jarResourceManager0.getResource("hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo11);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        int int15 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection18 = undertowEmbeddedServletContainerFactory17.getBuilderCustomizers();
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory17.workerThreads;
        undertowEmbeddedServletContainerFactory17.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory17.setAccessLogDirectory(file22);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo24);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress28 = null;
        undertowEmbeddedServletContainerFactory27.setAddress(inetAddress28);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory27.setSessionStoreDir(file30);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory27.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList33 = undertowEmbeddedServletContainerFactory27.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory17.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList33;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList33;
        org.springframework.boot.context.embedded.Ssl ssl36 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl36);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1800 + "'", int15 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList33);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 100);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader11);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageSet6);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file4 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.workerThreads = 1;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 100);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setPort((int) ' ');
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(mimeMappings12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.net.InetAddress inetAddress18 = null;
        undertowEmbeddedServletContainerFactory11.setAddress(inetAddress18);
        org.springframework.boot.context.embedded.ErrorPage errorPage20 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray21 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage20 };
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray21);
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory11.resourceLoader = resourceLoader23;
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory11.setDocumentRoot(file25);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection32 = undertowEmbeddedServletContainerFactory28.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        undertowEmbeddedServletContainerFactory28.configureErrorPages(deploymentInfo33);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = undertowEmbeddedServletContainerFactory28.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression36 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression36);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory28.setAccessLogDirectory(file38);
        undertowEmbeddedServletContainerFactory28.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str42 = undertowEmbeddedServletContainerFactory28.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        int int48 = undertowEmbeddedServletContainerFactory44.getSessionTimeout();
        undertowEmbeddedServletContainerFactory44.buffersPerRegion = 100;
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory44.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer52 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray53 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer52 };
        undertowEmbeddedServletContainerFactory44.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory28.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(errorPageArray21);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList35);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1800 + "'", int48 == 1800);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray53);
        org.junit.Assert.assertNull(int58);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        org.springframework.boot.context.embedded.Compression compression8 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(compression8);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList4 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList4, undertowBuilderCustomizerArray3);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList4;
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file7);
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        io.undertow.server.HttpHandler httpHandler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler16 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file9);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        org.springframework.boot.context.embedded.Ssl ssl16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        java.lang.String str21 = undertowEmbeddedServletContainerFactory19.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager22 = undertowEmbeddedServletContainerFactory19.getDocumentRootResourceManager();
        boolean boolean23 = undertowEmbeddedServletContainerFactory19.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory19.setRegisterJspServlet(true);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory19.accessLogDirectory = file26;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory19.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory19.setUseForwardHeaders(true);
        boolean boolean31 = undertowEmbeddedServletContainerFactory19.accessLogEnabled;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList32 = undertowEmbeddedServletContainerFactory19.deploymentInfoCustomizers;
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory19.createBuilder((-1));
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl16, (-1), builder34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0.0.0.0" + "'", str11, "0.0.0.0");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(resourceManager22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 52);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection11 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory13.setResourceLoader(resourceLoader14);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList17, undertowDeploymentInfoCustomizerArray16);
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList17;
        undertowEmbeddedServletContainerFactory13.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection24 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        boolean boolean25 = undertowEmbeddedServletContainerFactory13.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader30;
        org.springframework.core.io.ResourceLoader resourceLoader32 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader33 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader33;
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection38 = undertowEmbeddedServletContainerFactory37.getBuilderCustomizers();
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory37.workerThreads;
        undertowEmbeddedServletContainerFactory37.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory37.setAccessLogDirectory(file42);
        undertowEmbeddedServletContainerFactory37.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory37.getEmbeddedServletContainer(servletContextInitializerArray46);
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray46);
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.Ssl ssl51 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl51);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(resourceLoader32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNull(int53);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory21.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory21.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory29.setCompression(compression31);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory29.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        undertowEmbeddedServletContainerFactory29.configureErrorPages(deploymentInfo34);
        java.net.InetAddress inetAddress36 = null;
        undertowEmbeddedServletContainerFactory29.setAddress(inetAddress36);
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory29.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings39 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        undertowEmbeddedServletContainerFactory21.setMimeMappings(mimeMappings39);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings39);
        java.io.File file42 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        undertowEmbeddedServletContainerFactory44.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory44.directBuffers = true;
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory44.setDocumentRoot(file52);
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory44.workerThreads;
        java.lang.ClassLoader classLoader55 = undertowEmbeddedServletContainerFactory44.getServletClassLoader();
        undertowEmbeddedServletContainerFactory44.setJspServletClassName("hi!");
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList58 = undertowEmbeddedServletContainerFactory44.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList58;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(ssl19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(mimeMappings39);
        org.junit.Assert.assertNull(file42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList58);
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList16 = undertowEmbeddedServletContainerFactory9.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression17);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file19);
        boolean boolean21 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file22 = undertowEmbeddedServletContainerFactory9.getDocumentRoot();
        undertowEmbeddedServletContainerFactory9.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory26.ioThreads;
        org.springframework.boot.context.embedded.Compression compression28 = null;
        undertowEmbeddedServletContainerFactory26.setCompression(compression28);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection30 = undertowEmbeddedServletContainerFactory26.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo31 = null;
        undertowEmbeddedServletContainerFactory26.configureErrorPages(deploymentInfo31);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList33 = undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression34 = null;
        undertowEmbeddedServletContainerFactory26.setCompression(compression34);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file36);
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str40 = undertowEmbeddedServletContainerFactory26.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory42.ioThreads;
        org.springframework.boot.context.embedded.Compression compression44 = null;
        undertowEmbeddedServletContainerFactory42.setCompression(compression44);
        int int46 = undertowEmbeddedServletContainerFactory42.getSessionTimeout();
        undertowEmbeddedServletContainerFactory42.buffersPerRegion = 100;
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory42.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer50 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray51 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer50 };
        undertowEmbeddedServletContainerFactory42.addBuilderCustomizers(undertowBuilderCustomizerArray51);
        undertowEmbeddedServletContainerFactory26.addBuilderCustomizers(undertowBuilderCustomizerArray51);
        undertowEmbeddedServletContainerFactory9.addBuilderCustomizers(undertowBuilderCustomizerArray51);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray51);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(file22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList33);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1800 + "'", int46 == 1800);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray51);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        org.springframework.core.io.ResourceLoader resourceLoader49 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray52 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNull(resourceLoader49);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl14 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.ClassLoader classLoader17 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        boolean boolean18 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(ssl14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList14 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList14);
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.net.InetAddress inetAddress19 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader20;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory23.ioThreads;
        java.lang.String str25 = undertowEmbeddedServletContainerFactory23.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager26 = undertowEmbeddedServletContainerFactory23.getDocumentRootResourceManager();
        boolean boolean27 = undertowEmbeddedServletContainerFactory23.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory23.setRegisterJspServlet(true);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory23.accessLogDirectory = file30;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory23.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray35 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList36 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList36, undertowBuilderCustomizerArray35);
        undertowEmbeddedServletContainerFactory23.builderCustomizers = undertowBuilderCustomizerList36;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList47 = undertowEmbeddedServletContainerFactory40.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory23.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList47;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList47;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList50 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo59 = null;
        undertowEmbeddedServletContainerFactory54.configureErrorPages(deploymentInfo59);
        java.net.InetAddress inetAddress61 = null;
        undertowEmbeddedServletContainerFactory54.setAddress(inetAddress61);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory54.workerThreads;
        java.io.File file64 = null;
        undertowEmbeddedServletContainerFactory54.setAccessLogDirectory(file64);
        boolean boolean66 = undertowEmbeddedServletContainerFactory54.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory68 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory68.ioThreads;
        org.springframework.boot.context.embedded.Compression compression70 = null;
        undertowEmbeddedServletContainerFactory68.setCompression(compression70);
        undertowEmbeddedServletContainerFactory68.setRegisterJspServlet(true);
        java.lang.Integer int74 = undertowEmbeddedServletContainerFactory68.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet75 = undertowEmbeddedServletContainerFactory68.getJspServlet();
        undertowEmbeddedServletContainerFactory54.setJspServlet(jspServlet75);
        undertowEmbeddedServletContainerFactory54.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory80.ioThreads;
        org.springframework.boot.context.embedded.Compression compression82 = null;
        undertowEmbeddedServletContainerFactory80.setCompression(compression82);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection84 = undertowEmbeddedServletContainerFactory80.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo85 = null;
        undertowEmbeddedServletContainerFactory80.configureErrorPages(deploymentInfo85);
        java.net.InetAddress inetAddress87 = null;
        undertowEmbeddedServletContainerFactory80.setAddress(inetAddress87);
        org.springframework.boot.context.embedded.ErrorPage errorPage89 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray90 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage89 };
        undertowEmbeddedServletContainerFactory80.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory54.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray90);
        java.io.File file94 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(inetAddress19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(resourceManager26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList47);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList50);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNotNull(jspServlet75);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection84);
        org.junit.Assert.assertNotNull(errorPageArray90);
        org.junit.Assert.assertNull(file94);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory8.resourceLoader = resourceLoader11;
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory8.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        initializer14.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = initializer14.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer14.initializers = servletContextInitializerArray36;
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = undertowEmbeddedServletContainerFactory8.createDeploymentManager(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        org.springframework.boot.context.embedded.Ssl ssl41 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl41);
        java.lang.String str43 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file45 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.net.InetAddress inetAddress48 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(resourceLoader13);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(deploymentManager39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0.0.0.0" + "'", str43, "0.0.0.0");
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(file45);
        org.junit.Assert.assertNull(inetAddress48);
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory6.ioThreads;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory6.accessLogPattern;
        undertowEmbeddedServletContainerFactory6.setWorkerThreads((java.lang.Integer) 1);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory6.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory13.setCompression(compression15);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection17 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo18 = null;
        undertowEmbeddedServletContainerFactory13.configureErrorPages(deploymentInfo18);
        java.net.InetAddress inetAddress20 = null;
        undertowEmbeddedServletContainerFactory13.setAddress(inetAddress20);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory13.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings23 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory25.setPersistSession(false);
        io.undertow.Undertow.Builder builder29 = undertowEmbeddedServletContainerFactory25.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer32 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder29, deploymentManager30, (int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory34.ioThreads;
        org.springframework.boot.context.embedded.Compression compression36 = null;
        undertowEmbeddedServletContainerFactory34.setCompression(compression36);
        int int38 = undertowEmbeddedServletContainerFactory34.getSessionTimeout();
        undertowEmbeddedServletContainerFactory34.buffersPerRegion = 100;
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory34.setDocumentRoot(file41);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection45 = undertowEmbeddedServletContainerFactory44.getBuilderCustomizers();
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory44.workerThreads;
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.setDocumentRoot(file47);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection49 = undertowEmbeddedServletContainerFactory44.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file56 = null;
        undertowEmbeddedServletContainerFactory51.setAccessLogDirectory(file56);
        undertowEmbeddedServletContainerFactory51.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray60 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer61 = undertowEmbeddedServletContainerFactory51.getEmbeddedServletContainer(servletContextInitializerArray60);
        undertowEmbeddedServletContainerFactory44.addInitializers(servletContextInitializerArray60);
        io.undertow.servlet.api.DeploymentManager deploymentManager63 = undertowEmbeddedServletContainerFactory34.createDeploymentManager(servletContextInitializerArray60);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer65 = undertowEmbeddedServletContainerFactory6.getUndertowEmbeddedServletContainer(builder29, deploymentManager63, (int) (byte) 10);
        io.undertow.servlet.api.DeploymentManager deploymentManager66 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer68 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder29, deploymentManager66, 0);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.ClassLoader classLoader70 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        boolean boolean71 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection17);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(mimeMappings23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1800 + "'", int38 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(servletContextInitializerArray60);
        org.junit.Assert.assertNotNull(embeddedServletContainer61);
        org.junit.Assert.assertNotNull(deploymentManager63);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer65);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer68);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.workerThreads = 32;
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 10, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file18 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.net.InetAddress inetAddress20 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        java.lang.String str26 = undertowEmbeddedServletContainerFactory24.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager27 = undertowEmbeddedServletContainerFactory24.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory24.setJspServletClassName("hi!");
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory24.ioThreads;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory24.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(resourceLoader17);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertNull(ssl19);
        org.junit.Assert.assertNull(inetAddress20);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(resourceManager27);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        boolean boolean35 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean36 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.String str37 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.core.io.ResourceLoader resourceLoader41 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader41;
        int int43 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        boolean boolean44 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1800 + "'", int43 == 1800);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory11.setAccessLogDirectory(file16);
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer21 = undertowEmbeddedServletContainerFactory11.getEmbeddedServletContainer(servletContextInitializerArray20);
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray20);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.Ssl ssl26 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl26);
        boolean boolean28 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(embeddedServletContainer21);
        org.junit.Assert.assertNotNull(deploymentManager22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        java.lang.String str17 = undertowEmbeddedServletContainerFactory15.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager18 = undertowEmbeddedServletContainerFactory15.getDocumentRootResourceManager();
        boolean boolean19 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory15.setRegisterJspServlet(true);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file22;
        java.lang.Boolean boolean24 = undertowEmbeddedServletContainerFactory15.directBuffers;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory15.configureErrorPages(deploymentInfo25);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        int int32 = undertowEmbeddedServletContainerFactory28.getSessionTimeout();
        undertowEmbeddedServletContainerFactory28.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory28.directBuffers = true;
        undertowEmbeddedServletContainerFactory28.setJspServletClassName("");
        java.io.File file39 = undertowEmbeddedServletContainerFactory28.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory41.setPersistSession(false);
        undertowEmbeddedServletContainerFactory41.setIoThreads((java.lang.Integer) (-1));
        java.io.File file46 = undertowEmbeddedServletContainerFactory41.getDocumentRoot();
        boolean boolean47 = undertowEmbeddedServletContainerFactory41.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        undertowEmbeddedServletContainerFactory49.setPort((int) (short) -1);
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory49.accessLogDirectory = file52;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory55.ioThreads;
        org.springframework.boot.context.embedded.Compression compression57 = null;
        undertowEmbeddedServletContainerFactory55.setCompression(compression57);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection59 = undertowEmbeddedServletContainerFactory55.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo60 = null;
        undertowEmbeddedServletContainerFactory55.configureErrorPages(deploymentInfo60);
        java.net.InetAddress inetAddress62 = null;
        undertowEmbeddedServletContainerFactory55.setAddress(inetAddress62);
        org.springframework.boot.context.embedded.ErrorPage errorPage64 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray65 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage64 };
        undertowEmbeddedServletContainerFactory55.addErrorPages(errorPageArray65);
        undertowEmbeddedServletContainerFactory49.addErrorPages(errorPageArray65);
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray65);
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray65);
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray65);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray65);
        io.undertow.server.handlers.resource.ResourceManager resourceManager72 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean73 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.String str74 = undertowEmbeddedServletContainerFactory1.getContextPath();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray75 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(resourceManager18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(boolean24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1800 + "'", int32 == 1800);
        org.junit.Assert.assertNull(file39);
        org.junit.Assert.assertNull(file46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection59);
        org.junit.Assert.assertNotNull(errorPageArray65);
        org.junit.Assert.assertNotNull(resourceManager72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file19;
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file23 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file24 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory26.buffersPerRegion = 0;
        java.lang.String str33 = undertowEmbeddedServletContainerFactory26.getDisplayName();
        int int34 = undertowEmbeddedServletContainerFactory26.getPort();
        undertowEmbeddedServletContainerFactory26.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory38.setPersistSession(false);
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory38.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory38.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory38.getMimeMappings();
        undertowEmbeddedServletContainerFactory26.setMimeMappings(mimeMappings45);
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory26.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray51 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory49.addErrorPages(errorPageArray51);
        org.springframework.boot.context.embedded.Compression compression53 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression53);
        boolean boolean55 = undertowEmbeddedServletContainerFactory49.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression56);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray58 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList59 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList59, undertowDeploymentInfoCustomizerArray58);
        undertowEmbeddedServletContainerFactory49.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList59;
        undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList59;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList59;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(file23);
        org.junit.Assert.assertNull(file24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mimeMappings45);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(errorPageArray51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.net.InetAddress inetAddress5 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.Compression compression6 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression6);
        java.lang.Boolean boolean8 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory16.setResourceLoader(resourceLoader17);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList20, undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        undertowEmbeddedServletContainerFactory16.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory16.setPersistSession(false);
        java.lang.String str27 = undertowEmbeddedServletContainerFactory16.getContextPath();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList28 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        int int29 = undertowEmbeddedServletContainerFactory16.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory31.setPersistSession(false);
        undertowEmbeddedServletContainerFactory31.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList36 = undertowEmbeddedServletContainerFactory31.builderCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory31.setResourceLoader(resourceLoader37);
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory31.resourceLoader = resourceLoader39;
        io.undertow.server.handlers.resource.ResourceManager resourceManager41 = undertowEmbeddedServletContainerFactory31.getDocumentRootResourceManager();
        java.io.File file42 = undertowEmbeddedServletContainerFactory31.getDocumentRoot();
        undertowEmbeddedServletContainerFactory31.setUseForwardHeaders(false);
        org.springframework.core.io.ResourceLoader resourceLoader45 = undertowEmbeddedServletContainerFactory31.resourceLoader;
        boolean boolean46 = undertowEmbeddedServletContainerFactory31.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        undertowEmbeddedServletContainerFactory48.setPort((int) (short) -1);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory48.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo59 = null;
        undertowEmbeddedServletContainerFactory54.configureErrorPages(deploymentInfo59);
        java.net.InetAddress inetAddress61 = null;
        undertowEmbeddedServletContainerFactory54.setAddress(inetAddress61);
        org.springframework.boot.context.embedded.ErrorPage errorPage63 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray64 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage63 };
        undertowEmbeddedServletContainerFactory54.addErrorPages(errorPageArray64);
        undertowEmbeddedServletContainerFactory48.addErrorPages(errorPageArray64);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory68 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress69 = null;
        undertowEmbeddedServletContainerFactory68.setAddress(inetAddress69);
        java.io.File file71 = null;
        undertowEmbeddedServletContainerFactory68.setSessionStoreDir(file71);
        undertowEmbeddedServletContainerFactory68.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory68.setBufferSize((java.lang.Integer) 0);
        int int77 = undertowEmbeddedServletContainerFactory68.getSessionTimeout();
        java.lang.String str78 = undertowEmbeddedServletContainerFactory68.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory80.ioThreads;
        org.springframework.boot.context.embedded.Compression compression82 = null;
        undertowEmbeddedServletContainerFactory80.setCompression(compression82);
        int int84 = undertowEmbeddedServletContainerFactory80.getSessionTimeout();
        undertowEmbeddedServletContainerFactory80.buffersPerRegion = 100;
        java.lang.Integer int87 = undertowEmbeddedServletContainerFactory80.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer88 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray89 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer88 };
        undertowEmbeddedServletContainerFactory80.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory68.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory48.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(inetAddress5);
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1800 + "'", int29 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList36);
        org.junit.Assert.assertNotNull(resourceManager41);
        org.junit.Assert.assertNull(file42);
        org.junit.Assert.assertNull(resourceLoader45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        org.junit.Assert.assertNotNull(errorPageArray64);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1800 + "'", int77 == 1800);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1800 + "'", int84 == 1800);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray89);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode15 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker21 = undertowEmbeddedServletContainerFactory1.createWorker();
        io.undertow.server.handlers.resource.ResourceManager resourceManager22 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(xnioWorker21);
        org.junit.Assert.assertNotNull(resourceManager22);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection18 = undertowEmbeddedServletContainerFactory17.getBuilderCustomizers();
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory17.workerThreads;
        undertowEmbeddedServletContainerFactory17.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory17.setAccessLogDirectory(file22);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList24 = undertowEmbeddedServletContainerFactory17.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory17.setAddress(inetAddress25);
        undertowEmbeddedServletContainerFactory17.setSessionTimeout((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory30.ioThreads;
        org.springframework.boot.context.embedded.Compression compression32 = null;
        undertowEmbeddedServletContainerFactory30.setCompression(compression32);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection34 = undertowEmbeddedServletContainerFactory30.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo35 = null;
        undertowEmbeddedServletContainerFactory30.configureErrorPages(deploymentInfo35);
        java.net.InetAddress inetAddress37 = null;
        undertowEmbeddedServletContainerFactory30.setAddress(inetAddress37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory30.workerThreads;
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory30.setAccessLogDirectory(file40);
        boolean boolean42 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        undertowEmbeddedServletContainerFactory44.setRegisterJspServlet(true);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory44.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet51 = undertowEmbeddedServletContainerFactory44.getJspServlet();
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet51);
        undertowEmbeddedServletContainerFactory30.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory56.ioThreads;
        org.springframework.boot.context.embedded.Compression compression58 = null;
        undertowEmbeddedServletContainerFactory56.setCompression(compression58);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection60 = undertowEmbeddedServletContainerFactory56.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo61 = null;
        undertowEmbeddedServletContainerFactory56.configureErrorPages(deploymentInfo61);
        java.net.InetAddress inetAddress63 = null;
        undertowEmbeddedServletContainerFactory56.setAddress(inetAddress63);
        org.springframework.boot.context.embedded.ErrorPage errorPage65 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray66 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage65 };
        undertowEmbeddedServletContainerFactory56.addErrorPages(errorPageArray66);
        undertowEmbeddedServletContainerFactory30.addErrorPages(errorPageArray66);
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray66);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray66);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection71 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.io.File file72 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList24);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection34);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(jspServlet51);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection60);
        org.junit.Assert.assertNotNull(errorPageArray66);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection71);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        java.lang.Boolean boolean13 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory1.workerThreads;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory18.workerThreads;
        undertowEmbeddedServletContainerFactory18.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setAccessLogDirectory(file23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress26 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress26);
        undertowEmbeddedServletContainerFactory18.accessLogPattern = "hi!";
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet30 = undertowEmbeddedServletContainerFactory18.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35, initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39 };
        initializer31.initializers = servletContextInitializerArray40;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = initializer31.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection45 = undertowEmbeddedServletContainerFactory44.getBuilderCustomizers();
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory44.workerThreads;
        undertowEmbeddedServletContainerFactory44.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory44.setAccessLogDirectory(file49);
        undertowEmbeddedServletContainerFactory44.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray53 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer54 = undertowEmbeddedServletContainerFactory44.getEmbeddedServletContainer(servletContextInitializerArray53);
        initializer31.initializers = servletContextInitializerArray53;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray56 = initializer31.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = initializer31.initializers;
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray57);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo16, servletContextInitializerArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        org.junit.Assert.assertNotNull(errorPageSet30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(servletContextInitializerArray53);
        org.junit.Assert.assertNotNull(embeddedServletContainer54);
        org.junit.Assert.assertNotNull(servletContextInitializerArray56);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        boolean boolean7 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str8 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener11 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder26, deploymentManager27, (int) '4');
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory10.setSessionStoreDir(file30);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        int int33 = undertowEmbeddedServletContainerFactory10.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory35.setAccessLogDirectory(file40);
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getEmbeddedServletContainer(servletContextInitializerArray44);
        org.springframework.core.io.ResourceLoader resourceLoader46 = null;
        undertowEmbeddedServletContainerFactory35.setResourceLoader(resourceLoader46);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection53 = undertowEmbeddedServletContainerFactory49.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory49.configureErrorPages(deploymentInfo54);
        java.net.InetAddress inetAddress56 = null;
        undertowEmbeddedServletContainerFactory49.setAddress(inetAddress56);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory49.workerThreads;
        java.io.File file59 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file59);
        boolean boolean61 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        org.springframework.boot.context.embedded.Compression compression65 = null;
        undertowEmbeddedServletContainerFactory63.setCompression(compression65);
        undertowEmbeddedServletContainerFactory63.setRegisterJspServlet(true);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory63.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet70 = undertowEmbeddedServletContainerFactory63.getJspServlet();
        undertowEmbeddedServletContainerFactory49.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory35.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory10.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet70);
        boolean boolean75 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory77 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory77.ioThreads;
        org.springframework.boot.context.embedded.Compression compression79 = null;
        undertowEmbeddedServletContainerFactory77.setCompression(compression79);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection81 = undertowEmbeddedServletContainerFactory77.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo82 = null;
        undertowEmbeddedServletContainerFactory77.configureErrorPages(deploymentInfo82);
        java.net.InetAddress inetAddress84 = null;
        undertowEmbeddedServletContainerFactory77.setAddress(inetAddress84);
        io.undertow.server.handlers.resource.ResourceManager resourceManager86 = undertowEmbeddedServletContainerFactory77.getDocumentRootResourceManager();
        java.lang.Integer int87 = undertowEmbeddedServletContainerFactory77.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings88 = undertowEmbeddedServletContainerFactory77.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings88);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(mimeMappings20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(embeddedServletContainer45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection53);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(jspServlet70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection81);
        org.junit.Assert.assertNotNull(resourceManager86);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNotNull(mimeMappings88);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.Ssl ssl25 = undertowEmbeddedServletContainerFactory16.getSsl();
        undertowEmbeddedServletContainerFactory16.setAccessLogPattern("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        java.lang.String str31 = undertowEmbeddedServletContainerFactory29.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager32 = undertowEmbeddedServletContainerFactory29.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory29.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory29.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet43 = undertowEmbeddedServletContainerFactory40.getJspServlet();
        undertowEmbeddedServletContainerFactory38.setJspServlet(jspServlet43);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory48.ioThreads;
        org.springframework.boot.context.embedded.Compression compression50 = null;
        undertowEmbeddedServletContainerFactory48.setCompression(compression50);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection52 = undertowEmbeddedServletContainerFactory48.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo53 = null;
        undertowEmbeddedServletContainerFactory48.configureErrorPages(deploymentInfo53);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList55 = undertowEmbeddedServletContainerFactory48.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory46.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList55;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList57 = undertowEmbeddedServletContainerFactory46.builderCustomizers;
        undertowEmbeddedServletContainerFactory38.builderCustomizers = undertowBuilderCustomizerList57;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory60.ioThreads;
        org.springframework.boot.context.embedded.Compression compression62 = null;
        undertowEmbeddedServletContainerFactory60.setCompression(compression62);
        int int64 = undertowEmbeddedServletContainerFactory60.getSessionTimeout();
        undertowEmbeddedServletContainerFactory60.buffersPerRegion = 100;
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory60.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer68 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray69 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer68 };
        undertowEmbeddedServletContainerFactory60.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory38.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory29.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        java.lang.String str75 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(ssl25);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(resourceManager32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(jspServlet43);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection52);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList55);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList57);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1800 + "'", int64 == 1800);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray69);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        int int11 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection19 = undertowEmbeddedServletContainerFactory15.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo20 = null;
        undertowEmbeddedServletContainerFactory15.configureErrorPages(deploymentInfo20);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList22;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory13.accessLogEnabled = false;
        java.io.File file27 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        org.springframework.boot.context.embedded.Compression compression28 = undertowEmbeddedServletContainerFactory13.getCompression();
        org.springframework.boot.context.embedded.Ssl ssl29 = undertowEmbeddedServletContainerFactory13.getSsl();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet30 = undertowEmbeddedServletContainerFactory13.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet30);
        int int32 = undertowEmbeddedServletContainerFactory1.getPort();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList24);
        org.junit.Assert.assertNull(file27);
        org.junit.Assert.assertNull(compression28);
        org.junit.Assert.assertNull(ssl29);
        org.junit.Assert.assertNotNull(errorPageSet30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNull(int33);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(compression10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        java.lang.String str9 = jarResourceManager0.jarPath;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection11 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory13.setResourceLoader(resourceLoader14);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList17, undertowDeploymentInfoCustomizerArray16);
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList17;
        undertowEmbeddedServletContainerFactory13.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection24 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        boolean boolean25 = undertowEmbeddedServletContainerFactory13.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader30;
        org.springframework.core.io.ResourceLoader resourceLoader32 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader33 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader33;
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection38 = undertowEmbeddedServletContainerFactory37.getBuilderCustomizers();
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory37.workerThreads;
        undertowEmbeddedServletContainerFactory37.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory37.setAccessLogDirectory(file42);
        undertowEmbeddedServletContainerFactory37.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory37.getEmbeddedServletContainer(servletContextInitializerArray46);
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray46);
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray46);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        java.net.InetAddress inetAddress53 = undertowEmbeddedServletContainerFactory1.getAddress();
        boolean boolean54 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(resourceLoader32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNull(inetAddress53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file7;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression12);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        boolean boolean35 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean36 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.String str37 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.JspServlet jspServlet41 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader42 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader42);
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file44);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNull(jspServlet41);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Compression compression4 = undertowEmbeddedServletContainerFactory1.getCompression();
        int int5 = undertowEmbeddedServletContainerFactory1.getPort();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.lang.ClassLoader classLoader12 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        java.lang.Class<?> wildcardClass13 = classLoader12.getClass();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(compression4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) -1);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray11 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        int int13 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(inetAddress10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        int int18 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(compression13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1800 + "'", int18 == 1800);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.xnio.XnioWorker xnioWorker16 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress17);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNotNull(xnioWorker16);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader6);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setPort((int) '#');
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet16 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress25);
        io.undertow.server.handlers.resource.ResourceManager resourceManager27 = undertowEmbeddedServletContainerFactory18.getDocumentRootResourceManager();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory18.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory30.setPersistSession(false);
        undertowEmbeddedServletContainerFactory30.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList35 = undertowEmbeddedServletContainerFactory30.builderCustomizers;
        undertowEmbeddedServletContainerFactory18.builderCustomizers = undertowBuilderCustomizerList35;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList35;
        org.springframework.boot.context.embedded.ErrorPage errorPage38 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage39 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(errorPageSet16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(resourceManager27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList35);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file15);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList19 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        int int20 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertNull(compression14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1800 + "'", int20 == 1800);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet12 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.ErrorPage errorPage14 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage15 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertNotNull(errorPageSet12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str4 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        java.lang.String str6 = jarResourceManager0.jarPath;
        boolean boolean7 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource9 = jarResourceManager0.getResource("");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList2;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader4);
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.net.InetAddress inetAddress9 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress9);
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.boot.context.embedded.Ssl ssl20 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl20);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader24 = null;
        undertowEmbeddedServletContainerFactory23.setResourceLoader(resourceLoader24);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList27 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList27, undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory23.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList27;
        org.springframework.boot.context.embedded.Ssl ssl30 = undertowEmbeddedServletContainerFactory23.getSsl();
        io.undertow.Undertow.Builder builder32 = undertowEmbeddedServletContainerFactory23.createBuilder((int) (short) 100);
        undertowEmbeddedServletContainerFactory23.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory36.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo41);
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress43);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList48 = undertowEmbeddedServletContainerFactory36.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory36.ioThreads = 0;
        undertowEmbeddedServletContainerFactory36.bufferSize = 100;
        java.io.File file53 = undertowEmbeddedServletContainerFactory36.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory55.ioThreads;
        java.lang.String str57 = undertowEmbeddedServletContainerFactory55.accessLogPattern;
        undertowEmbeddedServletContainerFactory55.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory61.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray63 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory61.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory55.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory23.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(ssl30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList48);
        org.junit.Assert.assertNull(file53);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(errorPageArray63);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.io.File file22 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDisplayName("hi!");
        boolean boolean31 = undertowEmbeddedServletContainerFactory26.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory26.resourceLoader = resourceLoader32;
        undertowEmbeddedServletContainerFactory26.setPort((int) (byte) 0);
        boolean boolean36 = undertowEmbeddedServletContainerFactory26.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory38.ioThreads;
        org.springframework.boot.context.embedded.Compression compression40 = null;
        undertowEmbeddedServletContainerFactory38.setCompression(compression40);
        undertowEmbeddedServletContainerFactory38.setSessionTimeout(100);
        java.net.InetAddress inetAddress44 = undertowEmbeddedServletContainerFactory38.getAddress();
        undertowEmbeddedServletContainerFactory38.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory48.ioThreads;
        org.springframework.boot.context.embedded.Compression compression50 = null;
        undertowEmbeddedServletContainerFactory48.setCompression(compression50);
        int int52 = undertowEmbeddedServletContainerFactory48.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker53 = undertowEmbeddedServletContainerFactory48.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl54 = undertowEmbeddedServletContainerFactory48.getSsl();
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory48.setSessionStoreDir(file55);
        org.springframework.boot.context.embedded.JspServlet jspServlet57 = undertowEmbeddedServletContainerFactory48.getJspServlet();
        undertowEmbeddedServletContainerFactory38.setJspServlet(jspServlet57);
        undertowEmbeddedServletContainerFactory26.setJspServlet(jspServlet57);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet57);
        java.io.File file61 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNull(file22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(inetAddress44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1800 + "'", int52 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker53);
        org.junit.Assert.assertNull(ssl54);
        org.junit.Assert.assertNotNull(jspServlet57);
        org.junit.Assert.assertNull(file61);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 0);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file12);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader18;
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory15.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader21;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray23 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList24, undertowBuilderCustomizerArray23);
        undertowEmbeddedServletContainerFactory15.builderCustomizers = undertowBuilderCustomizerList24;
        undertowEmbeddedServletContainerFactory15.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory15.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader31 = undertowEmbeddedServletContainerFactory15.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory33.ioThreads;
        java.lang.String str35 = undertowEmbeddedServletContainerFactory33.accessLogPattern;
        undertowEmbeddedServletContainerFactory33.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray38 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList39, undertowBuilderCustomizerArray38);
        undertowEmbeddedServletContainerFactory33.builderCustomizers = undertowBuilderCustomizerList39;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray48 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory43.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory33.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory15.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        org.springframework.boot.context.embedded.JspServlet jspServlet52 = undertowEmbeddedServletContainerFactory15.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet52);
        org.springframework.boot.context.embedded.ErrorPage errorPage54 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage55 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(resourceLoader20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(resourceLoader31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray48);
        org.junit.Assert.assertNotNull(jspServlet52);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList13 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(undertowBuilderCustomizerList13);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file24);
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(resourceLoader26);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.bufferSize = 32;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.net.InetAddress inetAddress12 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 100, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(file11);
        org.junit.Assert.assertNull(inetAddress12);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl10);
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0.0.0" + "'", str8, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory10.setAccessLogDirectory(file20);
        boolean boolean22 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        undertowEmbeddedServletContainerFactory10.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection25 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory10.accessLogPattern = "";
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file28;
        org.springframework.boot.context.embedded.Compression compression30 = undertowEmbeddedServletContainerFactory10.getCompression();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory10.workerThreads;
        java.io.File file32 = undertowEmbeddedServletContainerFactory10.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setUseForwardHeaders(false);
        java.lang.String str39 = undertowEmbeddedServletContainerFactory34.getDisplayName();
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 1);
        boolean boolean42 = undertowEmbeddedServletContainerFactory34.isRegisterDefaultServlet();
        java.lang.Boolean boolean43 = undertowEmbeddedServletContainerFactory34.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory34.builderCustomizers;
        org.springframework.boot.context.embedded.JspServlet jspServlet45 = undertowEmbeddedServletContainerFactory34.getJspServlet();
        undertowEmbeddedServletContainerFactory34.workerThreads = 0;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet48 = undertowEmbeddedServletContainerFactory34.getErrorPages();
        undertowEmbeddedServletContainerFactory10.setErrorPages(errorPageSet48);
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet48);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection25);
        org.junit.Assert.assertNull(compression30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(file32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(boolean43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
        org.junit.Assert.assertNotNull(jspServlet45);
        org.junit.Assert.assertNotNull(errorPageSet48);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        java.lang.String str7 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "hi!";
        java.lang.String str11 = jarResourceManager0.jarPath;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory2.createBuilder((int) (byte) 100);
        org.xnio.XnioWorker xnioWorker5 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.ioThreads = (-1);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory2.workerThreads;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(xnioWorker5);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.ClassLoader classLoader15 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.xnio.XnioWorker xnioWorker16 = undertowEmbeddedServletContainerFactory1.createWorker();
        io.undertow.Undertow.Builder builder18 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) -1);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1;
        undertowEmbeddedServletContainerFactory1.workerThreads = 97;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNull(file14);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(xnioWorker16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo3 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo3);
        java.lang.String str5 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory10.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet13);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress25);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory18.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory30.setPersistSession(false);
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory30.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory18.getUndertowEmbeddedServletContainer(builder34, deploymentManager35, (int) '4');
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file38);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory18.buffersPerRegion;
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory18.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory44.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet47 = null;
        undertowEmbeddedServletContainerFactory44.setJspServlet(jspServlet47);
        java.net.InetAddress inetAddress49 = undertowEmbeddedServletContainerFactory44.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setAccessLogDirectory(file57);
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer62 = undertowEmbeddedServletContainerFactory52.getEmbeddedServletContainer(servletContextInitializerArray61);
        initializer50.initializers = servletContextInitializerArray61;
        io.undertow.servlet.api.DeploymentManager deploymentManager64 = undertowEmbeddedServletContainerFactory44.createDeploymentManager(servletContextInitializerArray61);
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray61);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer66 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray61);
        int int67 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Ssl ssl68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode69 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(mimeMappings28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(inetAddress49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
        org.junit.Assert.assertNotNull(embeddedServletContainer62);
        org.junit.Assert.assertNotNull(deploymentManager64);
        org.junit.Assert.assertNotNull(embeddedServletContainer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1800 + "'", int67 == 1800);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        boolean boolean12 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str13 = jarResourceManager0.jarPath;
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "0.0.0.0";
        boolean boolean13 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.io.File file2 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file2);
        java.net.InetAddress inetAddress4 = undertowEmbeddedServletContainerFactory1.getAddress();
        int int5 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(inetAddress4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray18 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray18);
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression20);
        boolean boolean22 = undertowEmbeddedServletContainerFactory16.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer25.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory16.getEmbeddedServletContainer(servletContextInitializerArray36);
        io.undertow.servlet.api.DeploymentManager deploymentManager40 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray36);
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) -1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray45 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(errorPageArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertNotNull(deploymentManager40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.net.InetAddress inetAddress11 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray6 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        int int11 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        int int13 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(jspServlet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(mimeMappings12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1800 + "'", int13 == 1800);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(compression13);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl14 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings16 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(ssl14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNotNull(mimeMappings16);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.lang.Boolean boolean17 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 52;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory21.ioThreads;
        org.springframework.boot.context.embedded.Compression compression23 = null;
        undertowEmbeddedServletContainerFactory21.setCompression(compression23);
        undertowEmbeddedServletContainerFactory21.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray30);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer40 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer38, initParameterConfiguringServletContextInitializer40, initParameterConfiguringServletContextInitializer42 };
        undertowEmbeddedServletContainerFactory34.addInitializers(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory21.addInitializers(servletContextInitializerArray43);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory21.setSessionStoreDir(file46);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory21.resourceLoader = resourceLoader48;
        org.springframework.boot.context.embedded.Ssl ssl50 = null;
        undertowEmbeddedServletContainerFactory21.setSsl(ssl50);
        org.springframework.boot.context.embedded.Compression compression52 = undertowEmbeddedServletContainerFactory21.getCompression();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet53 = undertowEmbeddedServletContainerFactory21.getErrorPages();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList54 = undertowEmbeddedServletContainerFactory21.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList54;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(boolean17);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNull(compression52);
        org.junit.Assert.assertNotNull(errorPageSet53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList54);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression11 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        undertowEmbeddedServletContainerFactory17.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory24.getBuilderCustomizers();
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory24.workerThreads;
        undertowEmbeddedServletContainerFactory24.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory24.setAccessLogDirectory(file29);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo31 = null;
        undertowEmbeddedServletContainerFactory24.configureErrorPages(deploymentInfo31);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer33 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer33 };
        undertowEmbeddedServletContainerFactory24.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray34);
        undertowEmbeddedServletContainerFactory17.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray34);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer45 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap44);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43, initParameterConfiguringServletContextInitializer45 };
        initializer37.initializers = servletContextInitializerArray46;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = initializer37.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        undertowEmbeddedServletContainerFactory50.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory50.setAccessLogDirectory(file55);
        undertowEmbeddedServletContainerFactory50.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray59 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer60 = undertowEmbeddedServletContainerFactory50.getEmbeddedServletContainer(servletContextInitializerArray59);
        initializer37.initializers = servletContextInitializerArray59;
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray59);
        undertowEmbeddedServletContainerFactory17.setBuffersPerRegion((java.lang.Integer) (-1));
        io.undertow.Undertow.Builder builder66 = undertowEmbeddedServletContainerFactory17.createBuilder(0);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl14, 52, builder66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
        org.junit.Assert.assertNull(compression11);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray34);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(servletContextInitializerArray59);
        org.junit.Assert.assertNotNull(embeddedServletContainer60);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer19 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap18);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17, initParameterConfiguringServletContextInitializer19 };
        initializer11.initializers = servletContextInitializerArray20;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray22 = initializer11.initializers;
        initializer10.initializers = servletContextInitializerArray22;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray22);
        boolean boolean25 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        int int30 = undertowEmbeddedServletContainerFactory1.getPort();
        java.util.concurrent.TimeUnit timeUnit32 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(10, timeUnit32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer5 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer7 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer9 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap8);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer5, initParameterConfiguringServletContextInitializer7, initParameterConfiguringServletContextInitializer9 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory13.getBuilderCustomizers();
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory13.workerThreads;
        undertowEmbeddedServletContainerFactory13.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory13.setAccessLogDirectory(file18);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet25 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        undertowEmbeddedServletContainerFactory13.setJspServlet(jspServlet25);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet25);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList29 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList29;
        java.io.File file31 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(jspServlet25);
        org.junit.Assert.assertNull(inetAddress28);
        org.junit.Assert.assertNull(file31);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo12);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file14;
        org.springframework.boot.context.embedded.Compression compression16 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNull(compression16);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file17);
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getEmbeddedServletContainer(servletContextInitializerArray21);
        initializer10.initializers = servletContextInitializerArray21;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer24 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        org.springframework.boot.context.embedded.JspServlet jspServlet28 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet28);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file30);
        java.lang.ClassLoader classLoader32 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        io.undertow.server.handlers.resource.ResourceManager resourceManager33 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str36 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        org.junit.Assert.assertNotNull(embeddedServletContainer22);
        org.junit.Assert.assertNotNull(embeddedServletContainer24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(resourceManager33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0.0.0.0" + "'", str36, "0.0.0.0");
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.Ssl ssl9 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl9);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList11 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList11);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        java.net.InetAddress inetAddress4 = undertowEmbeddedServletContainerFactory2.getAddress();
        boolean boolean5 = undertowEmbeddedServletContainerFactory2.accessLogEnabled;
        boolean boolean6 = undertowEmbeddedServletContainerFactory2.accessLogEnabled;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.useForwardHeaders;
        org.junit.Assert.assertNull(file3);
        org.junit.Assert.assertNull(inetAddress4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        int int31 = undertowEmbeddedServletContainerFactory27.getSessionTimeout();
        undertowEmbeddedServletContainerFactory27.buffersPerRegion = 100;
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader35 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        undertowEmbeddedServletContainerFactory27.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory39.setAccessLogDirectory(file44);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo46 = null;
        undertowEmbeddedServletContainerFactory39.configureErrorPages(deploymentInfo46);
        undertowEmbeddedServletContainerFactory39.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory39.buffersPerRegion = 0;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection56 = undertowEmbeddedServletContainerFactory55.getBuilderCustomizers();
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory55.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet58 = undertowEmbeddedServletContainerFactory55.getJspServlet();
        undertowEmbeddedServletContainerFactory53.setJspServlet(jspServlet58);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        org.springframework.boot.context.embedded.Compression compression65 = null;
        undertowEmbeddedServletContainerFactory63.setCompression(compression65);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection67 = undertowEmbeddedServletContainerFactory63.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo68 = null;
        undertowEmbeddedServletContainerFactory63.configureErrorPages(deploymentInfo68);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList70 = undertowEmbeddedServletContainerFactory63.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory61.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList70;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList72 = undertowEmbeddedServletContainerFactory61.builderCustomizers;
        undertowEmbeddedServletContainerFactory53.builderCustomizers = undertowBuilderCustomizerList72;
        undertowEmbeddedServletContainerFactory39.builderCustomizers = undertowBuilderCustomizerList72;
        undertowEmbeddedServletContainerFactory27.builderCustomizers = undertowBuilderCustomizerList72;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList76 = undertowEmbeddedServletContainerFactory27.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList76;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1800 + "'", int31 == 1800);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(resourceLoader35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(jspServlet58);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection67);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList70);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList76);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl5 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl5);
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.xnio.XnioWorker xnioWorker9 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(xnioWorker4);
        org.junit.Assert.assertNotNull(xnioWorker9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection18 = undertowEmbeddedServletContainerFactory17.getBuilderCustomizers();
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory17.workerThreads;
        undertowEmbeddedServletContainerFactory17.setUseForwardHeaders(false);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory17.getDisplayName();
        undertowEmbeddedServletContainerFactory17.setBufferSize((java.lang.Integer) 1);
        boolean boolean25 = undertowEmbeddedServletContainerFactory17.isRegisterDefaultServlet();
        java.lang.Boolean boolean26 = undertowEmbeddedServletContainerFactory17.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList27 = undertowEmbeddedServletContainerFactory17.builderCustomizers;
        undertowEmbeddedServletContainerFactory17.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings30 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings31 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        undertowEmbeddedServletContainerFactory14.setMimeMappings(mimeMappings31);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings31);
        java.lang.String str34 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file35);
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(boolean26);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList27);
        org.junit.Assert.assertNotNull(mimeMappings30);
        org.junit.Assert.assertNotNull(mimeMappings31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file4;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        boolean boolean11 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener12 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray19);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        int int29 = undertowEmbeddedServletContainerFactory25.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory25.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        org.springframework.boot.context.embedded.Compression compression33 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader34;
        undertowEmbeddedServletContainerFactory1.setPort((-1));
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        java.lang.String str40 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.Ssl ssl45 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory48.ioThreads;
        org.springframework.boot.context.embedded.Compression compression50 = null;
        undertowEmbeddedServletContainerFactory48.setCompression(compression50);
        undertowEmbeddedServletContainerFactory48.setRegisterJspServlet(true);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory48.setSessionStoreDir(file54);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader58 = null;
        undertowEmbeddedServletContainerFactory57.setResourceLoader(resourceLoader58);
        io.undertow.Undertow.Builder builder61 = undertowEmbeddedServletContainerFactory57.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        org.springframework.boot.context.embedded.Compression compression65 = null;
        undertowEmbeddedServletContainerFactory63.setCompression(compression65);
        int int67 = undertowEmbeddedServletContainerFactory63.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker68 = undertowEmbeddedServletContainerFactory63.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList69 = undertowEmbeddedServletContainerFactory63.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory63.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory73 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection74 = undertowEmbeddedServletContainerFactory73.getBuilderCustomizers();
        java.lang.Integer int75 = undertowEmbeddedServletContainerFactory73.workerThreads;
        java.io.File file76 = null;
        undertowEmbeddedServletContainerFactory73.setDocumentRoot(file76);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection78 = undertowEmbeddedServletContainerFactory73.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection81 = undertowEmbeddedServletContainerFactory80.getBuilderCustomizers();
        java.lang.Integer int82 = undertowEmbeddedServletContainerFactory80.workerThreads;
        undertowEmbeddedServletContainerFactory80.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file85 = null;
        undertowEmbeddedServletContainerFactory80.setAccessLogDirectory(file85);
        undertowEmbeddedServletContainerFactory80.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray89 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer90 = undertowEmbeddedServletContainerFactory80.getEmbeddedServletContainer(servletContextInitializerArray89);
        undertowEmbeddedServletContainerFactory73.addInitializers(servletContextInitializerArray89);
        io.undertow.servlet.api.DeploymentManager deploymentManager92 = undertowEmbeddedServletContainerFactory63.createDeploymentManager(servletContextInitializerArray89);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer94 = undertowEmbeddedServletContainerFactory48.getUndertowEmbeddedServletContainer(builder61, deploymentManager92, (-1));
        undertowEmbeddedServletContainerFactory48.accessLogPattern = "hi!";
        io.undertow.Undertow.Builder builder98 = undertowEmbeddedServletContainerFactory48.createBuilder((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl45, (int) 'a', builder98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1800 + "'", int29 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
        org.junit.Assert.assertNull(compression33);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1800 + "'", int67 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker68);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList69);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection74);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection78);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection81);
        org.junit.Assert.assertNull(int82);
        org.junit.Assert.assertNotNull(servletContextInitializerArray89);
        org.junit.Assert.assertNotNull(embeddedServletContainer90);
        org.junit.Assert.assertNotNull(deploymentManager92);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer94);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.springframework.boot.context.embedded.Compression compression6 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file7;
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory12.setRegisterJspServlet(true);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file19;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory12.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory29.setCompression(compression31);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory29.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        undertowEmbeddedServletContainerFactory29.configureErrorPages(deploymentInfo34);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList36 = undertowEmbeddedServletContainerFactory29.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList36;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory39.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection48 = undertowEmbeddedServletContainerFactory47.getBuilderCustomizers();
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory47.workerThreads;
        undertowEmbeddedServletContainerFactory47.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory47.setAccessLogDirectory(file52);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory47.configureErrorPages(deploymentInfo54);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer56 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray57 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer56 };
        undertowEmbeddedServletContainerFactory47.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray57);
        undertowEmbeddedServletContainerFactory39.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray57);
        undertowEmbeddedServletContainerFactory12.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray57);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray57);
        io.undertow.server.handlers.resource.ResourceManager resourceManager62 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(compression6);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList36);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection48);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray57);
        org.junit.Assert.assertNotNull(resourceManager62);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.ioThreads = 32;
        org.springframework.boot.context.embedded.Ssl ssl45 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl45);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        io.undertow.Undertow.Builder builder23 = undertowEmbeddedServletContainerFactory1.createBuilder(0);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 32);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        io.undertow.server.handlers.resource.ResourceManager resourceManager16 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str18 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Boolean boolean19 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression20);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNotNull(resourceManager16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        java.lang.String str4 = jarResourceManager0.jarPath;
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener14 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(0);
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0.0.0.0" + "'", str6, "0.0.0.0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory20.ioThreads;
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory20.setCompression(compression22);
        undertowEmbeddedServletContainerFactory20.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray29 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray29);
        undertowEmbeddedServletContainerFactory20.addErrorPages(errorPageArray29);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41 };
        undertowEmbeddedServletContainerFactory33.addInitializers(servletContextInitializerArray42);
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray42);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection46 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings47 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(errorPageArray29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection46);
        org.junit.Assert.assertNotNull(mimeMappings47);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory6.getBuilderCustomizers();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory6.workerThreads;
        undertowEmbeddedServletContainerFactory6.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory6.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray15);
        initializer4.initializers = servletContextInitializerArray15;
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray15);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file23;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(servletContextInitializerArray15);
        org.junit.Assert.assertNotNull(embeddedServletContainer16);
        org.junit.Assert.assertNotNull(deploymentManager18);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file3;
        int int5 = undertowEmbeddedServletContainerFactory2.getPort();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList6 = undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory2.setJspServletClassName("");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList6);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1800);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNotNull(mimeMappings19);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.io.File file5 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection10);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress9 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress9);
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 100);
        java.net.InetAddress inetAddress13 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file16);
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader18);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.springframework.boot.context.embedded.ErrorPage errorPage23 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage24 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(inetAddress13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertNotNull(errorPageSet10);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory12.setCompression(compression14);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory12.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        java.net.InetAddress inetAddress19 = null;
        undertowEmbeddedServletContainerFactory12.setAddress(inetAddress19);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory12.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory24.setPersistSession(false);
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory24.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory12.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) '4');
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory12.setSessionStoreDir(file32);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory12.buffersPerRegion;
        io.undertow.Undertow.Builder builder36 = undertowEmbeddedServletContainerFactory12.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory38.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet41 = null;
        undertowEmbeddedServletContainerFactory38.setJspServlet(jspServlet41);
        java.net.InetAddress inetAddress43 = undertowEmbeddedServletContainerFactory38.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection47 = undertowEmbeddedServletContainerFactory46.getBuilderCustomizers();
        java.lang.Integer int48 = undertowEmbeddedServletContainerFactory46.workerThreads;
        undertowEmbeddedServletContainerFactory46.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory46.setAccessLogDirectory(file51);
        undertowEmbeddedServletContainerFactory46.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray55 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer56 = undertowEmbeddedServletContainerFactory46.getEmbeddedServletContainer(servletContextInitializerArray55);
        initializer44.initializers = servletContextInitializerArray55;
        io.undertow.servlet.api.DeploymentManager deploymentManager58 = undertowEmbeddedServletContainerFactory38.createDeploymentManager(servletContextInitializerArray55);
        undertowEmbeddedServletContainerFactory12.addInitializers(servletContextInitializerArray55);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer60 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray55);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file61);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(mimeMappings22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(inetAddress43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(servletContextInitializerArray55);
        org.junit.Assert.assertNotNull(embeddedServletContainer56);
        org.junit.Assert.assertNotNull(deploymentManager58);
        org.junit.Assert.assertNotNull(embeddedServletContainer60);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.Ssl ssl9 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.bufferSize = 97;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(ssl9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory11.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, 0);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader22);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        org.junit.Assert.assertNull(resourceLoader21);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory42.ioThreads;
        org.springframework.boot.context.embedded.Compression compression44 = null;
        undertowEmbeddedServletContainerFactory42.setCompression(compression44);
        java.io.File file46 = undertowEmbeddedServletContainerFactory42.getDocumentRoot();
        undertowEmbeddedServletContainerFactory42.bufferSize = 1800;
        undertowEmbeddedServletContainerFactory42.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader55 = null;
        undertowEmbeddedServletContainerFactory52.resourceLoader = resourceLoader55;
        org.springframework.core.io.ResourceLoader resourceLoader57 = undertowEmbeddedServletContainerFactory52.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader58 = null;
        undertowEmbeddedServletContainerFactory52.resourceLoader = resourceLoader58;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray60 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList61 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList61, undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory52.builderCustomizers = undertowBuilderCustomizerList61;
        undertowEmbeddedServletContainerFactory52.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory52.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader68 = undertowEmbeddedServletContainerFactory52.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int71 = undertowEmbeddedServletContainerFactory70.ioThreads;
        java.lang.String str72 = undertowEmbeddedServletContainerFactory70.accessLogPattern;
        undertowEmbeddedServletContainerFactory70.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray75 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList76 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList76, undertowBuilderCustomizerArray75);
        undertowEmbeddedServletContainerFactory70.builderCustomizers = undertowBuilderCustomizerList76;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection81 = undertowEmbeddedServletContainerFactory80.getBuilderCustomizers();
        java.lang.Integer int82 = undertowEmbeddedServletContainerFactory80.workerThreads;
        undertowEmbeddedServletContainerFactory80.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray85 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory80.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory70.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory52.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory42.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        java.io.File file91 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.String str92 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(file46);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNull(resourceLoader57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(resourceLoader68);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection81);
        org.junit.Assert.assertNull(int82);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray85);
        org.junit.Assert.assertNull(file91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        io.undertow.server.handlers.resource.ResourceManager resourceManager5 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(mimeMappings4);
        org.junit.Assert.assertNotNull(resourceManager5);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 0);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory13.setCompression(compression15);
        undertowEmbeddedServletContainerFactory13.setSessionTimeout(100);
        java.net.InetAddress inetAddress19 = undertowEmbeddedServletContainerFactory13.getAddress();
        undertowEmbeddedServletContainerFactory13.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory23.ioThreads;
        org.springframework.boot.context.embedded.Compression compression25 = null;
        undertowEmbeddedServletContainerFactory23.setCompression(compression25);
        int int27 = undertowEmbeddedServletContainerFactory23.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker28 = undertowEmbeddedServletContainerFactory23.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl29 = undertowEmbeddedServletContainerFactory23.getSsl();
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory23.setSessionStoreDir(file30);
        org.springframework.boot.context.embedded.JspServlet jspServlet32 = undertowEmbeddedServletContainerFactory23.getJspServlet();
        undertowEmbeddedServletContainerFactory13.setJspServlet(jspServlet32);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet32);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray35 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(inetAddress19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1800 + "'", int27 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker28);
        org.junit.Assert.assertNull(ssl29);
        org.junit.Assert.assertNotNull(jspServlet32);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader10);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file12);
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.buffersPerRegion;
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory16.resourceLoader = resourceLoader21;
        undertowEmbeddedServletContainerFactory16.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ErrorPages must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(resourceLoader14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList25);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory8.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet11);
        org.springframework.boot.context.embedded.Ssl ssl13 = undertowEmbeddedServletContainerFactory1.getSsl();
        int int14 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        undertowEmbeddedServletContainerFactory22.setRegisterJspServlet(true);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory22.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet29 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        undertowEmbeddedServletContainerFactory16.setJspServlet(jspServlet29);
        undertowEmbeddedServletContainerFactory16.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory16.accessLogPattern = "";
        org.springframework.boot.context.embedded.Ssl ssl35 = null;
        undertowEmbeddedServletContainerFactory16.setSsl(ssl35);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory16.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        undertowEmbeddedServletContainerFactory40.setRegisterJspServlet(true);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory40.setSessionStoreDir(file46);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection53 = undertowEmbeddedServletContainerFactory49.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory49.configureErrorPages(deploymentInfo54);
        java.net.InetAddress inetAddress56 = null;
        undertowEmbeddedServletContainerFactory49.setAddress(inetAddress56);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList61 = undertowEmbeddedServletContainerFactory49.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory49.ioThreads = 0;
        io.undertow.Undertow.Builder builder65 = undertowEmbeddedServletContainerFactory49.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory67.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet70 = null;
        undertowEmbeddedServletContainerFactory67.setJspServlet(jspServlet70);
        java.net.InetAddress inetAddress72 = undertowEmbeddedServletContainerFactory67.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer73 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection76 = undertowEmbeddedServletContainerFactory75.getBuilderCustomizers();
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory75.workerThreads;
        undertowEmbeddedServletContainerFactory75.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file80 = null;
        undertowEmbeddedServletContainerFactory75.setAccessLogDirectory(file80);
        undertowEmbeddedServletContainerFactory75.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray84 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer85 = undertowEmbeddedServletContainerFactory75.getEmbeddedServletContainer(servletContextInitializerArray84);
        initializer73.initializers = servletContextInitializerArray84;
        io.undertow.servlet.api.DeploymentManager deploymentManager87 = undertowEmbeddedServletContainerFactory67.createDeploymentManager(servletContextInitializerArray84);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer89 = undertowEmbeddedServletContainerFactory40.getUndertowEmbeddedServletContainer(builder65, deploymentManager87, 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer91 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder38, deploymentManager87, (int) 'a');
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNull(ssl13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1800 + "'", int14 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(jspServlet29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection53);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(inetAddress72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection76);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(servletContextInitializerArray84);
        org.junit.Assert.assertNotNull(embeddedServletContainer85);
        org.junit.Assert.assertNotNull(deploymentManager87);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer89);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer91);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        undertowEmbeddedServletContainerFactory15.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray24 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray24);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory29.resourceLoader = resourceLoader32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory35.ioThreads;
        java.lang.String str37 = undertowEmbeddedServletContainerFactory35.accessLogPattern;
        undertowEmbeddedServletContainerFactory35.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory41.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray43 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory35.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory29.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray43);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader48);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(errorPageArray24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(errorPageArray43);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file15);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList19 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression22);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertNull(compression14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList19);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory12.setRegisterJspServlet(true);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file19;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory12.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList25;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList25;
        java.io.File file29 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(file29);
        org.junit.Assert.assertNotNull(xnioWorker30);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet11 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.Compression compression12 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNotNull(errorPageSet11);
        org.junit.Assert.assertNull(compression12);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getContextPath();
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.springframework.boot.context.embedded.Ssl ssl14 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Boolean boolean17 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(ssl14);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        int int10 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        undertowEmbeddedServletContainerFactory14.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory14.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo27);
        java.net.InetAddress inetAddress29 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress29);
        org.springframework.boot.context.embedded.ErrorPage errorPage31 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray32 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage31 };
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray32);
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory22.resourceLoader = resourceLoader34;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory22.setDocumentRoot(file36);
        org.springframework.core.io.ResourceLoader resourceLoader38 = null;
        undertowEmbeddedServletContainerFactory22.resourceLoader = resourceLoader38;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer44 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer46 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap45);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer48 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap47);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer42, initParameterConfiguringServletContextInitializer44, initParameterConfiguringServletContextInitializer46, initParameterConfiguringServletContextInitializer48 };
        initializer40.initializers = servletContextInitializerArray49;
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray49);
        org.springframework.core.io.ResourceLoader resourceLoader52 = null;
        undertowEmbeddedServletContainerFactory22.resourceLoader = resourceLoader52;
        undertowEmbeddedServletContainerFactory22.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress58 = null;
        undertowEmbeddedServletContainerFactory57.setAddress(inetAddress58);
        java.io.File file60 = null;
        undertowEmbeddedServletContainerFactory57.setSessionStoreDir(file60);
        org.springframework.boot.context.embedded.Compression compression62 = undertowEmbeddedServletContainerFactory57.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection65 = undertowEmbeddedServletContainerFactory64.getBuilderCustomizers();
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory64.workerThreads;
        undertowEmbeddedServletContainerFactory64.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory64.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory72 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection73 = undertowEmbeddedServletContainerFactory72.getBuilderCustomizers();
        java.lang.Integer int74 = undertowEmbeddedServletContainerFactory72.workerThreads;
        undertowEmbeddedServletContainerFactory72.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file77 = null;
        undertowEmbeddedServletContainerFactory72.setAccessLogDirectory(file77);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo79 = null;
        undertowEmbeddedServletContainerFactory72.configureErrorPages(deploymentInfo79);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer81 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray82 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer81 };
        undertowEmbeddedServletContainerFactory72.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray82);
        undertowEmbeddedServletContainerFactory64.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray82);
        undertowEmbeddedServletContainerFactory57.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray82);
        undertowEmbeddedServletContainerFactory22.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray82);
        undertowEmbeddedServletContainerFactory14.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray82);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray82);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo89 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo89);
        boolean boolean91 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo92 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo92);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        org.junit.Assert.assertNotNull(errorPageArray32);
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        org.junit.Assert.assertNull(compression62);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray82);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader39;
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress45 = null;
        undertowEmbeddedServletContainerFactory44.setAddress(inetAddress45);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.setSessionStoreDir(file47);
        org.springframework.boot.context.embedded.Compression compression49 = undertowEmbeddedServletContainerFactory44.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory51.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        undertowEmbeddedServletContainerFactory59.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file64 = null;
        undertowEmbeddedServletContainerFactory59.setAccessLogDirectory(file64);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo66 = null;
        undertowEmbeddedServletContainerFactory59.configureErrorPages(deploymentInfo66);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer68 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray69 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer68 };
        undertowEmbeddedServletContainerFactory59.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory51.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory44.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        java.io.File file75 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNull(compression49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray69);
        org.junit.Assert.assertNull(file75);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory2.createBuilder((int) (byte) 100);
        org.xnio.XnioWorker xnioWorker5 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.setWorkerThreads((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        undertowEmbeddedServletContainerFactory9.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray18 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray18);
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer26 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer28 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer30 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap29);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer26, initParameterConfiguringServletContextInitializer28, initParameterConfiguringServletContextInitializer30 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray31);
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray31);
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory9.setSessionStoreDir(file34);
        undertowEmbeddedServletContainerFactory9.setAccessLogEnabled(true);
        java.io.File file38 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList52 = undertowEmbeddedServletContainerFactory40.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory40.ioThreads = 0;
        undertowEmbeddedServletContainerFactory40.bufferSize = 100;
        java.io.File file57 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory59.ioThreads;
        java.lang.String str61 = undertowEmbeddedServletContainerFactory59.accessLogPattern;
        undertowEmbeddedServletContainerFactory59.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory65.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray67 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory65.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory59.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory40.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray67);
        java.io.File file73 = null;
        undertowEmbeddedServletContainerFactory2.setDocumentRoot(file73);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(xnioWorker5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(errorPageArray18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNull(file38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList52);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(errorPageArray67);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 10);
        undertowEmbeddedServletContainerFactory2.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory2.setRegisterDefaultServlet(false);
        int int7 = undertowEmbeddedServletContainerFactory2.getPort();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer21 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer21, initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27 };
        initializer19.initializers = servletContextInitializerArray28;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) ' ');
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList36 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList36;
        int int38 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) -1);
        io.undertow.server.handlers.resource.ResourceManager resourceManager41 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
        org.junit.Assert.assertNotNull(resourceManager41);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.Ssl ssl16 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(mimeMappings14);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNull(ssl16);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file19);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet21 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        int int22 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        int int23 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(errorPageSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1800 + "'", int22 == 1800);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.ioThreads = 32;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file17);
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getEmbeddedServletContainer(servletContextInitializerArray21);
        initializer10.initializers = servletContextInitializerArray21;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer24 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory26.ioThreads;
        java.lang.String str28 = undertowEmbeddedServletContainerFactory26.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager29 = undertowEmbeddedServletContainerFactory26.getDocumentRootResourceManager();
        boolean boolean30 = undertowEmbeddedServletContainerFactory26.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo31 = null;
        undertowEmbeddedServletContainerFactory26.configureErrorPages(deploymentInfo31);
        undertowEmbeddedServletContainerFactory26.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        java.lang.String str38 = undertowEmbeddedServletContainerFactory36.accessLogPattern;
        undertowEmbeddedServletContainerFactory36.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory42.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray44 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory42.addErrorPages(errorPageArray44);
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray44);
        undertowEmbeddedServletContainerFactory26.addErrorPages(errorPageArray44);
        java.lang.String str48 = undertowEmbeddedServletContainerFactory26.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory50.ioThreads;
        org.springframework.boot.context.embedded.Compression compression52 = null;
        undertowEmbeddedServletContainerFactory50.setCompression(compression52);
        int int54 = undertowEmbeddedServletContainerFactory50.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker55 = undertowEmbeddedServletContainerFactory50.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList56 = undertowEmbeddedServletContainerFactory50.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList56;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList56;
        java.lang.String str59 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        boolean boolean62 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        org.junit.Assert.assertNotNull(embeddedServletContainer22);
        org.junit.Assert.assertNotNull(embeddedServletContainer24);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(resourceManager29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(errorPageArray44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1800 + "'", int54 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0.0.0.0" + "'", str59, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 1);
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.net.InetAddress inetAddress11 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress11);
        java.net.InetAddress inetAddress13 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file22;
        java.net.InetAddress inetAddress24 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.Compression compression27 = undertowEmbeddedServletContainerFactory1.getCompression();
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(inetAddress24);
        org.junit.Assert.assertNull(compression27);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str6 = jarResourceManager0.jarPath;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource8 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer12 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer14 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer12, initParameterConfiguringServletContextInitializer14, initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18 };
        initializer10.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = initializer10.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory23.workerThreads;
        undertowEmbeddedServletContainerFactory23.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory23.setAccessLogDirectory(file28);
        undertowEmbeddedServletContainerFactory23.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer33 = undertowEmbeddedServletContainerFactory23.getEmbeddedServletContainer(servletContextInitializerArray32);
        initializer10.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = initializer10.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = initializer10.initializers;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 10);
        boolean boolean40 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(embeddedServletContainer33);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file9);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory12.setCompression(compression14);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory12.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList19 = undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory12.setCompression(compression20);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory12.setAccessLogDirectory(file22);
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str26 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet27 = undertowEmbeddedServletContainerFactory12.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet27);
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList19);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(errorPageSet27);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean4 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader5);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file9;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray14 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray14);
        undertowEmbeddedServletContainerFactory12.setAccessLogEnabled(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression20);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(errorPageArray14);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.springframework.boot.context.embedded.ErrorPage errorPage8 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage9 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        org.springframework.core.io.ResourceLoader resourceLoader15 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(resourceLoader15);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory12.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        java.lang.String str24 = undertowEmbeddedServletContainerFactory22.accessLogPattern;
        undertowEmbeddedServletContainerFactory22.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray30);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet35 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file36);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
        org.junit.Assert.assertNotNull(errorPageSet35);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory17.setPersistSession(false);
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory17.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory17.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection29 = undertowEmbeddedServletContainerFactory25.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo30 = null;
        undertowEmbeddedServletContainerFactory25.configureErrorPages(deploymentInfo30);
        java.net.InetAddress inetAddress32 = null;
        undertowEmbeddedServletContainerFactory25.setAddress(inetAddress32);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory25.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        undertowEmbeddedServletContainerFactory17.setMimeMappings(mimeMappings35);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings35);
        java.lang.ClassLoader classLoader38 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection29);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(mimeMappings35);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.util.concurrent.TimeUnit timeUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 1, timeUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(xnioWorker14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList11 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inetAddress10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory2.createBuilder((int) (byte) 100);
        org.xnio.XnioWorker xnioWorker5 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 10;
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(xnioWorker5);
        org.junit.Assert.assertNull(ssl10);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression19);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory11.setAccessLogDirectory(file21);
        boolean boolean23 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory11.getDocumentRoot();
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection32 = undertowEmbeddedServletContainerFactory28.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        undertowEmbeddedServletContainerFactory28.configureErrorPages(deploymentInfo33);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = undertowEmbeddedServletContainerFactory28.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression36 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression36);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory28.setAccessLogDirectory(file38);
        undertowEmbeddedServletContainerFactory28.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str42 = undertowEmbeddedServletContainerFactory28.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        int int48 = undertowEmbeddedServletContainerFactory44.getSessionTimeout();
        undertowEmbeddedServletContainerFactory44.buffersPerRegion = 100;
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory44.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer52 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray53 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer52 };
        undertowEmbeddedServletContainerFactory44.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory28.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0.0.0.0" + "'", str6, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(file24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList35);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1800 + "'", int48 == 1800);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray53);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression27);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory30.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray32 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory30.addErrorPages(errorPageArray32);
        org.springframework.boot.context.embedded.Compression compression34 = null;
        undertowEmbeddedServletContainerFactory30.setCompression(compression34);
        io.undertow.server.handlers.resource.ResourceManager resourceManager36 = undertowEmbeddedServletContainerFactory30.getDocumentRootResourceManager();
        boolean boolean37 = undertowEmbeddedServletContainerFactory30.useForwardHeaders;
        undertowEmbeddedServletContainerFactory30.workerThreads = 1800;
        org.springframework.boot.context.embedded.Ssl ssl40 = undertowEmbeddedServletContainerFactory30.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection45 = undertowEmbeddedServletContainerFactory44.getBuilderCustomizers();
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory44.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet47 = undertowEmbeddedServletContainerFactory44.getJspServlet();
        undertowEmbeddedServletContainerFactory42.setJspServlet(jspServlet47);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList59 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory50.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList59;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList61 = undertowEmbeddedServletContainerFactory50.builderCustomizers;
        undertowEmbeddedServletContainerFactory42.builderCustomizers = undertowBuilderCustomizerList61;
        undertowEmbeddedServletContainerFactory30.builderCustomizers = undertowBuilderCustomizerList61;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList61;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(errorPageArray32);
        org.junit.Assert.assertNotNull(resourceManager36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(ssl40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNotNull(jspServlet47);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList59);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList61);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.lang.String str18 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.ErrorPage errorPage19 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage20 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(xnioWorker14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl18);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0.0.0.0" + "'", str23, "0.0.0.0");
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0.0.0.0" + "'", str10, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0.0.0.0" + "'", str13, "0.0.0.0");
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.Ssl ssl11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode12 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(resourceLoader8);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray19);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        int int29 = undertowEmbeddedServletContainerFactory25.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory25.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        org.springframework.boot.context.embedded.Compression compression33 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader34;
        org.springframework.boot.context.embedded.Ssl ssl36 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.boot.context.embedded.Ssl ssl37 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1800 + "'", int29 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
        org.junit.Assert.assertNull(compression33);
        org.junit.Assert.assertNull(ssl36);
        org.junit.Assert.assertNull(ssl37);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        java.io.File file2 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file2);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.io.File file7 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(file7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager13 = undertowEmbeddedServletContainerFactory10.getDocumentRootResourceManager();
        boolean boolean14 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        undertowEmbeddedServletContainerFactory10.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory10.bufferSize = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory22.setDocumentRoot(file25);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection27 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory29.resourceLoader = resourceLoader32;
        org.springframework.core.io.ResourceLoader resourceLoader34 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43 };
        initializer35.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = initializer35.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection49 = undertowEmbeddedServletContainerFactory48.getBuilderCustomizers();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory48.workerThreads;
        undertowEmbeddedServletContainerFactory48.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory48.setAccessLogDirectory(file53);
        undertowEmbeddedServletContainerFactory48.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer58 = undertowEmbeddedServletContainerFactory48.getEmbeddedServletContainer(servletContextInitializerArray57);
        initializer35.initializers = servletContextInitializerArray57;
        io.undertow.servlet.api.DeploymentManager deploymentManager60 = undertowEmbeddedServletContainerFactory29.createDeploymentManager(servletContextInitializerArray57);
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray57);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer62 = undertowEmbeddedServletContainerFactory10.getEmbeddedServletContainer(servletContextInitializerArray57);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer63 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray57);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        io.undertow.server.HttpHandler httpHandler66 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler67 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(resourceManager13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(resourceLoader34);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        org.junit.Assert.assertNotNull(embeddedServletContainer58);
        org.junit.Assert.assertNotNull(deploymentManager60);
        org.junit.Assert.assertNotNull(embeddedServletContainer62);
        org.junit.Assert.assertNotNull(embeddedServletContainer63);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str4 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener6 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 100);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file20);
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray24 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer25 = undertowEmbeddedServletContainerFactory15.getEmbeddedServletContainer(servletContextInitializerArray24);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer26 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray24);
        org.springframework.boot.context.embedded.Ssl ssl27 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl27);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet31 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ErrorPages must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(servletContextInitializerArray24);
        org.junit.Assert.assertNotNull(embeddedServletContainer25);
        org.junit.Assert.assertNotNull(embeddedServletContainer26);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.Ssl ssl15 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl15);
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 1, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.Compression compression8 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        undertowEmbeddedServletContainerFactory1.setPort(10);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(compression8);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory10.setResourceLoader(resourceLoader11);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory10.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.Compression compression18 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression18);
        int int20 = undertowEmbeddedServletContainerFactory16.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker21 = undertowEmbeddedServletContainerFactory16.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory16.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory26.setDocumentRoot(file29);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection31 = undertowEmbeddedServletContainerFactory26.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        undertowEmbeddedServletContainerFactory33.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory33.setAccessLogDirectory(file38);
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer43 = undertowEmbeddedServletContainerFactory33.getEmbeddedServletContainer(servletContextInitializerArray42);
        undertowEmbeddedServletContainerFactory26.addInitializers(servletContextInitializerArray42);
        io.undertow.servlet.api.DeploymentManager deploymentManager45 = undertowEmbeddedServletContainerFactory16.createDeploymentManager(servletContextInitializerArray42);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer47 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder14, deploymentManager45, (-1));
        java.lang.String str48 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.springframework.boot.context.embedded.JspServlet jspServlet51 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet52 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ErrorPages must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1800 + "'", int20 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker21);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        org.junit.Assert.assertNotNull(embeddedServletContainer43);
        org.junit.Assert.assertNotNull(deploymentManager45);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(jspServlet51);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.net.InetAddress inetAddress15 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray18 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNull(inetAddress15);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        int int13 = undertowEmbeddedServletContainerFactory9.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory9.createWorker();
        boolean boolean15 = undertowEmbeddedServletContainerFactory9.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory9.bufferSize = 100;
        undertowEmbeddedServletContainerFactory9.bufferSize = 10;
        undertowEmbeddedServletContainerFactory9.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory23.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory23.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory30.accessLogDirectory = file31;
        undertowEmbeddedServletContainerFactory30.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        org.springframework.core.io.ResourceLoader resourceLoader47 = null;
        undertowEmbeddedServletContainerFactory36.setResourceLoader(resourceLoader47);
        undertowEmbeddedServletContainerFactory36.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer51 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray52 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer51 };
        undertowEmbeddedServletContainerFactory36.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray52);
        undertowEmbeddedServletContainerFactory30.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray52);
        undertowEmbeddedServletContainerFactory23.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray52);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray52);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray52);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean61 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.Ssl ssl62 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl62);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1800 + "'", int13 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray52);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory6.getBuilderCustomizers();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory6.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = undertowEmbeddedServletContainerFactory6.getJspServlet();
        undertowEmbeddedServletContainerFactory4.setJspServlet(jspServlet9);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet9);
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Boolean boolean13 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(jspServlet9);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(boolean13);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet15 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(errorPageSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.Compression compression8 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression8);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray15 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression10);
        java.net.InetAddress inetAddress12 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress12);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file20);
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 0);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList24 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        java.io.File file25 = undertowEmbeddedServletContainerFactory15.getDocumentRoot();
        undertowEmbeddedServletContainerFactory15.setIoThreads((java.lang.Integer) 100);
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory15.setDocumentRoot(file28);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer32 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer32, initParameterConfiguringServletContextInitializer34, initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38 };
        initializer30.initializers = servletContextInitializerArray39;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = initializer30.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file48 = null;
        undertowEmbeddedServletContainerFactory43.setAccessLogDirectory(file48);
        undertowEmbeddedServletContainerFactory43.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray52 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer53 = undertowEmbeddedServletContainerFactory43.getEmbeddedServletContainer(servletContextInitializerArray52);
        initializer30.initializers = servletContextInitializerArray52;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer55 = undertowEmbeddedServletContainerFactory15.getEmbeddedServletContainer(servletContextInitializerArray52);
        io.undertow.servlet.api.DeploymentManager deploymentManager56 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray52);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList24);
        org.junit.Assert.assertNull(file25);
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(servletContextInitializerArray52);
        org.junit.Assert.assertNotNull(embeddedServletContainer53);
        org.junit.Assert.assertNotNull(embeddedServletContainer55);
        org.junit.Assert.assertNotNull(deploymentManager56);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1800);
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
        org.junit.Assert.assertNull(resourceLoader13);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str7 = jarResourceManager0.jarPath;
        java.lang.String str8 = jarResourceManager0.jarPath;
        java.lang.String str9 = jarResourceManager0.jarPath;
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo47);
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file49);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress59);
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList64 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory52.accessLogPattern = "hi!";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory68 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory68.ioThreads;
        org.springframework.boot.context.embedded.Compression compression70 = null;
        undertowEmbeddedServletContainerFactory68.setCompression(compression70);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection72 = undertowEmbeddedServletContainerFactory68.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo73 = null;
        undertowEmbeddedServletContainerFactory68.configureErrorPages(deploymentInfo73);
        java.net.InetAddress inetAddress75 = null;
        undertowEmbeddedServletContainerFactory68.setAddress(inetAddress75);
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory68.workerThreads;
        undertowEmbeddedServletContainerFactory68.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList80 = undertowEmbeddedServletContainerFactory68.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList80;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList80;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection72);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList80);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.String str17 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        io.undertow.server.handlers.resource.ResourceManager resourceManager22 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(resourceManager22);
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.JspServlet jspServlet12 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setPort(1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.JspServlet jspServlet18 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory21.setAccessLogDirectory(file26);
        undertowEmbeddedServletContainerFactory21.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getEmbeddedServletContainer(servletContextInitializerArray30);
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory21.setResourceLoader(resourceLoader32);
        undertowEmbeddedServletContainerFactory21.setIoThreads((java.lang.Integer) 1800);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory21.accessLogDirectory = file36;
        org.springframework.boot.context.embedded.Ssl ssl38 = null;
        undertowEmbeddedServletContainerFactory21.setSsl(ssl38);
        org.springframework.boot.context.embedded.JspServlet jspServlet40 = undertowEmbeddedServletContainerFactory21.getJspServlet();
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory21.createBuilder(1);
        io.undertow.servlet.api.DeploymentManager deploymentManager43 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer45 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder42, deploymentManager43, (int) (short) 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(jspServlet12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(jspServlet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0.0.0.0" + "'", str19, "0.0.0.0");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(embeddedServletContainer31);
        org.junit.Assert.assertNotNull(jspServlet40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer45);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory11.setDocumentRoot(file14);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory18.workerThreads;
        undertowEmbeddedServletContainerFactory18.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setAccessLogDirectory(file23);
        undertowEmbeddedServletContainerFactory18.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer28 = undertowEmbeddedServletContainerFactory18.getEmbeddedServletContainer(servletContextInitializerArray27);
        undertowEmbeddedServletContainerFactory11.addInitializers(servletContextInitializerArray27);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray27);
        org.springframework.boot.context.embedded.Ssl ssl31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode32 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        org.junit.Assert.assertNotNull(embeddedServletContainer28);
        org.junit.Assert.assertNotNull(deploymentManager30);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection47 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        int int48 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.Ssl ssl4 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl4);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.xnio.XnioWorker xnioWorker9 = undertowEmbeddedServletContainerFactory7.createWorker();
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression10);
        java.lang.ClassLoader classLoader12 = undertowEmbeddedServletContainerFactory7.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection18 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.net.InetAddress inetAddress21 = null;
        undertowEmbeddedServletContainerFactory14.setAddress(inetAddress21);
        org.springframework.boot.context.embedded.ErrorPage errorPage23 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray24 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage23 };
        undertowEmbeddedServletContainerFactory14.addErrorPages(errorPageArray24);
        org.springframework.core.io.ResourceLoader resourceLoader26 = null;
        undertowEmbeddedServletContainerFactory14.resourceLoader = resourceLoader26;
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory14.setDocumentRoot(file28);
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory14.resourceLoader = resourceLoader30;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer40 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap39);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer34, initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38, initParameterConfiguringServletContextInitializer40 };
        initializer32.initializers = servletContextInitializerArray41;
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray41);
        undertowEmbeddedServletContainerFactory7.addInitializers(servletContextInitializerArray41);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray41);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(xnioWorker9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection18);
        org.junit.Assert.assertNotNull(errorPageArray24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.Ssl ssl12 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader16 = null;
        undertowEmbeddedServletContainerFactory15.setResourceLoader(resourceLoader16);
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory15.createBuilder((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl12, (int) 'a', builder19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(ssl5);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer10 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray11 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer10 };
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection18 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList21 = undertowEmbeddedServletContainerFactory14.deploymentInfoCustomizers;
        java.lang.String str22 = undertowEmbeddedServletContainerFactory14.getContextPath();
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory14.setDocumentRoot(file23);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection31 = undertowEmbeddedServletContainerFactory27.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        undertowEmbeddedServletContainerFactory27.configureErrorPages(deploymentInfo32);
        java.net.InetAddress inetAddress34 = null;
        undertowEmbeddedServletContainerFactory27.setAddress(inetAddress34);
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory27.workerThreads;
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file37);
        boolean boolean39 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory41.ioThreads;
        org.springframework.boot.context.embedded.Compression compression43 = null;
        undertowEmbeddedServletContainerFactory41.setCompression(compression43);
        undertowEmbeddedServletContainerFactory41.setRegisterJspServlet(true);
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory41.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet48 = undertowEmbeddedServletContainerFactory41.getJspServlet();
        undertowEmbeddedServletContainerFactory27.setJspServlet(jspServlet48);
        undertowEmbeddedServletContainerFactory27.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory53.ioThreads;
        org.springframework.boot.context.embedded.Compression compression55 = null;
        undertowEmbeddedServletContainerFactory53.setCompression(compression55);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection57 = undertowEmbeddedServletContainerFactory53.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo58 = null;
        undertowEmbeddedServletContainerFactory53.configureErrorPages(deploymentInfo58);
        java.net.InetAddress inetAddress60 = null;
        undertowEmbeddedServletContainerFactory53.setAddress(inetAddress60);
        org.springframework.boot.context.embedded.ErrorPage errorPage62 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray63 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage62 };
        undertowEmbeddedServletContainerFactory53.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray63);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList66 = undertowEmbeddedServletContainerFactory27.builderCustomizers;
        undertowEmbeddedServletContainerFactory14.builderCustomizers = undertowBuilderCustomizerList66;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList66;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo69 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo69);
        java.io.File file71 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file71);
        boolean boolean73 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode75 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray11);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection31);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNotNull(jspServlet48);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection57);
        org.junit.Assert.assertNotNull(errorPageArray63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file19 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory23.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory23.getJspServlet();
        undertowEmbeddedServletContainerFactory21.setJspServlet(jspServlet26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory31.ioThreads;
        org.springframework.boot.context.embedded.Compression compression33 = null;
        undertowEmbeddedServletContainerFactory31.setCompression(compression33);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection35 = undertowEmbeddedServletContainerFactory31.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo36 = null;
        undertowEmbeddedServletContainerFactory31.configureErrorPages(deploymentInfo36);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList38 = undertowEmbeddedServletContainerFactory31.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory29.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList40 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        undertowEmbeddedServletContainerFactory21.builderCustomizers = undertowBuilderCustomizerList40;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo42 = null;
        undertowEmbeddedServletContainerFactory21.configureErrorPages(deploymentInfo42);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader46 = null;
        undertowEmbeddedServletContainerFactory45.setResourceLoader(resourceLoader46);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray48 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList49 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList49, undertowDeploymentInfoCustomizerArray48);
        undertowEmbeddedServletContainerFactory45.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList49;
        org.springframework.boot.context.embedded.Ssl ssl52 = undertowEmbeddedServletContainerFactory45.getSsl();
        io.undertow.Undertow.Builder builder54 = undertowEmbeddedServletContainerFactory45.createBuilder((int) (short) 100);
        undertowEmbeddedServletContainerFactory45.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory58.ioThreads;
        org.springframework.boot.context.embedded.Compression compression60 = null;
        undertowEmbeddedServletContainerFactory58.setCompression(compression60);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection62 = undertowEmbeddedServletContainerFactory58.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo63 = null;
        undertowEmbeddedServletContainerFactory58.configureErrorPages(deploymentInfo63);
        java.net.InetAddress inetAddress65 = null;
        undertowEmbeddedServletContainerFactory58.setAddress(inetAddress65);
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory58.workerThreads;
        undertowEmbeddedServletContainerFactory58.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList70 = undertowEmbeddedServletContainerFactory58.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory58.ioThreads = 0;
        undertowEmbeddedServletContainerFactory58.bufferSize = 100;
        java.io.File file75 = undertowEmbeddedServletContainerFactory58.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory77 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory77.ioThreads;
        java.lang.String str79 = undertowEmbeddedServletContainerFactory77.accessLogPattern;
        undertowEmbeddedServletContainerFactory77.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory83 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int84 = undertowEmbeddedServletContainerFactory83.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray85 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory83.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory77.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory58.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory45.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray85);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection92 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0.0.0.0" + "'", str16, "0.0.0.0");
        org.junit.Assert.assertNull(file19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList40);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(ssl52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection62);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList70);
        org.junit.Assert.assertNull(file75);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNotNull(errorPageArray85);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection92);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl14);
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean20 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression7);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        org.junit.Assert.assertNotNull(xnioWorker4);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory10.setResourceLoader(resourceLoader11);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList14, undertowDeploymentInfoCustomizerArray13);
        undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList14;
        undertowEmbeddedServletContainerFactory10.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory10.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        boolean boolean22 = undertowEmbeddedServletContainerFactory10.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory24.getBuilderCustomizers();
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader27;
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory24.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader30;
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        io.undertow.servlet.api.DeploymentManager deploymentManager45 = undertowEmbeddedServletContainerFactory24.createDeploymentManager(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray43);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray43);
        org.xnio.XnioWorker xnioWorker48 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(resourceLoader29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNotNull(deploymentManager45);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
        org.junit.Assert.assertNotNull(xnioWorker48);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress9 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress9);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) 'a');
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression13);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.Compression compression18 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression18);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection20 = undertowEmbeddedServletContainerFactory16.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo21);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList23 = undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression24);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file26);
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str30 = undertowEmbeddedServletContainerFactory16.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet31 = undertowEmbeddedServletContainerFactory16.getErrorPages();
        boolean boolean32 = undertowEmbeddedServletContainerFactory16.accessLogEnabled;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList33 = undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList33;
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file35;
        boolean boolean37 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        io.undertow.server.handlers.resource.ResourceManager resourceManager38 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection20);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList23);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(errorPageSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(resourceManager38);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.junit.Assert.assertNotNull(mimeMappings8);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) -1);
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        org.junit.Assert.assertNull(resourceLoader13);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.ioThreads;
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 1);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 100);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        org.xnio.XnioWorker xnioWorker14 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress25);
        org.springframework.boot.context.embedded.ErrorPage errorPage27 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray28 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage27 };
        undertowEmbeddedServletContainerFactory18.addErrorPages(errorPageArray28);
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory18.resourceLoader = resourceLoader30;
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory18.setDocumentRoot(file32);
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory18.resourceLoader = resourceLoader34;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer40 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer44 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap43);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer38, initParameterConfiguringServletContextInitializer40, initParameterConfiguringServletContextInitializer42, initParameterConfiguringServletContextInitializer44 };
        initializer36.initializers = servletContextInitializerArray45;
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray45);
        undertowEmbeddedServletContainerFactory18.useForwardHeaders = false;
        org.springframework.boot.context.embedded.JspServlet jspServlet50 = undertowEmbeddedServletContainerFactory18.getJspServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory58.ioThreads;
        org.springframework.boot.context.embedded.Compression compression60 = null;
        undertowEmbeddedServletContainerFactory58.setCompression(compression60);
        undertowEmbeddedServletContainerFactory58.setRegisterJspServlet(true);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory58.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet65 = undertowEmbeddedServletContainerFactory58.getJspServlet();
        undertowEmbeddedServletContainerFactory52.setJspServlet(jspServlet65);
        java.io.File file67 = null;
        undertowEmbeddedServletContainerFactory52.setDocumentRoot(file67);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList69 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList69;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList69;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(xnioWorker14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(errorPageArray28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(jspServlet50);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(jspServlet65);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList69);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 1);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray4 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.close();
        boolean boolean12 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean13 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "0.0.0.0";
        boolean boolean17 = jarResourceManager0.isResourceChangeListenerSupported();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        org.springframework.boot.context.embedded.Ssl ssl15 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory1.workerThreads;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(ssl15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.setPort(10);
        undertowEmbeddedServletContainerFactory1.setPort(10);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file16;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        java.io.File file20 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file20);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        org.junit.Assert.assertNotNull(mimeMappings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory15.setDisplayName("hi!");
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory15.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory23.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory27.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet30 = null;
        undertowEmbeddedServletContainerFactory27.setJspServlet(jspServlet30);
        java.net.InetAddress inetAddress32 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory35.setAccessLogDirectory(file40);
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getEmbeddedServletContainer(servletContextInitializerArray44);
        initializer33.initializers = servletContextInitializerArray44;
        io.undertow.servlet.api.DeploymentManager deploymentManager47 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray44);
        undertowEmbeddedServletContainerFactory23.addInitializers(servletContextInitializerArray44);
        io.undertow.servlet.api.DeploymentManager deploymentManager49 = undertowEmbeddedServletContainerFactory15.createDeploymentManager(servletContextInitializerArray44);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray44);
        java.lang.ClassLoader classLoader51 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        java.io.File file52 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inetAddress32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(embeddedServletContainer45);
        org.junit.Assert.assertNotNull(deploymentManager47);
        org.junit.Assert.assertNotNull(deploymentManager49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNull(file52);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file3);
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader11 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(compression5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0.0.0" + "'", str8, "0.0.0.0");
        org.junit.Assert.assertNull(resourceLoader11);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        org.xnio.XnioWorker xnioWorker12 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(xnioWorker12);
        org.junit.Assert.assertNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 10);
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 1);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList9 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory8.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory8.setRegisterJspServlet(true);
        boolean boolean14 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet17 = undertowEmbeddedServletContainerFactory8.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory19.setCompression(compression21);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection23 = undertowEmbeddedServletContainerFactory19.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory19.configureErrorPages(deploymentInfo24);
        java.net.InetAddress inetAddress26 = null;
        undertowEmbeddedServletContainerFactory19.setAddress(inetAddress26);
        io.undertow.server.handlers.resource.ResourceManager resourceManager28 = undertowEmbeddedServletContainerFactory19.getDocumentRootResourceManager();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory19.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory31.setPersistSession(false);
        undertowEmbeddedServletContainerFactory31.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList36 = undertowEmbeddedServletContainerFactory31.builderCustomizers;
        undertowEmbeddedServletContainerFactory19.builderCustomizers = undertowBuilderCustomizerList36;
        undertowEmbeddedServletContainerFactory19.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory19.setIoThreads((java.lang.Integer) 1800);
        int int42 = undertowEmbeddedServletContainerFactory19.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer45 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap44);
        java.util.Map<java.lang.String, java.lang.String> strMap46 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer47 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer49 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap48);
        java.util.Map<java.lang.String, java.lang.String> strMap50 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer51 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap50);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray52 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer45, initParameterConfiguringServletContextInitializer47, initParameterConfiguringServletContextInitializer49, initParameterConfiguringServletContextInitializer51 };
        initializer43.initializers = servletContextInitializerArray52;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray54 = initializer43.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection57 = undertowEmbeddedServletContainerFactory56.getBuilderCustomizers();
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory56.workerThreads;
        java.io.File file59 = null;
        undertowEmbeddedServletContainerFactory56.setDocumentRoot(file59);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection61 = undertowEmbeddedServletContainerFactory56.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection64 = undertowEmbeddedServletContainerFactory63.getBuilderCustomizers();
        java.lang.Integer int65 = undertowEmbeddedServletContainerFactory63.workerThreads;
        undertowEmbeddedServletContainerFactory63.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file68 = null;
        undertowEmbeddedServletContainerFactory63.setAccessLogDirectory(file68);
        undertowEmbeddedServletContainerFactory63.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray72 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer73 = undertowEmbeddedServletContainerFactory63.getEmbeddedServletContainer(servletContextInitializerArray72);
        undertowEmbeddedServletContainerFactory56.addInitializers(servletContextInitializerArray72);
        initializer43.initializers = servletContextInitializerArray72;
        undertowEmbeddedServletContainerFactory19.addInitializers(servletContextInitializerArray72);
        io.undertow.servlet.api.DeploymentManager deploymentManager77 = undertowEmbeddedServletContainerFactory8.createDeploymentManager(servletContextInitializerArray72);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer78 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray72);
        undertowEmbeddedServletContainerFactory1.bufferSize = 52;
        org.junit.Assert.assertNotNull(resourceManager6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(errorPageSet17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection23);
        org.junit.Assert.assertNotNull(resourceManager28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertNotNull(servletContextInitializerArray52);
        org.junit.Assert.assertNotNull(servletContextInitializerArray54);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection61);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(servletContextInitializerArray72);
        org.junit.Assert.assertNotNull(embeddedServletContainer73);
        org.junit.Assert.assertNotNull(deploymentManager77);
        org.junit.Assert.assertNotNull(embeddedServletContainer78);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer21 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer21, initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27 };
        initializer19.initializers = servletContextInitializerArray28;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.String str36 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo37 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0.0.0.0" + "'", str36, "0.0.0.0");
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo11);
        io.undertow.server.handlers.resource.ResourceManager resourceManager13 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory16.setAddress(inetAddress17);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory16.setSessionStoreDir(file19);
        undertowEmbeddedServletContainerFactory16.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory16.setBufferSize((java.lang.Integer) 0);
        java.lang.String str25 = undertowEmbeddedServletContainerFactory16.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        int int31 = undertowEmbeddedServletContainerFactory27.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression32 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression32);
        undertowEmbeddedServletContainerFactory27.buffersPerRegion = 0;
        undertowEmbeddedServletContainerFactory27.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory39.ioThreads;
        org.springframework.boot.context.embedded.Compression compression41 = null;
        undertowEmbeddedServletContainerFactory39.setCompression(compression41);
        int int43 = undertowEmbeddedServletContainerFactory39.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker44 = undertowEmbeddedServletContainerFactory39.createWorker();
        boolean boolean45 = undertowEmbeddedServletContainerFactory39.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory39.bufferSize = 100;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList48 = undertowEmbeddedServletContainerFactory39.builderCustomizers;
        undertowEmbeddedServletContainerFactory39.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        java.lang.String str54 = undertowEmbeddedServletContainerFactory52.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager55 = undertowEmbeddedServletContainerFactory52.getDocumentRootResourceManager();
        boolean boolean56 = undertowEmbeddedServletContainerFactory52.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory52.setRegisterJspServlet(true);
        java.io.File file59 = null;
        undertowEmbeddedServletContainerFactory52.accessLogDirectory = file59;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection61 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory52.accessLogPattern = "";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection66 = undertowEmbeddedServletContainerFactory65.getBuilderCustomizers();
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory65.workerThreads;
        java.io.File file68 = null;
        undertowEmbeddedServletContainerFactory65.setDocumentRoot(file68);
        boolean boolean70 = undertowEmbeddedServletContainerFactory65.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory72 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection73 = undertowEmbeddedServletContainerFactory72.getBuilderCustomizers();
        java.lang.Integer int74 = undertowEmbeddedServletContainerFactory72.workerThreads;
        java.io.File file75 = null;
        undertowEmbeddedServletContainerFactory72.setDocumentRoot(file75);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection77 = undertowEmbeddedServletContainerFactory72.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory79 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection80 = undertowEmbeddedServletContainerFactory79.getBuilderCustomizers();
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory79.workerThreads;
        undertowEmbeddedServletContainerFactory79.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file84 = null;
        undertowEmbeddedServletContainerFactory79.setAccessLogDirectory(file84);
        undertowEmbeddedServletContainerFactory79.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray88 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer89 = undertowEmbeddedServletContainerFactory79.getEmbeddedServletContainer(servletContextInitializerArray88);
        undertowEmbeddedServletContainerFactory72.addInitializers(servletContextInitializerArray88);
        io.undertow.servlet.api.DeploymentManager deploymentManager91 = undertowEmbeddedServletContainerFactory65.createDeploymentManager(servletContextInitializerArray88);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer92 = undertowEmbeddedServletContainerFactory52.getEmbeddedServletContainer(servletContextInitializerArray88);
        io.undertow.servlet.api.DeploymentManager deploymentManager93 = undertowEmbeddedServletContainerFactory39.createDeploymentManager(servletContextInitializerArray88);
        undertowEmbeddedServletContainerFactory27.addInitializers(servletContextInitializerArray88);
        io.undertow.servlet.api.DeploymentManager deploymentManager95 = undertowEmbeddedServletContainerFactory16.createDeploymentManager(servletContextInitializerArray88);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray88);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(resourceManager13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1800 + "'", int31 == 1800);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1800 + "'", int43 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList48);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(resourceManager55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection61);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection66);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection73);
        org.junit.Assert.assertNull(int74);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection77);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection80);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNotNull(servletContextInitializerArray88);
        org.junit.Assert.assertNotNull(embeddedServletContainer89);
        org.junit.Assert.assertNotNull(deploymentManager91);
        org.junit.Assert.assertNotNull(embeddedServletContainer92);
        org.junit.Assert.assertNotNull(deploymentManager93);
        org.junit.Assert.assertNotNull(deploymentManager95);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression15);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.io.File file18 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(file18);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        java.lang.String str15 = undertowEmbeddedServletContainerFactory13.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager16 = undertowEmbeddedServletContainerFactory13.getDocumentRootResourceManager();
        boolean boolean17 = undertowEmbeddedServletContainerFactory13.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory13.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory13.setBufferSize((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory23.ioThreads;
        org.springframework.boot.context.embedded.Compression compression25 = null;
        undertowEmbeddedServletContainerFactory23.setCompression(compression25);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection27 = undertowEmbeddedServletContainerFactory23.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo28 = null;
        undertowEmbeddedServletContainerFactory23.configureErrorPages(deploymentInfo28);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList30 = undertowEmbeddedServletContainerFactory23.deploymentInfoCustomizers;
        java.lang.String str31 = undertowEmbeddedServletContainerFactory23.getContextPath();
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory23.setDocumentRoot(file32);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory36.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo41);
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress43);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory36.workerThreads;
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file46);
        boolean boolean48 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory50.ioThreads;
        org.springframework.boot.context.embedded.Compression compression52 = null;
        undertowEmbeddedServletContainerFactory50.setCompression(compression52);
        undertowEmbeddedServletContainerFactory50.setRegisterJspServlet(true);
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory50.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet57 = undertowEmbeddedServletContainerFactory50.getJspServlet();
        undertowEmbeddedServletContainerFactory36.setJspServlet(jspServlet57);
        undertowEmbeddedServletContainerFactory36.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory62.ioThreads;
        org.springframework.boot.context.embedded.Compression compression64 = null;
        undertowEmbeddedServletContainerFactory62.setCompression(compression64);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection66 = undertowEmbeddedServletContainerFactory62.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo67 = null;
        undertowEmbeddedServletContainerFactory62.configureErrorPages(deploymentInfo67);
        java.net.InetAddress inetAddress69 = null;
        undertowEmbeddedServletContainerFactory62.setAddress(inetAddress69);
        org.springframework.boot.context.embedded.ErrorPage errorPage71 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray72 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage71 };
        undertowEmbeddedServletContainerFactory62.addErrorPages(errorPageArray72);
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray72);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList75 = undertowEmbeddedServletContainerFactory36.builderCustomizers;
        undertowEmbeddedServletContainerFactory23.builderCustomizers = undertowBuilderCustomizerList75;
        undertowEmbeddedServletContainerFactory13.builderCustomizers = undertowBuilderCustomizerList75;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory79 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection80 = undertowEmbeddedServletContainerFactory79.getBuilderCustomizers();
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory79.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader82 = null;
        undertowEmbeddedServletContainerFactory79.resourceLoader = resourceLoader82;
        org.springframework.core.io.ResourceLoader resourceLoader84 = undertowEmbeddedServletContainerFactory79.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader85 = null;
        undertowEmbeddedServletContainerFactory79.resourceLoader = resourceLoader85;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray87 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList88 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList88, undertowBuilderCustomizerArray87);
        undertowEmbeddedServletContainerFactory79.builderCustomizers = undertowBuilderCustomizerList88;
        undertowEmbeddedServletContainerFactory79.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.Compression compression93 = null;
        undertowEmbeddedServletContainerFactory79.setCompression(compression93);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList95 = undertowEmbeddedServletContainerFactory79.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList95;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList95;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(resourceManager16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection27);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(jspServlet57);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection66);
        org.junit.Assert.assertNotNull(errorPageArray72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList75);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection80);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNull(resourceLoader84);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList95);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Compression compression4 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory6.setJspServlet(jspServlet9);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory6.resourceLoader = resourceLoader11;
        int int13 = undertowEmbeddedServletContainerFactory6.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        initializer14.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = initializer14.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer14.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection41 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo42 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(compression4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection41);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.lang.Boolean boolean6 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo9 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo9);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(boolean6);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        int int22 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.Ssl ssl23 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(ssl19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNull(ssl23);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings19);
        boolean boolean21 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 32);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        java.lang.String str27 = undertowEmbeddedServletContainerFactory25.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager28 = undertowEmbeddedServletContainerFactory25.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory25.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList33 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file34);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory25.setAccessLogDirectory(file36);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList38 = undertowEmbeddedServletContainerFactory25.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList38;
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file40;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(file11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNotNull(mimeMappings19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(resourceManager28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList38);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        undertowEmbeddedServletContainerFactory10.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray15 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList16 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList16, undertowBuilderCustomizerArray15);
        undertowEmbeddedServletContainerFactory10.builderCustomizers = undertowBuilderCustomizerList16;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        undertowEmbeddedServletContainerFactory20.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray25 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory20.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory10.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1800);
        org.xnio.XnioWorker xnioWorker33 = undertowEmbeddedServletContainerFactory1.createWorker();
        io.undertow.server.handlers.resource.ResourceManager resourceManager34 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray25);
        org.junit.Assert.assertNotNull(xnioWorker33);
        org.junit.Assert.assertNotNull(resourceManager34);
        org.junit.Assert.assertNotNull(mimeMappings35);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory8.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        java.lang.String str30 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.lang.String str31 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0.0.0.0" + "'", str31, "0.0.0.0");
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file8);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(resourceLoader14);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        int int18 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression19 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1800 + "'", int18 == 1800);
        org.junit.Assert.assertNull(compression19);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        java.lang.String str15 = undertowEmbeddedServletContainerFactory13.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager16 = undertowEmbeddedServletContainerFactory13.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory13.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory13.setBufferSize((java.lang.Integer) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList21 = undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList21;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(resourceManager16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        org.springframework.core.io.ResourceLoader resourceLoader49 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        boolean boolean56 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNull(resourceLoader49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file4 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 52);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(file4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jspServlet8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }
}

