import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory6.getBuilderCustomizers();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory6.workerThreads;
        undertowEmbeddedServletContainerFactory6.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory6.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray15);
        initializer4.initializers = servletContextInitializerArray15;
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray15);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file21 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(servletContextInitializerArray15);
        org.junit.Assert.assertNotNull(embeddedServletContainer16);
        org.junit.Assert.assertNotNull(deploymentManager18);
        org.junit.Assert.assertNull(file21);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 10;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.close();
        java.lang.String str12 = jarResourceManager0.jarPath;
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener13 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.0.0.0" + "'", str12, "0.0.0.0");
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        java.lang.Boolean boolean16 = undertowEmbeddedServletContainerFactory11.directBuffers;
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory20.resourceLoader = resourceLoader23;
        org.springframework.core.io.ResourceLoader resourceLoader25 = undertowEmbeddedServletContainerFactory20.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer28 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer30 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap29);
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer32 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer28, initParameterConfiguringServletContextInitializer30, initParameterConfiguringServletContextInitializer32, initParameterConfiguringServletContextInitializer34 };
        initializer26.initializers = servletContextInitializerArray35;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = initializer26.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory39.setAccessLogDirectory(file44);
        undertowEmbeddedServletContainerFactory39.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer49 = undertowEmbeddedServletContainerFactory39.getEmbeddedServletContainer(servletContextInitializerArray48);
        initializer26.initializers = servletContextInitializerArray48;
        io.undertow.servlet.api.DeploymentManager deploymentManager51 = undertowEmbeddedServletContainerFactory20.createDeploymentManager(servletContextInitializerArray48);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer52 = undertowEmbeddedServletContainerFactory11.getEmbeddedServletContainer(servletContextInitializerArray48);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer53 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray48);
        java.lang.Boolean boolean54 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        org.junit.Assert.assertNull(ssl8);
        org.junit.Assert.assertNull(resourceLoader9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(resourceLoader25);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        org.junit.Assert.assertNotNull(embeddedServletContainer49);
        org.junit.Assert.assertNotNull(deploymentManager51);
        org.junit.Assert.assertNotNull(embeddedServletContainer52);
        org.junit.Assert.assertNotNull(embeddedServletContainer53);
        org.junit.Assert.assertNull(boolean54);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet13 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(errorPageSet13);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress20 = null;
        undertowEmbeddedServletContainerFactory19.setAddress(inetAddress20);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory19.setSessionStoreDir(file22);
        undertowEmbeddedServletContainerFactory19.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings26 = undertowEmbeddedServletContainerFactory19.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings26);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 100);
        java.lang.Boolean boolean30 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(mimeMappings26);
        org.junit.Assert.assertNull(boolean30);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader12;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList14 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        io.undertow.server.handlers.resource.ResourceManager resourceManager16 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.String str17 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory19.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet22 = null;
        undertowEmbeddedServletContainerFactory19.setJspServlet(jspServlet22);
        java.net.InetAddress inetAddress24 = undertowEmbeddedServletContainerFactory19.getAddress();
        boolean boolean25 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        undertowEmbeddedServletContainerFactory19.setAccessLogPattern("0.0.0.0");
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory19.bufferSize;
        java.lang.String str29 = undertowEmbeddedServletContainerFactory19.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory31.setResourceLoader(resourceLoader32);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList35, undertowDeploymentInfoCustomizerArray34);
        undertowEmbeddedServletContainerFactory31.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList35;
        undertowEmbeddedServletContainerFactory31.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory31.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection42 = undertowEmbeddedServletContainerFactory31.getDeploymentInfoCustomizers();
        boolean boolean43 = undertowEmbeddedServletContainerFactory31.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory45.ioThreads;
        org.springframework.boot.context.embedded.Compression compression47 = null;
        undertowEmbeddedServletContainerFactory45.setCompression(compression47);
        undertowEmbeddedServletContainerFactory45.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray54 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory52.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory45.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory31.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory19.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray54);
        java.net.InetAddress inetAddress60 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress60);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(resourceManager16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(inetAddress24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(errorPageArray54);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean14 = undertowEmbeddedServletContainerFactory13.directBuffers;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory13.setSessionStoreDir(file15);
        undertowEmbeddedServletContainerFactory13.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet23 = undertowEmbeddedServletContainerFactory20.getJspServlet();
        undertowEmbeddedServletContainerFactory13.setJspServlet(jspServlet23);
        org.springframework.boot.context.embedded.Ssl ssl25 = undertowEmbeddedServletContainerFactory13.getSsl();
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory13.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet26);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        io.undertow.Undertow.Builder builder31 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) -1);
        java.lang.Class<?> wildcardClass35 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(jspServlet23);
        org.junit.Assert.assertNull(ssl25);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager13 = undertowEmbeddedServletContainerFactory10.getDocumentRootResourceManager();
        boolean boolean14 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory10.setRegisterJspServlet(true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file17;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet19 = undertowEmbeddedServletContainerFactory10.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet19);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(resourceManager13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(errorPageSet19);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 0);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(xnioWorker11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo13);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression16);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory24.setCompression(compression26);
        int int28 = undertowEmbeddedServletContainerFactory24.getSessionTimeout();
        undertowEmbeddedServletContainerFactory24.buffersPerRegion = 100;
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer32 };
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1800 + "'", int28 == 1800);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray33);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer24 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap23);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22, initParameterConfiguringServletContextInitializer24 };
        initializer16.initializers = servletContextInitializerArray25;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = initializer16.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory29.setAccessLogDirectory(file34);
        undertowEmbeddedServletContainerFactory29.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory29.getEmbeddedServletContainer(servletContextInitializerArray38);
        initializer16.initializers = servletContextInitializerArray38;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = initializer16.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory43.ioThreads;
        org.springframework.boot.context.embedded.Compression compression45 = null;
        undertowEmbeddedServletContainerFactory43.setCompression(compression45);
        undertowEmbeddedServletContainerFactory43.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory50.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray52 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory50.addErrorPages(errorPageArray52);
        undertowEmbeddedServletContainerFactory43.addErrorPages(errorPageArray52);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection57 = undertowEmbeddedServletContainerFactory56.getBuilderCustomizers();
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory56.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer60 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer62 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer64 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap63);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer60, initParameterConfiguringServletContextInitializer62, initParameterConfiguringServletContextInitializer64 };
        undertowEmbeddedServletContainerFactory56.addInitializers(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory43.addInitializers(servletContextInitializerArray65);
        initializer16.initializers = servletContextInitializerArray65;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray69 = initializer16.initializers;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray69);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection71 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(errorPageArray52);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        org.junit.Assert.assertNotNull(servletContextInitializerArray69);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection71);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        io.undertow.Undertow.Builder builder10 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 100);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet11 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo12);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(ssl8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorPageSet11);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file3);
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.net.InetAddress inetAddress6 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.ErrorPage errorPage11 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage12 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader9);
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        io.undertow.server.HttpHandler httpHandler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler13 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        java.lang.String str4 = jarResourceManager0.jarPath;
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource7 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        boolean boolean35 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean36 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        boolean boolean37 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Compression compression38 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.JspServlet jspServlet39 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(compression38);
        org.junit.Assert.assertNull(jspServlet39);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1800);
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory1.ioThreads;
        int int17 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
        org.junit.Assert.assertNull(resourceLoader13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1800 + "'", int17 == 1800);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader8);
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress15);
        io.undertow.server.HttpHandler httpHandler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler18 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str3 = jarResourceManager0.jarPath;
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener4 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        java.io.File file16 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file17 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 10);
        undertowEmbeddedServletContainerFactory19.workerThreads = (-1);
        undertowEmbeddedServletContainerFactory19.bufferSize = 0;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setUseForwardHeaders(false);
        java.lang.String str34 = undertowEmbeddedServletContainerFactory29.getDisplayName();
        undertowEmbeddedServletContainerFactory29.setBufferSize((java.lang.Integer) 1);
        boolean boolean37 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setUseForwardHeaders(false);
        java.lang.String str44 = undertowEmbeddedServletContainerFactory39.getDisplayName();
        undertowEmbeddedServletContainerFactory39.setBufferSize((java.lang.Integer) 1);
        boolean boolean47 = undertowEmbeddedServletContainerFactory39.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory49.getBuilderCustomizers();
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray54 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory49.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        undertowEmbeddedServletContainerFactory39.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        undertowEmbeddedServletContainerFactory29.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        undertowEmbeddedServletContainerFactory26.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        undertowEmbeddedServletContainerFactory19.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray54);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertNull(file17);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray54);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder26, deploymentManager27, (int) '4');
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory10.setSessionStoreDir(file30);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        int int33 = undertowEmbeddedServletContainerFactory10.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory35.setAccessLogDirectory(file40);
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getEmbeddedServletContainer(servletContextInitializerArray44);
        org.springframework.core.io.ResourceLoader resourceLoader46 = null;
        undertowEmbeddedServletContainerFactory35.setResourceLoader(resourceLoader46);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection53 = undertowEmbeddedServletContainerFactory49.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory49.configureErrorPages(deploymentInfo54);
        java.net.InetAddress inetAddress56 = null;
        undertowEmbeddedServletContainerFactory49.setAddress(inetAddress56);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory49.workerThreads;
        java.io.File file59 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file59);
        boolean boolean61 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        org.springframework.boot.context.embedded.Compression compression65 = null;
        undertowEmbeddedServletContainerFactory63.setCompression(compression65);
        undertowEmbeddedServletContainerFactory63.setRegisterJspServlet(true);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory63.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet70 = undertowEmbeddedServletContainerFactory63.getJspServlet();
        undertowEmbeddedServletContainerFactory49.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory35.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory10.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet70);
        boolean boolean75 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.Class<?> wildcardClass76 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(mimeMappings20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(embeddedServletContainer45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection53);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(jspServlet70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        io.undertow.server.handlers.resource.ResourceManager resourceManager7 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.Compression compression8 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression8);
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        java.lang.String str15 = undertowEmbeddedServletContainerFactory13.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager16 = undertowEmbeddedServletContainerFactory13.getDocumentRootResourceManager();
        boolean boolean17 = undertowEmbeddedServletContainerFactory13.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory13.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory13.setAccessLogPattern("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory23.workerThreads;
        undertowEmbeddedServletContainerFactory23.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory23.setAccessLogDirectory(file28);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo30 = null;
        undertowEmbeddedServletContainerFactory23.configureErrorPages(deploymentInfo30);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer32 };
        undertowEmbeddedServletContainerFactory23.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray33);
        undertowEmbeddedServletContainerFactory13.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray33);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray33);
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader37);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(resourceManager7);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(resourceManager16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray33);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.io.File file5 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Initializers must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0.0.0.0" + "'", str10, "0.0.0.0");
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection18 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList21 = undertowEmbeddedServletContainerFactory14.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader22 = undertowEmbeddedServletContainerFactory14.getServletClassLoader();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory14.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setUseForwardHeaders(false);
        io.undertow.Undertow.Builder builder31 = undertowEmbeddedServletContainerFactory25.createBuilder(0);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory14.getUndertowEmbeddedServletContainer(builder31, deploymentManager32, (int) (byte) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection42 = undertowEmbeddedServletContainerFactory41.getBuilderCustomizers();
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory41.workerThreads;
        undertowEmbeddedServletContainerFactory41.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory41.setAccessLogDirectory(file46);
        undertowEmbeddedServletContainerFactory41.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray50 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer51 = undertowEmbeddedServletContainerFactory41.getEmbeddedServletContainer(servletContextInitializerArray50);
        initializer39.initializers = servletContextInitializerArray50;
        io.undertow.servlet.api.DeploymentManager deploymentManager53 = undertowEmbeddedServletContainerFactory36.createDeploymentManager(servletContextInitializerArray50);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer55 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder31, deploymentManager53, 1800);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(servletContextInitializerArray50);
        org.junit.Assert.assertNotNull(embeddedServletContainer51);
        org.junit.Assert.assertNotNull(deploymentManager53);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer55);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 10);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.Ssl ssl16 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(ssl16);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        int int11 = undertowEmbeddedServletContainerFactory7.getSessionTimeout();
        undertowEmbeddedServletContainerFactory7.buffersPerRegion = 100;
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory7.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer15 };
        undertowEmbeddedServletContainerFactory7.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression21);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1800 + "'", int11 == 1800);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection19 = undertowEmbeddedServletContainerFactory15.getDeploymentInfoCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory15.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        java.lang.String str24 = undertowEmbeddedServletContainerFactory22.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager25 = undertowEmbeddedServletContainerFactory22.getDocumentRootResourceManager();
        boolean boolean26 = undertowEmbeddedServletContainerFactory22.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory22.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory22.setAccessLogPattern("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection33 = undertowEmbeddedServletContainerFactory32.getBuilderCustomizers();
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory32.workerThreads;
        undertowEmbeddedServletContainerFactory32.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory32.setAccessLogDirectory(file37);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo39 = null;
        undertowEmbeddedServletContainerFactory32.configureErrorPages(deploymentInfo39);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer41 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray42 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer41 };
        undertowEmbeddedServletContainerFactory32.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray42);
        undertowEmbeddedServletContainerFactory22.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray42);
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray42);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray42);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory48.ioThreads;
        java.lang.String str50 = undertowEmbeddedServletContainerFactory48.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager51 = undertowEmbeddedServletContainerFactory48.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory48.setJspServletClassName("hi!");
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory48.ioThreads;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList55 = undertowEmbeddedServletContainerFactory48.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList55;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(resourceManager25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray42);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(resourceManager51);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList55);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory10.setDocumentRoot(file12);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory10.bufferSize;
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress15);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean19 = undertowEmbeddedServletContainerFactory18.directBuffers;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file20);
        undertowEmbeddedServletContainerFactory18.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet28 = undertowEmbeddedServletContainerFactory25.getJspServlet();
        undertowEmbeddedServletContainerFactory18.setJspServlet(jspServlet28);
        undertowEmbeddedServletContainerFactory10.setJspServlet(jspServlet28);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet28);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNotNull(jspServlet8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(jspServlet28);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo15);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.close();
        java.lang.Class<?> wildcardClass10 = jarResourceManager0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0.0.0.0" + "'", str5, "0.0.0.0");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory8.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory35.setDocumentRoot(file38);
        boolean boolean40 = undertowEmbeddedServletContainerFactory35.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory42.setDocumentRoot(file45);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection47 = undertowEmbeddedServletContainerFactory42.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory49.getBuilderCustomizers();
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file54);
        undertowEmbeddedServletContainerFactory49.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray58 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer59 = undertowEmbeddedServletContainerFactory49.getEmbeddedServletContainer(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory42.addInitializers(servletContextInitializerArray58);
        io.undertow.servlet.api.DeploymentManager deploymentManager61 = undertowEmbeddedServletContainerFactory35.createDeploymentManager(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray58);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory1.bufferSize;
        boolean boolean64 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1);
        java.lang.String str67 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file68 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file68);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection47);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(servletContextInitializerArray58);
        org.junit.Assert.assertNotNull(embeddedServletContainer59);
        org.junit.Assert.assertNotNull(deploymentManager61);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        undertowEmbeddedServletContainerFactory1.workerThreads = 97;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file15;
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        org.junit.Assert.assertNull(ssl8);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.xnio.XnioWorker xnioWorker9 = undertowEmbeddedServletContainerFactory1.createWorker();
        int int10 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(xnioWorker9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader10);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file19);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet21 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.Boolean boolean22 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 100);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNotNull(errorPageSet21);
        org.junit.Assert.assertNull(boolean22);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.xnio.XnioWorker xnioWorker12 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(xnioWorker12);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        java.lang.String str24 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0.0.0.0" + "'", str24, "0.0.0.0");
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList2;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray8 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        io.undertow.Undertow.Builder builder41 = undertowEmbeddedServletContainerFactory1.createBuilder(0);
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory1.createBuilder((int) ' ');
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setUseForwardHeaders(false);
        java.lang.String str14 = undertowEmbeddedServletContainerFactory9.getDisplayName();
        boolean boolean15 = undertowEmbeddedServletContainerFactory9.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet16 = undertowEmbeddedServletContainerFactory9.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        java.lang.String str20 = undertowEmbeddedServletContainerFactory18.accessLogPattern;
        undertowEmbeddedServletContainerFactory18.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray23 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList24, undertowBuilderCustomizerArray23);
        undertowEmbeddedServletContainerFactory18.builderCustomizers = undertowBuilderCustomizerList24;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection29 = undertowEmbeddedServletContainerFactory28.getBuilderCustomizers();
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory28.workerThreads;
        undertowEmbeddedServletContainerFactory28.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory28.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory18.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory9.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection39 = undertowEmbeddedServletContainerFactory38.getBuilderCustomizers();
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory38.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer44 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer46 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap45);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer42, initParameterConfiguringServletContextInitializer44, initParameterConfiguringServletContextInitializer46 };
        undertowEmbeddedServletContainerFactory38.addInitializers(servletContextInitializerArray47);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        undertowEmbeddedServletContainerFactory50.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory50.setAccessLogDirectory(file55);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList57 = undertowEmbeddedServletContainerFactory50.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet62 = undertowEmbeddedServletContainerFactory59.getJspServlet();
        undertowEmbeddedServletContainerFactory50.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory38.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory9.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet62);
        java.net.InetAddress inetAddress67 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress67);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(errorPageSet16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(jspServlet62);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory7.setAddress(inetAddress8);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory7.setSessionStoreDir(file10);
        undertowEmbeddedServletContainerFactory7.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.ErrorPage errorPage16 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray17 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage16 };
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray17);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray17);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(errorPageArray17);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 100);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory15.setAccessLogDirectory(file20);
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray24 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer25 = undertowEmbeddedServletContainerFactory15.getEmbeddedServletContainer(servletContextInitializerArray24);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer26 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray24);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.io.File file33 = undertowEmbeddedServletContainerFactory28.getDocumentRoot();
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory28.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory36.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo41);
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress43);
        org.springframework.boot.context.embedded.ErrorPage errorPage45 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray46 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage45 };
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray46);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory36.resourceLoader = resourceLoader48;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory36.setDocumentRoot(file50);
        org.springframework.core.io.ResourceLoader resourceLoader52 = null;
        undertowEmbeddedServletContainerFactory36.resourceLoader = resourceLoader52;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer56 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap55);
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer58 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer60 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer62 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap61);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray63 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer56, initParameterConfiguringServletContextInitializer58, initParameterConfiguringServletContextInitializer60, initParameterConfiguringServletContextInitializer62 };
        initializer54.initializers = servletContextInitializerArray63;
        undertowEmbeddedServletContainerFactory36.addInitializers(servletContextInitializerArray63);
        undertowEmbeddedServletContainerFactory28.addInitializers(servletContextInitializerArray63);
        java.lang.Boolean boolean67 = undertowEmbeddedServletContainerFactory28.directBuffers;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray68 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray68);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray68);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray73 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray73);
        boolean boolean75 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(servletContextInitializerArray24);
        org.junit.Assert.assertNotNull(embeddedServletContainer25);
        org.junit.Assert.assertNotNull(embeddedServletContainer26);
        org.junit.Assert.assertNull(file33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNotNull(errorPageArray46);
        org.junit.Assert.assertNotNull(servletContextInitializerArray63);
        org.junit.Assert.assertNull(boolean67);
        org.junit.Assert.assertNotNull(errorPageArray68);
        org.junit.Assert.assertNotNull(errorPageArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        io.undertow.server.handlers.resource.ResourceManager resourceManager27 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
        org.junit.Assert.assertNotNull(resourceManager27);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer21 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer21, initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27 };
        initializer19.initializers = servletContextInitializerArray28;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress37 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress37);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory36.setSessionStoreDir(file39);
        org.springframework.boot.context.embedded.Compression compression41 = undertowEmbeddedServletContainerFactory36.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory43.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file56 = null;
        undertowEmbeddedServletContainerFactory51.setAccessLogDirectory(file56);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo58 = null;
        undertowEmbeddedServletContainerFactory51.configureErrorPages(deploymentInfo58);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer60 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray61 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer60 };
        undertowEmbeddedServletContainerFactory51.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray61);
        undertowEmbeddedServletContainerFactory43.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray61);
        undertowEmbeddedServletContainerFactory36.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray61);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray61);
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file66;
        io.undertow.Undertow.Builder builder69 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 1);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        java.io.File file74 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file74);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNull(compression41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray61);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList2;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader4);
        java.net.InetAddress inetAddress6 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress6);
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(0);
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0.0.0.0" + "'", str6, "0.0.0.0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file20);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file23);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress27);
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        int int16 = undertowEmbeddedServletContainerFactory1.getPort();
        int int17 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1800 + "'", int17 == 1800);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(10);
        boolean boolean2 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory1.createBuilder((-1));
        java.lang.String str5 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection6 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection6);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer5 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer7 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer9 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap8);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer5, initParameterConfiguringServletContextInitializer7, initParameterConfiguringServletContextInitializer9 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray10);
        org.springframework.boot.context.embedded.Compression compression12 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.Ssl ssl13 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNull(compression12);
        org.junit.Assert.assertNull(ssl13);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager13 = undertowEmbeddedServletContainerFactory10.getDocumentRootResourceManager();
        boolean boolean14 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory10.setRegisterJspServlet(true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file17;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet19 = undertowEmbeddedServletContainerFactory10.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet19);
        org.springframework.boot.context.embedded.Ssl ssl21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode22 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(resourceManager13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(errorPageSet19);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray31);
        org.springframework.boot.context.embedded.Compression compression35 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression35);
        org.springframework.boot.context.embedded.Ssl ssl37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode38 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection8 = undertowEmbeddedServletContainerFactory7.getBuilderCustomizers();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory7.workerThreads;
        undertowEmbeddedServletContainerFactory7.setUseForwardHeaders(false);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory7.getDisplayName();
        boolean boolean13 = undertowEmbeddedServletContainerFactory7.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet14 = undertowEmbeddedServletContainerFactory7.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        java.lang.String str18 = undertowEmbeddedServletContainerFactory16.accessLogPattern;
        undertowEmbeddedServletContainerFactory16.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray21 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList22 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList22, undertowBuilderCustomizerArray21);
        undertowEmbeddedServletContainerFactory16.builderCustomizers = undertowBuilderCustomizerList22;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray31 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory26.addBuilderCustomizers(undertowBuilderCustomizerArray31);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray31);
        undertowEmbeddedServletContainerFactory7.addBuilderCustomizers(undertowBuilderCustomizerArray31);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray31);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        boolean boolean38 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.io.File file39 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(errorPageSet14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(file39);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory1.ioThreads = 97;
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 32);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file18;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader7);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        int int11 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1800 + "'", int11 == 1800);
        org.junit.Assert.assertNotNull(resourceManager12);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file16);
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet19 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        boolean boolean20 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNotNull(xnioWorker18);
        org.junit.Assert.assertNotNull(errorPageSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        java.lang.String str11 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl8);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file10);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory14.ioThreads;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory14.setCompression(compression16);
        int int18 = undertowEmbeddedServletContainerFactory14.getSessionTimeout();
        undertowEmbeddedServletContainerFactory14.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory14.directBuffers = true;
        undertowEmbeddedServletContainerFactory14.setJspServletClassName("");
        java.io.File file25 = undertowEmbeddedServletContainerFactory14.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory27.setPersistSession(false);
        undertowEmbeddedServletContainerFactory27.setIoThreads((java.lang.Integer) (-1));
        java.io.File file32 = undertowEmbeddedServletContainerFactory27.getDocumentRoot();
        boolean boolean33 = undertowEmbeddedServletContainerFactory27.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        undertowEmbeddedServletContainerFactory35.setPort((int) (short) -1);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory35.accessLogDirectory = file38;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory41.ioThreads;
        org.springframework.boot.context.embedded.Compression compression43 = null;
        undertowEmbeddedServletContainerFactory41.setCompression(compression43);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection45 = undertowEmbeddedServletContainerFactory41.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo46 = null;
        undertowEmbeddedServletContainerFactory41.configureErrorPages(deploymentInfo46);
        java.net.InetAddress inetAddress48 = null;
        undertowEmbeddedServletContainerFactory41.setAddress(inetAddress48);
        org.springframework.boot.context.embedded.ErrorPage errorPage50 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray51 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage50 };
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray51);
        undertowEmbeddedServletContainerFactory35.addErrorPages(errorPageArray51);
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray51);
        undertowEmbeddedServletContainerFactory14.addErrorPages(errorPageArray51);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray51);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        io.undertow.Undertow.Builder builder60 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 10);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1800 + "'", int18 == 1800);
        org.junit.Assert.assertNull(file25);
        org.junit.Assert.assertNull(file32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection45);
        org.junit.Assert.assertNotNull(errorPageArray51);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 10);
        undertowEmbeddedServletContainerFactory1.workerThreads = (-1);
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory11.getDisplayName();
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setUseForwardHeaders(false);
        java.lang.String str26 = undertowEmbeddedServletContainerFactory21.getDisplayName();
        undertowEmbeddedServletContainerFactory21.setBufferSize((java.lang.Integer) 1);
        boolean boolean29 = undertowEmbeddedServletContainerFactory21.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        undertowEmbeddedServletContainerFactory31.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray36 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray36);
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray36);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray36);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray36);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray36);
        org.springframework.boot.context.embedded.Ssl ssl42 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray36);
        org.junit.Assert.assertNull(ssl42);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader39;
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress45 = null;
        undertowEmbeddedServletContainerFactory44.setAddress(inetAddress45);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.setSessionStoreDir(file47);
        org.springframework.boot.context.embedded.Compression compression49 = undertowEmbeddedServletContainerFactory44.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory51.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        undertowEmbeddedServletContainerFactory59.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file64 = null;
        undertowEmbeddedServletContainerFactory59.setAccessLogDirectory(file64);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo66 = null;
        undertowEmbeddedServletContainerFactory59.configureErrorPages(deploymentInfo66);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer68 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray69 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer68 };
        undertowEmbeddedServletContainerFactory59.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory51.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory44.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean78 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory80.ioThreads;
        java.lang.String str82 = undertowEmbeddedServletContainerFactory80.accessLogPattern;
        undertowEmbeddedServletContainerFactory80.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray85 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList86 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList86, undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory80.builderCustomizers = undertowBuilderCustomizerList86;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList86;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNull(compression49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray69);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(int81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader9);
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory1.directBuffers;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet6);
        org.junit.Assert.assertNull(boolean11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.Ssl ssl9 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        int int17 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ssl9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(errorPageSet10);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1800);
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file22;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setAccessLogDirectory(file30);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList32 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory34.ioThreads;
        org.springframework.boot.context.embedded.Compression compression36 = null;
        undertowEmbeddedServletContainerFactory34.setCompression(compression36);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection38 = undertowEmbeddedServletContainerFactory34.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo39 = null;
        undertowEmbeddedServletContainerFactory34.configureErrorPages(deploymentInfo39);
        java.net.InetAddress inetAddress41 = null;
        undertowEmbeddedServletContainerFactory34.setAddress(inetAddress41);
        io.undertow.server.handlers.resource.ResourceManager resourceManager43 = undertowEmbeddedServletContainerFactory34.getDocumentRootResourceManager();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory34.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory46.setPersistSession(false);
        undertowEmbeddedServletContainerFactory46.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList51 = undertowEmbeddedServletContainerFactory46.builderCustomizers;
        undertowEmbeddedServletContainerFactory34.builderCustomizers = undertowBuilderCustomizerList51;
        undertowEmbeddedServletContainerFactory25.builderCustomizers = undertowBuilderCustomizerList51;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList51;
        org.springframework.boot.context.embedded.Compression compression55 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection38);
        org.junit.Assert.assertNotNull(resourceManager43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList51);
        org.junit.Assert.assertNull(compression55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings2 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader3 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader3;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray5 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(mimeMappings2);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 100);
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.ErrorPage errorPage16 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage17 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        int int12 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1800 + "'", int12 == 1800);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setUseForwardHeaders(false);
        java.lang.String str14 = undertowEmbeddedServletContainerFactory9.getDisplayName();
        boolean boolean15 = undertowEmbeddedServletContainerFactory9.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet16 = undertowEmbeddedServletContainerFactory9.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        java.lang.String str20 = undertowEmbeddedServletContainerFactory18.accessLogPattern;
        undertowEmbeddedServletContainerFactory18.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray23 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList24, undertowBuilderCustomizerArray23);
        undertowEmbeddedServletContainerFactory18.builderCustomizers = undertowBuilderCustomizerList24;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection29 = undertowEmbeddedServletContainerFactory28.getBuilderCustomizers();
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory28.workerThreads;
        undertowEmbeddedServletContainerFactory28.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory28.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory18.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory9.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection39 = undertowEmbeddedServletContainerFactory38.getBuilderCustomizers();
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory38.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer44 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer46 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap45);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer42, initParameterConfiguringServletContextInitializer44, initParameterConfiguringServletContextInitializer46 };
        undertowEmbeddedServletContainerFactory38.addInitializers(servletContextInitializerArray47);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        undertowEmbeddedServletContainerFactory50.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory50.setAccessLogDirectory(file55);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList57 = undertowEmbeddedServletContainerFactory50.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet62 = undertowEmbeddedServletContainerFactory59.getJspServlet();
        undertowEmbeddedServletContainerFactory50.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory38.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory9.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet62);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        boolean boolean69 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(errorPageSet16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(jspServlet62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        undertowEmbeddedServletContainerFactory17.setRegisterJspServlet(true);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory17.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet24 = undertowEmbeddedServletContainerFactory17.getJspServlet();
        undertowEmbeddedServletContainerFactory11.setJspServlet(jspServlet24);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory11.setDocumentRoot(file26);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList28 = undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList28;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        undertowEmbeddedServletContainerFactory31.setUseForwardHeaders(false);
        java.lang.String str36 = undertowEmbeddedServletContainerFactory31.getDisplayName();
        undertowEmbeddedServletContainerFactory31.setBufferSize((java.lang.Integer) 1);
        boolean boolean39 = undertowEmbeddedServletContainerFactory31.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection42 = undertowEmbeddedServletContainerFactory41.getBuilderCustomizers();
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory41.workerThreads;
        undertowEmbeddedServletContainerFactory41.setUseForwardHeaders(false);
        java.lang.String str46 = undertowEmbeddedServletContainerFactory41.getDisplayName();
        undertowEmbeddedServletContainerFactory41.setBufferSize((java.lang.Integer) 1);
        boolean boolean49 = undertowEmbeddedServletContainerFactory41.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray56 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory51.addBuilderCustomizers(undertowBuilderCustomizerArray56);
        undertowEmbeddedServletContainerFactory41.addBuilderCustomizers(undertowBuilderCustomizerArray56);
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray56);
        undertowEmbeddedServletContainerFactory31.useForwardHeaders = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet62 = undertowEmbeddedServletContainerFactory31.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet62);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(jspServlet24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray56);
        org.junit.Assert.assertNotNull(errorPageSet62);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        org.xnio.XnioWorker xnioWorker12 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory14.setResourceLoader(resourceLoader15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList18, undertowDeploymentInfoCustomizerArray17);
        undertowEmbeddedServletContainerFactory14.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file22);
        io.undertow.server.handlers.resource.ResourceManager resourceManager24 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNotNull(xnioWorker12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(resourceManager24);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        org.springframework.boot.context.embedded.Ssl ssl21 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl21);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        java.lang.String str21 = undertowEmbeddedServletContainerFactory19.accessLogPattern;
        undertowEmbeddedServletContainerFactory19.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory19.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory29.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory19.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.Compression compression41 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(resourceLoader17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray34);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(compression41);
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.net.InetAddress inetAddress6 = undertowEmbeddedServletContainerFactory1.getAddress();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        org.junit.Assert.assertNull(inetAddress6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray12 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean14 = undertowEmbeddedServletContainerFactory13.directBuffers;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory13.setSessionStoreDir(file15);
        undertowEmbeddedServletContainerFactory13.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet23 = undertowEmbeddedServletContainerFactory20.getJspServlet();
        undertowEmbeddedServletContainerFactory13.setJspServlet(jspServlet23);
        org.springframework.boot.context.embedded.Ssl ssl25 = undertowEmbeddedServletContainerFactory13.getSsl();
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory13.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet26);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        io.undertow.Undertow.Builder builder31 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory33.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory38.ioThreads;
        org.springframework.boot.context.embedded.Compression compression40 = null;
        undertowEmbeddedServletContainerFactory38.setCompression(compression40);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection42 = undertowEmbeddedServletContainerFactory38.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo43 = null;
        undertowEmbeddedServletContainerFactory38.configureErrorPages(deploymentInfo43);
        java.net.InetAddress inetAddress45 = null;
        undertowEmbeddedServletContainerFactory38.setAddress(inetAddress45);
        org.springframework.boot.context.embedded.ErrorPage errorPage47 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray48 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage47 };
        undertowEmbeddedServletContainerFactory38.addErrorPages(errorPageArray48);
        org.springframework.core.io.ResourceLoader resourceLoader50 = null;
        undertowEmbeddedServletContainerFactory38.resourceLoader = resourceLoader50;
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory38.setDocumentRoot(file52);
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory38.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress57 = null;
        undertowEmbeddedServletContainerFactory56.setAddress(inetAddress57);
        java.io.File file59 = null;
        undertowEmbeddedServletContainerFactory56.setSessionStoreDir(file59);
        undertowEmbeddedServletContainerFactory56.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings63 = undertowEmbeddedServletContainerFactory56.getMimeMappings();
        undertowEmbeddedServletContainerFactory38.setMimeMappings(mimeMappings63);
        undertowEmbeddedServletContainerFactory33.setMimeMappings(mimeMappings63);
        int int66 = undertowEmbeddedServletContainerFactory33.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory68 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory68.ioThreads;
        org.springframework.boot.context.embedded.Compression compression70 = null;
        undertowEmbeddedServletContainerFactory68.setCompression(compression70);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection72 = undertowEmbeddedServletContainerFactory68.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo73 = null;
        undertowEmbeddedServletContainerFactory68.configureErrorPages(deploymentInfo73);
        java.net.InetAddress inetAddress75 = null;
        undertowEmbeddedServletContainerFactory68.setAddress(inetAddress75);
        java.io.File file77 = undertowEmbeddedServletContainerFactory68.getDocumentRoot();
        io.undertow.Undertow.Builder builder79 = undertowEmbeddedServletContainerFactory68.createBuilder((int) (short) 100);
        undertowEmbeddedServletContainerFactory68.setBuffersPerRegion((java.lang.Integer) 1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory83 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection84 = undertowEmbeddedServletContainerFactory83.getBuilderCustomizers();
        java.lang.Integer int85 = undertowEmbeddedServletContainerFactory83.workerThreads;
        undertowEmbeddedServletContainerFactory83.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file88 = null;
        undertowEmbeddedServletContainerFactory83.setAccessLogDirectory(file88);
        undertowEmbeddedServletContainerFactory83.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray92 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer93 = undertowEmbeddedServletContainerFactory83.getEmbeddedServletContainer(servletContextInitializerArray92);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer94 = undertowEmbeddedServletContainerFactory68.getEmbeddedServletContainer(servletContextInitializerArray92);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer95 = undertowEmbeddedServletContainerFactory33.getEmbeddedServletContainer(servletContextInitializerArray92);
        io.undertow.servlet.api.DeploymentManager deploymentManager96 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray92);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(jspServlet23);
        org.junit.Assert.assertNull(ssl25);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection42);
        org.junit.Assert.assertNotNull(errorPageArray48);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(mimeMappings63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1800 + "'", int66 == 1800);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection72);
        org.junit.Assert.assertNull(file77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection84);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNotNull(servletContextInitializerArray92);
        org.junit.Assert.assertNotNull(embeddedServletContainer93);
        org.junit.Assert.assertNotNull(embeddedServletContainer94);
        org.junit.Assert.assertNotNull(embeddedServletContainer95);
        org.junit.Assert.assertNotNull(deploymentManager96);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory10.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet13);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory18.setResourceLoader(resourceLoader19);
        io.undertow.Undertow.Builder builder22 = undertowEmbeddedServletContainerFactory18.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory24.getBuilderCustomizers();
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader27;
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory24.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer32 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer32, initParameterConfiguringServletContextInitializer34, initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38 };
        initializer30.initializers = servletContextInitializerArray39;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = initializer30.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file48 = null;
        undertowEmbeddedServletContainerFactory43.setAccessLogDirectory(file48);
        undertowEmbeddedServletContainerFactory43.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray52 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer53 = undertowEmbeddedServletContainerFactory43.getEmbeddedServletContainer(servletContextInitializerArray52);
        initializer30.initializers = servletContextInitializerArray52;
        io.undertow.servlet.api.DeploymentManager deploymentManager55 = undertowEmbeddedServletContainerFactory24.createDeploymentManager(servletContextInitializerArray52);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer57 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder22, deploymentManager55, (-1));
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Ssl ssl60 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        org.springframework.boot.context.embedded.Compression compression65 = null;
        undertowEmbeddedServletContainerFactory63.setCompression(compression65);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection67 = undertowEmbeddedServletContainerFactory63.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo68 = null;
        undertowEmbeddedServletContainerFactory63.configureErrorPages(deploymentInfo68);
        java.net.InetAddress inetAddress70 = null;
        undertowEmbeddedServletContainerFactory63.setAddress(inetAddress70);
        java.io.File file72 = undertowEmbeddedServletContainerFactory63.getDocumentRoot();
        io.undertow.Undertow.Builder builder74 = undertowEmbeddedServletContainerFactory63.createBuilder((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl60, (-1), builder74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(resourceLoader29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(servletContextInitializerArray52);
        org.junit.Assert.assertNotNull(embeddedServletContainer53);
        org.junit.Assert.assertNotNull(deploymentManager55);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer57);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection67);
        org.junit.Assert.assertNull(file72);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setPort(0);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet12 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNotNull(errorPageSet12);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        io.undertow.server.HttpHandler httpHandler11 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler12 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression24);
        boolean boolean26 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        boolean boolean27 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        io.undertow.server.HttpHandler httpHandler30 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler31 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.net.InetAddress inetAddress11 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress11);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression15);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory18.workerThreads;
        undertowEmbeddedServletContainerFactory18.setUseForwardHeaders(false);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory18.getDisplayName();
        undertowEmbeddedServletContainerFactory18.setBufferSize((java.lang.Integer) 1);
        boolean boolean26 = undertowEmbeddedServletContainerFactory18.isRegisterDefaultServlet();
        java.lang.Boolean boolean27 = undertowEmbeddedServletContainerFactory18.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setUseForwardHeaders(false);
        java.lang.String str34 = undertowEmbeddedServletContainerFactory29.getDisplayName();
        undertowEmbeddedServletContainerFactory29.setBufferSize((java.lang.Integer) 1);
        boolean boolean37 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        java.lang.Boolean boolean38 = undertowEmbeddedServletContainerFactory29.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        org.springframework.boot.context.embedded.JspServlet jspServlet40 = undertowEmbeddedServletContainerFactory29.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader41 = null;
        undertowEmbeddedServletContainerFactory29.resourceLoader = resourceLoader41;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList43 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        undertowEmbeddedServletContainerFactory18.builderCustomizers = undertowBuilderCustomizerList43;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList43;
        java.lang.Class<?> wildcardClass46 = undertowBuilderCustomizerList43.getClass();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(compression10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(resourceManager14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(boolean27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(boolean38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList39);
        org.junit.Assert.assertNotNull(jspServlet40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList43);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.lang.Boolean boolean15 = undertowEmbeddedServletContainerFactory1.directBuffers;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList14);
        org.junit.Assert.assertNull(boolean15);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList2;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader4);
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo13);
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory8.setAddress(inetAddress15);
        org.springframework.boot.context.embedded.ErrorPage errorPage17 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray18 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage17 };
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray18);
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory8.resourceLoader = resourceLoader20;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory8.setDocumentRoot(file22);
        undertowEmbeddedServletContainerFactory8.accessLogEnabled = false;
        java.net.InetAddress inetAddress26 = undertowEmbeddedServletContainerFactory8.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory8.resourceLoader = resourceLoader27;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory30.ioThreads;
        java.lang.String str32 = undertowEmbeddedServletContainerFactory30.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager33 = undertowEmbeddedServletContainerFactory30.getDocumentRootResourceManager();
        boolean boolean34 = undertowEmbeddedServletContainerFactory30.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory30.setRegisterJspServlet(true);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory30.accessLogDirectory = file37;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection39 = undertowEmbeddedServletContainerFactory30.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory30.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray42 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList43 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList43, undertowBuilderCustomizerArray42);
        undertowEmbeddedServletContainerFactory30.builderCustomizers = undertowBuilderCustomizerList43;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int48 = undertowEmbeddedServletContainerFactory47.ioThreads;
        org.springframework.boot.context.embedded.Compression compression49 = null;
        undertowEmbeddedServletContainerFactory47.setCompression(compression49);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection51 = undertowEmbeddedServletContainerFactory47.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo52 = null;
        undertowEmbeddedServletContainerFactory47.configureErrorPages(deploymentInfo52);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList54 = undertowEmbeddedServletContainerFactory47.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory30.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList54;
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList54;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList57 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory8.setBuffersPerRegion((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory8.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection64 = undertowEmbeddedServletContainerFactory63.getBuilderCustomizers();
        java.lang.Integer int65 = undertowEmbeddedServletContainerFactory63.workerThreads;
        undertowEmbeddedServletContainerFactory63.setUseForwardHeaders(false);
        java.lang.String str68 = undertowEmbeddedServletContainerFactory63.getDisplayName();
        undertowEmbeddedServletContainerFactory63.setBufferSize((java.lang.Integer) 1);
        boolean boolean71 = undertowEmbeddedServletContainerFactory63.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory73 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection74 = undertowEmbeddedServletContainerFactory73.getBuilderCustomizers();
        java.lang.Integer int75 = undertowEmbeddedServletContainerFactory73.workerThreads;
        undertowEmbeddedServletContainerFactory73.setUseForwardHeaders(false);
        java.lang.String str78 = undertowEmbeddedServletContainerFactory73.getDisplayName();
        undertowEmbeddedServletContainerFactory73.setBufferSize((java.lang.Integer) 1);
        boolean boolean81 = undertowEmbeddedServletContainerFactory73.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory83 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection84 = undertowEmbeddedServletContainerFactory83.getBuilderCustomizers();
        java.lang.Integer int85 = undertowEmbeddedServletContainerFactory83.workerThreads;
        undertowEmbeddedServletContainerFactory83.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray88 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory83.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory73.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory63.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(errorPageArray18);
        org.junit.Assert.assertNull(inetAddress26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(resourceManager33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection39);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection51);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList54);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection74);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection84);
        org.junit.Assert.assertNull(int85);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray88);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory10.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet13);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress25);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory18.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory30.setPersistSession(false);
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory30.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory18.getUndertowEmbeddedServletContainer(builder34, deploymentManager35, (int) '4');
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file38);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory18.buffersPerRegion;
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory18.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory44.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet47 = null;
        undertowEmbeddedServletContainerFactory44.setJspServlet(jspServlet47);
        java.net.InetAddress inetAddress49 = undertowEmbeddedServletContainerFactory44.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setAccessLogDirectory(file57);
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer62 = undertowEmbeddedServletContainerFactory52.getEmbeddedServletContainer(servletContextInitializerArray61);
        initializer50.initializers = servletContextInitializerArray61;
        io.undertow.servlet.api.DeploymentManager deploymentManager64 = undertowEmbeddedServletContainerFactory44.createDeploymentManager(servletContextInitializerArray61);
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray61);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer66 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray61);
        int int67 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.net.InetAddress inetAddress68 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(mimeMappings28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(inetAddress49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
        org.junit.Assert.assertNotNull(embeddedServletContainer62);
        org.junit.Assert.assertNotNull(deploymentManager64);
        org.junit.Assert.assertNotNull(embeddedServletContainer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1800 + "'", int67 == 1800);
        org.junit.Assert.assertNull(inetAddress68);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        int int47 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.Compression compression48 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet49 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.core.io.ResourceLoader resourceLoader52 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader52);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 97);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNull(compression48);
        org.junit.Assert.assertNotNull(errorPageSet49);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray19);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        int int29 = undertowEmbeddedServletContainerFactory25.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory25.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1800 + "'", int29 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.util.concurrent.TimeUnit timeUnit4 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 100, timeUnit4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inetAddress2);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory5.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = null;
        undertowEmbeddedServletContainerFactory5.setJspServlet(jspServlet8);
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory5.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory13.getBuilderCustomizers();
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory13.workerThreads;
        undertowEmbeddedServletContainerFactory13.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory13.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory13.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray22 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer23 = undertowEmbeddedServletContainerFactory13.getEmbeddedServletContainer(servletContextInitializerArray22);
        initializer11.initializers = servletContextInitializerArray22;
        io.undertow.servlet.api.DeploymentManager deploymentManager25 = undertowEmbeddedServletContainerFactory5.createDeploymentManager(servletContextInitializerArray22);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray22);
        java.lang.String str27 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.core.io.ResourceLoader resourceLoader28 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.Compression compression29 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.lang.Class<?> wildcardClass30 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNull(inetAddress10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(servletContextInitializerArray22);
        org.junit.Assert.assertNotNull(embeddedServletContainer23);
        org.junit.Assert.assertNotNull(deploymentManager25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(resourceLoader28);
        org.junit.Assert.assertNull(compression29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Compression compression4 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file9;
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(compression4);
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory8.resourceLoader = resourceLoader11;
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory8.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        initializer14.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = initializer14.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer14.initializers = servletContextInitializerArray36;
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = undertowEmbeddedServletContainerFactory8.createDeploymentManager(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        org.springframework.boot.context.embedded.Ssl ssl41 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl41);
        java.lang.String str43 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file45 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file46;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        int int53 = undertowEmbeddedServletContainerFactory49.getSessionTimeout();
        undertowEmbeddedServletContainerFactory49.buffersPerRegion = 100;
        java.io.File file56 = null;
        undertowEmbeddedServletContainerFactory49.setDocumentRoot(file56);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        java.io.File file62 = null;
        undertowEmbeddedServletContainerFactory59.setDocumentRoot(file62);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection64 = undertowEmbeddedServletContainerFactory59.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection67 = undertowEmbeddedServletContainerFactory66.getBuilderCustomizers();
        java.lang.Integer int68 = undertowEmbeddedServletContainerFactory66.workerThreads;
        undertowEmbeddedServletContainerFactory66.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file71 = null;
        undertowEmbeddedServletContainerFactory66.setAccessLogDirectory(file71);
        undertowEmbeddedServletContainerFactory66.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray75 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer76 = undertowEmbeddedServletContainerFactory66.getEmbeddedServletContainer(servletContextInitializerArray75);
        undertowEmbeddedServletContainerFactory59.addInitializers(servletContextInitializerArray75);
        io.undertow.servlet.api.DeploymentManager deploymentManager78 = undertowEmbeddedServletContainerFactory49.createDeploymentManager(servletContextInitializerArray75);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray75);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo80 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(resourceLoader13);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(deploymentManager39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0.0.0.0" + "'", str43, "0.0.0.0");
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(file45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1800 + "'", int53 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection64);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(servletContextInitializerArray75);
        org.junit.Assert.assertNotNull(embeddedServletContainer76);
        org.junit.Assert.assertNotNull(deploymentManager78);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory11.getDisplayName();
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray26);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList17, undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory11.builderCustomizers = undertowBuilderCustomizerList17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory30.ioThreads;
        java.lang.String str32 = undertowEmbeddedServletContainerFactory30.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl33 = null;
        undertowEmbeddedServletContainerFactory30.setSsl(ssl33);
        int int35 = undertowEmbeddedServletContainerFactory30.getPort();
        undertowEmbeddedServletContainerFactory30.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setUseForwardHeaders(false);
        java.lang.String str44 = undertowEmbeddedServletContainerFactory39.getDisplayName();
        undertowEmbeddedServletContainerFactory39.setBufferSize((java.lang.Integer) 1);
        boolean boolean47 = undertowEmbeddedServletContainerFactory39.isRegisterDefaultServlet();
        java.lang.Boolean boolean48 = undertowEmbeddedServletContainerFactory39.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList49 = undertowEmbeddedServletContainerFactory39.builderCustomizers;
        undertowEmbeddedServletContainerFactory30.builderCustomizers = undertowBuilderCustomizerList49;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory58.ioThreads;
        org.springframework.boot.context.embedded.Compression compression60 = null;
        undertowEmbeddedServletContainerFactory58.setCompression(compression60);
        undertowEmbeddedServletContainerFactory58.setRegisterJspServlet(true);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory58.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet65 = undertowEmbeddedServletContainerFactory58.getJspServlet();
        undertowEmbeddedServletContainerFactory52.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory11.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        java.net.InetAddress inetAddress72 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress72);
        org.springframework.boot.context.embedded.Compression compression74 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.net.InetAddress inetAddress75 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress75);
        org.springframework.boot.context.embedded.JspServlet jspServlet77 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet77);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(jspServlet65);
        org.junit.Assert.assertNull(compression74);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        undertowEmbeddedServletContainerFactory14.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory20.ioThreads;
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory20.setCompression(compression22);
        undertowEmbeddedServletContainerFactory20.setRegisterJspServlet(true);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory20.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet27 = undertowEmbeddedServletContainerFactory20.getJspServlet();
        undertowEmbeddedServletContainerFactory14.setJspServlet(jspServlet27);
        undertowEmbeddedServletContainerFactory14.accessLogEnabled = false;
        java.lang.String str31 = undertowEmbeddedServletContainerFactory14.getDisplayName();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet32 = undertowEmbeddedServletContainerFactory14.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet32);
        org.springframework.core.io.ResourceLoader resourceLoader34 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(jspServlet27);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(errorPageSet32);
        org.junit.Assert.assertNull(resourceLoader34);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 1);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = initializer9.initializers;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer35 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray34);
        org.springframework.boot.context.embedded.Ssl ssl36 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory1.workerThreads;
        int int38 = undertowEmbeddedServletContainerFactory1.getPort();
        java.io.File file39 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        org.junit.Assert.assertNotNull(embeddedServletContainer35);
        org.junit.Assert.assertNull(ssl36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNull(file39);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory1.directBuffers;
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet13 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0.0.0" + "'", str8, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
        org.junit.Assert.assertNotNull(errorPageSet13);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        org.springframework.boot.context.embedded.Ssl ssl22 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.ioThreads;
        io.undertow.server.handlers.resource.ResourceManager resourceManager24 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(ssl22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(resourceManager24);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray10);
        org.springframework.boot.context.embedded.Ssl ssl13 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.workerThreads = (-1);
        java.lang.Boolean boolean16 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(errorPageArray10);
        org.junit.Assert.assertNull(ssl13);
        org.junit.Assert.assertNull(boolean16);
        org.junit.Assert.assertNull(resourceLoader17);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file3);
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.bufferSize;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer9 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer9, initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15 };
        initializer7.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = initializer7.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = initializer7.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        initializer20.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43 };
        initializer35.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = initializer35.initializers;
        initializer34.initializers = servletContextInitializerArray46;
        initializer20.initializers = servletContextInitializerArray46;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer50 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap49);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer52 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer54 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer56 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap55);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer50, initParameterConfiguringServletContextInitializer52, initParameterConfiguringServletContextInitializer54, initParameterConfiguringServletContextInitializer56 };
        initializer20.initializers = servletContextInitializerArray57;
        initializer7.initializers = servletContextInitializerArray57;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo6, servletContextInitializerArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl4 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl4);
        int int6 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        io.undertow.server.handlers.resource.ResourceManager resourceManager9 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(resourceManager9);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file19;
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean23 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        undertowEmbeddedServletContainerFactory20.setUseForwardHeaders(false);
        java.lang.String str25 = undertowEmbeddedServletContainerFactory20.getDisplayName();
        boolean boolean26 = undertowEmbeddedServletContainerFactory20.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet27 = undertowEmbeddedServletContainerFactory20.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet27);
        org.springframework.boot.context.embedded.Ssl ssl29 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.ClassLoader classLoader30 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(errorPageSet27);
        org.junit.Assert.assertNull(ssl29);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory10.resourceLoader = resourceLoader13;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        java.lang.String str18 = undertowEmbeddedServletContainerFactory16.accessLogPattern;
        undertowEmbeddedServletContainerFactory16.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray24 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray24);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory1.bufferSize;
        int int30 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(errorPageArray24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        java.net.InetAddress inetAddress13 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress13);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(inetAddress10);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ssl12);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader3 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file7);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory36.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo41);
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress43);
        org.springframework.boot.context.embedded.ErrorPage errorPage45 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray46 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage45 };
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray46);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory36.resourceLoader = resourceLoader48;
        java.io.File file50 = undertowEmbeddedServletContainerFactory36.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress59);
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory52.workerThreads;
        java.io.File file62 = null;
        undertowEmbeddedServletContainerFactory52.setAccessLogDirectory(file62);
        boolean boolean64 = undertowEmbeddedServletContainerFactory52.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory66.ioThreads;
        org.springframework.boot.context.embedded.Compression compression68 = null;
        undertowEmbeddedServletContainerFactory66.setCompression(compression68);
        undertowEmbeddedServletContainerFactory66.setRegisterJspServlet(true);
        java.lang.Integer int72 = undertowEmbeddedServletContainerFactory66.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet73 = undertowEmbeddedServletContainerFactory66.getJspServlet();
        undertowEmbeddedServletContainerFactory52.setJspServlet(jspServlet73);
        undertowEmbeddedServletContainerFactory36.setJspServlet(jspServlet73);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet73);
        int int77 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNotNull(errorPageArray46);
        org.junit.Assert.assertNull(file50);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(jspServlet73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1800 + "'", int77 == 1800);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(1800, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 52;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.springframework.boot.context.embedded.Ssl ssl9 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory17.setPersistSession(false);
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory17.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory17.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection29 = undertowEmbeddedServletContainerFactory25.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo30 = null;
        undertowEmbeddedServletContainerFactory25.configureErrorPages(deploymentInfo30);
        java.net.InetAddress inetAddress32 = null;
        undertowEmbeddedServletContainerFactory25.setAddress(inetAddress32);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory25.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        undertowEmbeddedServletContainerFactory17.setMimeMappings(mimeMappings35);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings35);
        java.lang.ClassLoader classLoader38 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file39);
        java.net.InetAddress inetAddress41 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection29);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(mimeMappings35);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory54.setPersistSession(false);
        io.undertow.Undertow.Builder builder58 = undertowEmbeddedServletContainerFactory54.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory54.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory62.ioThreads;
        org.springframework.boot.context.embedded.Compression compression64 = null;
        undertowEmbeddedServletContainerFactory62.setCompression(compression64);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection66 = undertowEmbeddedServletContainerFactory62.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo67 = null;
        undertowEmbeddedServletContainerFactory62.configureErrorPages(deploymentInfo67);
        java.net.InetAddress inetAddress69 = null;
        undertowEmbeddedServletContainerFactory62.setAddress(inetAddress69);
        java.lang.Integer int71 = undertowEmbeddedServletContainerFactory62.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings72 = undertowEmbeddedServletContainerFactory62.getMimeMappings();
        undertowEmbeddedServletContainerFactory54.setMimeMappings(mimeMappings72);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader76 = null;
        undertowEmbeddedServletContainerFactory75.setResourceLoader(resourceLoader76);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory79 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int80 = undertowEmbeddedServletContainerFactory79.ioThreads;
        org.springframework.boot.context.embedded.Compression compression81 = null;
        undertowEmbeddedServletContainerFactory79.setCompression(compression81);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection83 = undertowEmbeddedServletContainerFactory79.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo84 = null;
        undertowEmbeddedServletContainerFactory79.configureErrorPages(deploymentInfo84);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList86 = undertowEmbeddedServletContainerFactory79.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory75.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList86;
        undertowEmbeddedServletContainerFactory54.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList86;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList86;
        io.undertow.server.HttpHandler httpHandler90 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler91 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection66);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(mimeMappings72);
        org.junit.Assert.assertNull(int80);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection83);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList86);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.net.InetAddress inetAddress5 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.Compression compression6 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression6);
        java.lang.Boolean boolean8 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1800);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(inetAddress5);
        org.junit.Assert.assertNull(boolean8);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory11.getDisplayName();
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        java.lang.Boolean boolean20 = undertowEmbeddedServletContainerFactory11.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList21 = undertowEmbeddedServletContainerFactory11.builderCustomizers;
        undertowEmbeddedServletContainerFactory11.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings24 = undertowEmbeddedServletContainerFactory11.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings24);
        org.xnio.XnioWorker xnioWorker26 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader27 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(boolean20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList21);
        org.junit.Assert.assertNotNull(mimeMappings24);
        org.junit.Assert.assertNotNull(xnioWorker26);
        org.junit.Assert.assertNull(resourceLoader27);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file17);
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UndertowDeploymentInfoCustomizers must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 10, timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0.0.0.0" + "'", str6, "0.0.0.0");
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file9);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo15);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer17 };
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray43);
        int int47 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.Compression compression48 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet49 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo50 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo50);
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory56.ioThreads;
        org.springframework.boot.context.embedded.Compression compression58 = null;
        undertowEmbeddedServletContainerFactory56.setCompression(compression58);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection60 = undertowEmbeddedServletContainerFactory56.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo61 = null;
        undertowEmbeddedServletContainerFactory56.configureErrorPages(deploymentInfo61);
        java.net.InetAddress inetAddress63 = null;
        undertowEmbeddedServletContainerFactory56.setAddress(inetAddress63);
        java.lang.Integer int65 = undertowEmbeddedServletContainerFactory56.workerThreads;
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory56.setAccessLogDirectory(file66);
        boolean boolean68 = undertowEmbeddedServletContainerFactory56.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int71 = undertowEmbeddedServletContainerFactory70.ioThreads;
        org.springframework.boot.context.embedded.Compression compression72 = null;
        undertowEmbeddedServletContainerFactory70.setCompression(compression72);
        undertowEmbeddedServletContainerFactory70.setRegisterJspServlet(true);
        java.lang.Integer int76 = undertowEmbeddedServletContainerFactory70.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet77 = undertowEmbeddedServletContainerFactory70.getJspServlet();
        undertowEmbeddedServletContainerFactory56.setJspServlet(jspServlet77);
        undertowEmbeddedServletContainerFactory56.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory82 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int83 = undertowEmbeddedServletContainerFactory82.ioThreads;
        org.springframework.boot.context.embedded.Compression compression84 = null;
        undertowEmbeddedServletContainerFactory82.setCompression(compression84);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection86 = undertowEmbeddedServletContainerFactory82.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo87 = null;
        undertowEmbeddedServletContainerFactory82.configureErrorPages(deploymentInfo87);
        java.net.InetAddress inetAddress89 = null;
        undertowEmbeddedServletContainerFactory82.setAddress(inetAddress89);
        org.springframework.boot.context.embedded.ErrorPage errorPage91 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray92 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage91 };
        undertowEmbeddedServletContainerFactory82.addErrorPages(errorPageArray92);
        undertowEmbeddedServletContainerFactory56.addErrorPages(errorPageArray92);
        undertowEmbeddedServletContainerFactory56.setAccessLogPattern("");
        java.lang.String str97 = undertowEmbeddedServletContainerFactory56.getListenAddress();
        org.springframework.boot.context.embedded.JspServlet jspServlet98 = undertowEmbeddedServletContainerFactory56.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet98);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNull(compression48);
        org.junit.Assert.assertNotNull(errorPageSet49);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection60);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNotNull(jspServlet77);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection86);
        org.junit.Assert.assertNotNull(errorPageArray92);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "0.0.0.0" + "'", str97, "0.0.0.0");
        org.junit.Assert.assertNotNull(jspServlet98);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file3;
        undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (byte) 100);
        io.undertow.Undertow.Builder builder8 = undertowEmbeddedServletContainerFactory2.createBuilder((-1));
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory2.getServletClassLoader();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory2.builderCustomizers;
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(mimeMappings10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        int int7 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(xnioWorker4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "hi!";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.ioThreads = 97;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        java.lang.String str4 = jarResourceManager0.jarPath;
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource7 = jarResourceManager0.getResource("hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        io.undertow.server.handlers.resource.ResourceManager resourceManager3 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.Class<?> wildcardClass5 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(resourceManager3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        boolean boolean11 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str12 = jarResourceManager0.jarPath;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource14 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl10);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection20 = undertowEmbeddedServletContainerFactory19.getBuilderCustomizers();
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory19.workerThreads;
        undertowEmbeddedServletContainerFactory19.setUseForwardHeaders(false);
        java.lang.String str24 = undertowEmbeddedServletContainerFactory19.getDisplayName();
        undertowEmbeddedServletContainerFactory19.setBufferSize((java.lang.Integer) 1);
        boolean boolean27 = undertowEmbeddedServletContainerFactory19.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setUseForwardHeaders(false);
        java.lang.String str34 = undertowEmbeddedServletContainerFactory29.getDisplayName();
        undertowEmbeddedServletContainerFactory29.setBufferSize((java.lang.Integer) 1);
        boolean boolean37 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray44 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory39.addBuilderCustomizers(undertowBuilderCustomizerArray44);
        undertowEmbeddedServletContainerFactory29.addBuilderCustomizers(undertowBuilderCustomizerArray44);
        undertowEmbeddedServletContainerFactory19.addBuilderCustomizers(undertowBuilderCustomizerArray44);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray44);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray44);
        boolean boolean50 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        int int51 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        boolean boolean52 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0.0.0" + "'", str8, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl18);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int21 = undertowEmbeddedServletContainerFactory1.getPort();
        io.undertow.server.HttpHandler httpHandler22 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler23 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.lang.Boolean boolean6 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Ssl ssl12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode13 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(boolean6);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener6 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList2;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.xnio.XnioWorker xnioWorker5 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNotNull(xnioWorker5);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.springframework.boot.context.embedded.Ssl ssl11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode12 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer19 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap18);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17, initParameterConfiguringServletContextInitializer19 };
        initializer11.initializers = servletContextInitializerArray20;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray22 = initializer11.initializers;
        initializer10.initializers = servletContextInitializerArray22;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray22);
        boolean boolean25 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        java.lang.String str2 = jarResourceManager0.jarPath;
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        boolean boolean8 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean9 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file12);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader18;
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory15.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader21;
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory15.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setAccessLogDirectory(file30);
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer35 = undertowEmbeddedServletContainerFactory25.getEmbeddedServletContainer(servletContextInitializerArray34);
        io.undertow.servlet.api.DeploymentManager deploymentManager36 = undertowEmbeddedServletContainerFactory15.createDeploymentManager(servletContextInitializerArray34);
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray34);
        io.undertow.server.handlers.resource.ResourceManager resourceManager38 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(resourceLoader20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        org.junit.Assert.assertNotNull(embeddedServletContainer35);
        org.junit.Assert.assertNotNull(deploymentManager36);
        org.junit.Assert.assertNotNull(deploymentManager37);
        org.junit.Assert.assertNotNull(resourceManager38);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection11 = undertowEmbeddedServletContainerFactory7.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory7.configureErrorPages(deploymentInfo12);
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory7.setAddress(inetAddress14);
        org.springframework.boot.context.embedded.ErrorPage errorPage16 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray17 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage16 };
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray17);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory7.resourceLoader = resourceLoader19;
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory7.setDocumentRoot(file21);
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory7.resourceLoader = resourceLoader23;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33 };
        initializer25.initializers = servletContextInitializerArray34;
        undertowEmbeddedServletContainerFactory7.addInitializers(servletContextInitializerArray34);
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.DeploymentManager deploymentManager37 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NullPointerException");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(inetAddress3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection11);
        org.junit.Assert.assertNotNull(errorPageArray17);
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory10.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet13);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress25);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory18.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory30.setPersistSession(false);
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory30.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory18.getUndertowEmbeddedServletContainer(builder34, deploymentManager35, (int) '4');
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file38);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory18.buffersPerRegion;
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory18.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory44.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet47 = null;
        undertowEmbeddedServletContainerFactory44.setJspServlet(jspServlet47);
        java.net.InetAddress inetAddress49 = undertowEmbeddedServletContainerFactory44.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setAccessLogDirectory(file57);
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer62 = undertowEmbeddedServletContainerFactory52.getEmbeddedServletContainer(servletContextInitializerArray61);
        initializer50.initializers = servletContextInitializerArray61;
        io.undertow.servlet.api.DeploymentManager deploymentManager64 = undertowEmbeddedServletContainerFactory44.createDeploymentManager(servletContextInitializerArray61);
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray61);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer66 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray61);
        int int67 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray70 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(mimeMappings28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(inetAddress49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
        org.junit.Assert.assertNotNull(embeddedServletContainer62);
        org.junit.Assert.assertNotNull(deploymentManager64);
        org.junit.Assert.assertNotNull(embeddedServletContainer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1800 + "'", int67 == 1800);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.ioThreads;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getContextPath();
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory10.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet13);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory18.setResourceLoader(resourceLoader19);
        io.undertow.Undertow.Builder builder22 = undertowEmbeddedServletContainerFactory18.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory24.getBuilderCustomizers();
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader27;
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory24.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer32 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer32, initParameterConfiguringServletContextInitializer34, initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38 };
        initializer30.initializers = servletContextInitializerArray39;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = initializer30.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file48 = null;
        undertowEmbeddedServletContainerFactory43.setAccessLogDirectory(file48);
        undertowEmbeddedServletContainerFactory43.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray52 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer53 = undertowEmbeddedServletContainerFactory43.getEmbeddedServletContainer(servletContextInitializerArray52);
        initializer30.initializers = servletContextInitializerArray52;
        io.undertow.servlet.api.DeploymentManager deploymentManager55 = undertowEmbeddedServletContainerFactory24.createDeploymentManager(servletContextInitializerArray52);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer57 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder22, deploymentManager55, (-1));
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.springframework.core.io.ResourceLoader resourceLoader60 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(jspServlet13);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(resourceLoader29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(servletContextInitializerArray52);
        org.junit.Assert.assertNotNull(embeddedServletContainer53);
        org.junit.Assert.assertNotNull(deploymentManager55);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer57);
        org.junit.Assert.assertNull(resourceLoader60);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings2 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList6 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.lang.Class<?> wildcardClass7 = undertowBuilderCustomizerList6.getClass();
        org.junit.Assert.assertNotNull(mimeMappings2);
        org.junit.Assert.assertNull(inetAddress3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder(1);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(ssl7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader8);
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress15);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.io.File file2 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file2);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.Ssl ssl6 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNull(ssl6);
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory2.createBuilder((int) (byte) 100);
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory2.createBuilder(0);
        undertowEmbeddedServletContainerFactory2.setRegisterDefaultServlet(true);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory8.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        io.undertow.Undertow.Builder builder33 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.ErrorPage errorPage34 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage35 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        java.util.concurrent.TimeUnit timeUnit10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(0, timeUnit10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.ClassLoader classLoader7 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        boolean boolean18 = undertowEmbeddedServletContainerFactory11.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory11.setBuffersPerRegion((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress23 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress23);
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file25);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory22.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress30 = null;
        undertowEmbeddedServletContainerFactory29.setAddress(inetAddress30);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory29.setSessionStoreDir(file32);
        org.springframework.boot.context.embedded.Compression compression34 = undertowEmbeddedServletContainerFactory29.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory36.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo41);
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory36.setAddress(inetAddress43);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory36.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings46 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory48.setPersistSession(false);
        io.undertow.Undertow.Builder builder52 = undertowEmbeddedServletContainerFactory48.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager53 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer55 = undertowEmbeddedServletContainerFactory36.getUndertowEmbeddedServletContainer(builder52, deploymentManager53, (int) '4');
        undertowEmbeddedServletContainerFactory36.buffersPerRegion = 1800;
        undertowEmbeddedServletContainerFactory36.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory61.ioThreads;
        org.springframework.boot.context.embedded.Compression compression63 = null;
        undertowEmbeddedServletContainerFactory61.setCompression(compression63);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection65 = undertowEmbeddedServletContainerFactory61.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo66 = null;
        undertowEmbeddedServletContainerFactory61.configureErrorPages(deploymentInfo66);
        java.net.InetAddress inetAddress68 = null;
        undertowEmbeddedServletContainerFactory61.setAddress(inetAddress68);
        org.springframework.boot.context.embedded.ErrorPage errorPage70 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray71 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage70 };
        undertowEmbeddedServletContainerFactory61.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory29.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray71);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray71);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(compression34);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(mimeMappings46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer55);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection65);
        org.junit.Assert.assertNotNull(errorPageArray71);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        java.util.concurrent.TimeUnit timeUnit12 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 0, timeUnit12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression17);
        undertowEmbeddedServletContainerFactory15.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray24 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray24);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray24);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory29.resourceLoader = resourceLoader32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory35.ioThreads;
        java.lang.String str37 = undertowEmbeddedServletContainerFactory35.accessLogPattern;
        undertowEmbeddedServletContainerFactory35.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory41.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray43 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory35.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory29.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray43);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList51 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        io.undertow.Undertow.Builder builder53 = undertowEmbeddedServletContainerFactory1.createBuilder(10);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(errorPageArray24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(errorPageArray43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener9 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader18;
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory15.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        io.undertow.servlet.api.DeploymentManager deploymentManager46 = undertowEmbeddedServletContainerFactory15.createDeploymentManager(servletContextInitializerArray43);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray43);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader48;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(resourceLoader20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNotNull(deploymentManager46);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList4 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList4, undertowBuilderCustomizerArray3);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList4;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader7);
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(resourceLoader9);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList4 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList4, undertowBuilderCustomizerArray3);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList4;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader7);
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory13.getBuilderCustomizers();
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory13.workerThreads;
        undertowEmbeddedServletContainerFactory13.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory13.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory13.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray22 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer23 = undertowEmbeddedServletContainerFactory13.getEmbeddedServletContainer(servletContextInitializerArray22);
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory13.accessLogDirectory = file24;
        undertowEmbeddedServletContainerFactory13.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory13.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory31.setResourceLoader(resourceLoader32);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList35, undertowDeploymentInfoCustomizerArray34);
        undertowEmbeddedServletContainerFactory31.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList35;
        undertowEmbeddedServletContainerFactory31.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory31.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection42 = undertowEmbeddedServletContainerFactory31.getDeploymentInfoCustomizers();
        boolean boolean43 = undertowEmbeddedServletContainerFactory31.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory45.ioThreads;
        org.springframework.boot.context.embedded.Compression compression47 = null;
        undertowEmbeddedServletContainerFactory45.setCompression(compression47);
        undertowEmbeddedServletContainerFactory45.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray54 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory52.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory45.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory31.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory13.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray54);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(resourceLoader9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(servletContextInitializerArray22);
        org.junit.Assert.assertNotNull(embeddedServletContainer23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(errorPageArray54);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo14);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 32;
        org.springframework.boot.context.embedded.Compression compression23 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        org.junit.Assert.assertNull(compression23);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file12;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        int int16 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer18 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1800 + "'", int16 == 1800);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file19;
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file23 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file24);
        java.lang.String str26 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(file23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0.0.0.0" + "'", str16, "0.0.0.0");
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        java.lang.String str2 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        boolean boolean8 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file16 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory19.setCompression(compression21);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection23 = undertowEmbeddedServletContainerFactory19.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory19.configureErrorPages(deploymentInfo24);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList26 = undertowEmbeddedServletContainerFactory19.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader27 = undertowEmbeddedServletContainerFactory19.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35, initParameterConfiguringServletContextInitializer37 };
        initializer29.initializers = servletContextInitializerArray38;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = initializer29.initializers;
        initializer28.initializers = servletContextInitializerArray40;
        undertowEmbeddedServletContainerFactory19.addInitializers(servletContextInitializerArray40);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo17, servletContextInitializerArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.net.InetAddress inetAddress56 = undertowEmbeddedServletContainerFactory1.getAddress();
        boolean boolean57 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection58 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(inetAddress56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection58);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file4;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        int int11 = undertowEmbeddedServletContainerFactory7.getSessionTimeout();
        undertowEmbeddedServletContainerFactory7.buffersPerRegion = 100;
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory7.workerThreads;
        boolean boolean15 = undertowEmbeddedServletContainerFactory7.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress16 = undertowEmbeddedServletContainerFactory7.getAddress();
        undertowEmbeddedServletContainerFactory7.setPersistSession(false);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory7.setDocumentRoot(file19);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory7.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings21);
        java.lang.Class<?> wildcardClass23 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1800 + "'", int11 == 1800);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(inetAddress16);
        org.junit.Assert.assertNotNull(mimeMappings21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory16.createWorker();
        undertowEmbeddedServletContainerFactory16.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setUseForwardHeaders(false);
        java.lang.String str27 = undertowEmbeddedServletContainerFactory22.getDisplayName();
        boolean boolean28 = undertowEmbeddedServletContainerFactory22.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet29 = undertowEmbeddedServletContainerFactory22.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory31.ioThreads;
        java.lang.String str33 = undertowEmbeddedServletContainerFactory31.accessLogPattern;
        undertowEmbeddedServletContainerFactory31.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray36 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList37 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList37, undertowBuilderCustomizerArray36);
        undertowEmbeddedServletContainerFactory31.builderCustomizers = undertowBuilderCustomizerList37;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection42 = undertowEmbeddedServletContainerFactory41.getBuilderCustomizers();
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory41.workerThreads;
        undertowEmbeddedServletContainerFactory41.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray46 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory41.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory22.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        org.springframework.boot.context.embedded.Compression compression52 = undertowEmbeddedServletContainerFactory1.getCompression();
        int int53 = undertowEmbeddedServletContainerFactory1.getPort();
        boolean boolean54 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.net.InetAddress inetAddress55 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(resourceManager14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(xnioWorker18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(errorPageSet29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray46);
        org.junit.Assert.assertNull(compression52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(inetAddress55);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.jarPath = "hi!";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file13);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo15);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray17 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.setPort(10);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0.0.0.0" + "'", str19, "0.0.0.0");
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file18 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        boolean boolean19 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        boolean boolean20 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        io.undertow.server.handlers.resource.ResourceManager resourceManager21 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(resourceLoader17);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(resourceManager21);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0.0.0.0" + "'", str16, "0.0.0.0");
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.Compression compression18 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression18);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection20 = undertowEmbeddedServletContainerFactory16.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo21);
        java.net.InetAddress inetAddress23 = null;
        undertowEmbeddedServletContainerFactory16.setAddress(inetAddress23);
        org.springframework.boot.context.embedded.ErrorPage errorPage25 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray26 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage25 };
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray26);
        org.springframework.core.io.ResourceLoader resourceLoader28 = null;
        undertowEmbeddedServletContainerFactory16.resourceLoader = resourceLoader28;
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory16.setDocumentRoot(file30);
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory16.resourceLoader = resourceLoader32;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        java.util.Map<java.lang.String, java.lang.String> strMap39 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer40 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer42 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap41);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38, initParameterConfiguringServletContextInitializer40, initParameterConfiguringServletContextInitializer42 };
        initializer34.initializers = servletContextInitializerArray43;
        undertowEmbeddedServletContainerFactory16.addInitializers(servletContextInitializerArray43);
        org.springframework.core.io.ResourceLoader resourceLoader46 = null;
        undertowEmbeddedServletContainerFactory16.resourceLoader = resourceLoader46;
        undertowEmbeddedServletContainerFactory16.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress52 = null;
        undertowEmbeddedServletContainerFactory51.setAddress(inetAddress52);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory51.setSessionStoreDir(file54);
        org.springframework.boot.context.embedded.Compression compression56 = undertowEmbeddedServletContainerFactory51.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection59 = undertowEmbeddedServletContainerFactory58.getBuilderCustomizers();
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory58.workerThreads;
        undertowEmbeddedServletContainerFactory58.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory58.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection67 = undertowEmbeddedServletContainerFactory66.getBuilderCustomizers();
        java.lang.Integer int68 = undertowEmbeddedServletContainerFactory66.workerThreads;
        undertowEmbeddedServletContainerFactory66.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file71 = null;
        undertowEmbeddedServletContainerFactory66.setAccessLogDirectory(file71);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo73 = null;
        undertowEmbeddedServletContainerFactory66.configureErrorPages(deploymentInfo73);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer75 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray76 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer75 };
        undertowEmbeddedServletContainerFactory66.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray76);
        undertowEmbeddedServletContainerFactory58.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray76);
        undertowEmbeddedServletContainerFactory51.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray76);
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray76);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray76);
        boolean boolean82 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(resourceManager14);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection20);
        org.junit.Assert.assertNotNull(errorPageArray26);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNull(compression56);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory11.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, 0);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 32);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory9.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet10);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(errorPageSet10);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer21 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer21, initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27 };
        initializer19.initializers = servletContextInitializerArray28;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        org.springframework.boot.context.embedded.JspServlet jspServlet33 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNotNull(jspServlet33);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        io.undertow.server.HttpHandler httpHandler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler16 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory13.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory17.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet20 = null;
        undertowEmbeddedServletContainerFactory17.setJspServlet(jspServlet20);
        java.net.InetAddress inetAddress22 = undertowEmbeddedServletContainerFactory17.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setAccessLogDirectory(file30);
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer35 = undertowEmbeddedServletContainerFactory25.getEmbeddedServletContainer(servletContextInitializerArray34);
        initializer23.initializers = servletContextInitializerArray34;
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = undertowEmbeddedServletContainerFactory17.createDeploymentManager(servletContextInitializerArray34);
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray34);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray34);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo40 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo40);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        io.undertow.server.HttpHandler httpHandler44 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler45 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(inetAddress22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        org.junit.Assert.assertNotNull(embeddedServletContainer35);
        org.junit.Assert.assertNotNull(deploymentManager37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(10);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl18);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        boolean boolean23 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        java.io.File file24 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(file24);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory12.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet15 = null;
        undertowEmbeddedServletContainerFactory12.setJspServlet(jspServlet15);
        java.io.File file17 = undertowEmbeddedServletContainerFactory12.getDocumentRoot();
        undertowEmbeddedServletContainerFactory12.accessLogPattern = "";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer24 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer26 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer28 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap27);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer22, initParameterConfiguringServletContextInitializer24, initParameterConfiguringServletContextInitializer26, initParameterConfiguringServletContextInitializer28 };
        initializer20.initializers = servletContextInitializerArray29;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = initializer20.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        undertowEmbeddedServletContainerFactory33.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory33.setAccessLogDirectory(file38);
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer43 = undertowEmbeddedServletContainerFactory33.getEmbeddedServletContainer(servletContextInitializerArray42);
        initializer20.initializers = servletContextInitializerArray42;
        undertowEmbeddedServletContainerFactory12.addInitializers(servletContextInitializerArray42);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray42);
        java.lang.ClassLoader classLoader47 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.ErrorPage errorPage48 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage49 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(file17);
        org.junit.Assert.assertNotNull(servletContextInitializerArray29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        org.junit.Assert.assertNotNull(embeddedServletContainer43);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        int int16 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        java.lang.String str20 = undertowEmbeddedServletContainerFactory18.accessLogPattern;
        undertowEmbeddedServletContainerFactory18.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray26 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory24.addErrorPages(errorPageArray26);
        undertowEmbeddedServletContainerFactory18.addErrorPages(errorPageArray26);
        java.net.InetAddress inetAddress29 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress29);
        org.springframework.boot.context.embedded.Ssl ssl31 = undertowEmbeddedServletContainerFactory18.getSsl();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList32 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList32;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1800 + "'", int16 == 1800);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(errorPageArray26);
        org.junit.Assert.assertNull(ssl31);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList32);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Compression compression4 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory6.setJspServlet(jspServlet9);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory6.resourceLoader = resourceLoader11;
        int int13 = undertowEmbeddedServletContainerFactory6.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        initializer14.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = initializer14.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer14.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        int int41 = undertowEmbeddedServletContainerFactory1.getPort();
        org.xnio.XnioWorker xnioWorker42 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        boolean boolean45 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(compression4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(xnioWorker42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 0);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory13.setCompression(compression15);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection17 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet18 = undertowEmbeddedServletContainerFactory13.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet18);
        java.io.File file20 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection17);
        org.junit.Assert.assertNotNull(errorPageSet18);
        org.junit.Assert.assertNull(file20);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory15.resourceLoader = resourceLoader18;
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory15.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setAccessLogDirectory(file39);
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer44 = undertowEmbeddedServletContainerFactory34.getEmbeddedServletContainer(servletContextInitializerArray43);
        initializer21.initializers = servletContextInitializerArray43;
        io.undertow.servlet.api.DeploymentManager deploymentManager46 = undertowEmbeddedServletContainerFactory15.createDeploymentManager(servletContextInitializerArray43);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray43);
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader48;
        java.net.InetAddress inetAddress50 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress50);
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(resourceLoader20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        org.junit.Assert.assertNotNull(embeddedServletContainer44);
        org.junit.Assert.assertNotNull(deploymentManager46);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file19 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory23.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory23.getJspServlet();
        undertowEmbeddedServletContainerFactory21.setJspServlet(jspServlet26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory31.ioThreads;
        org.springframework.boot.context.embedded.Compression compression33 = null;
        undertowEmbeddedServletContainerFactory31.setCompression(compression33);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection35 = undertowEmbeddedServletContainerFactory31.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo36 = null;
        undertowEmbeddedServletContainerFactory31.configureErrorPages(deploymentInfo36);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList38 = undertowEmbeddedServletContainerFactory31.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory29.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList40 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        undertowEmbeddedServletContainerFactory21.builderCustomizers = undertowBuilderCustomizerList40;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo42 = null;
        undertowEmbeddedServletContainerFactory21.configureErrorPages(deploymentInfo42);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader46 = null;
        undertowEmbeddedServletContainerFactory45.setResourceLoader(resourceLoader46);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray48 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList49 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList49, undertowDeploymentInfoCustomizerArray48);
        undertowEmbeddedServletContainerFactory45.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList49;
        org.springframework.boot.context.embedded.Ssl ssl52 = undertowEmbeddedServletContainerFactory45.getSsl();
        io.undertow.Undertow.Builder builder54 = undertowEmbeddedServletContainerFactory45.createBuilder((int) (short) 100);
        undertowEmbeddedServletContainerFactory45.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory58.ioThreads;
        org.springframework.boot.context.embedded.Compression compression60 = null;
        undertowEmbeddedServletContainerFactory58.setCompression(compression60);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection62 = undertowEmbeddedServletContainerFactory58.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo63 = null;
        undertowEmbeddedServletContainerFactory58.configureErrorPages(deploymentInfo63);
        java.net.InetAddress inetAddress65 = null;
        undertowEmbeddedServletContainerFactory58.setAddress(inetAddress65);
        java.lang.Integer int67 = undertowEmbeddedServletContainerFactory58.workerThreads;
        undertowEmbeddedServletContainerFactory58.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList70 = undertowEmbeddedServletContainerFactory58.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory58.ioThreads = 0;
        undertowEmbeddedServletContainerFactory58.bufferSize = 100;
        java.io.File file75 = undertowEmbeddedServletContainerFactory58.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory77 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory77.ioThreads;
        java.lang.String str79 = undertowEmbeddedServletContainerFactory77.accessLogPattern;
        undertowEmbeddedServletContainerFactory77.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory83 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int84 = undertowEmbeddedServletContainerFactory83.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray85 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory83.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory77.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory58.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory45.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray85);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray85);
        org.springframework.boot.context.embedded.ErrorPage errorPage92 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage93 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0.0.0.0" + "'", str16, "0.0.0.0");
        org.junit.Assert.assertNull(file19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList40);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(ssl52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection62);
        org.junit.Assert.assertNull(int67);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList70);
        org.junit.Assert.assertNull(file75);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(int84);
        org.junit.Assert.assertNotNull(errorPageArray85);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo3 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo3);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file10);
        org.springframework.boot.context.embedded.Ssl ssl12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode13 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression5);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        boolean boolean24 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean25 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(ssl19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection45 = undertowEmbeddedServletContainerFactory44.getBuilderCustomizers();
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory44.workerThreads;
        undertowEmbeddedServletContainerFactory44.setDisplayName("hi!");
        java.lang.String str49 = undertowEmbeddedServletContainerFactory44.getListenAddress();
        undertowEmbeddedServletContainerFactory44.setBuffersPerRegion((java.lang.Integer) 100);
        boolean boolean52 = undertowEmbeddedServletContainerFactory44.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader53 = null;
        undertowEmbeddedServletContainerFactory44.resourceLoader = resourceLoader53;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings55 = undertowEmbeddedServletContainerFactory44.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings55);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 32);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0.0.0.0" + "'", str49, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(mimeMappings55);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str11 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource15 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(jspServlet4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int24 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 10);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0.0.0.0" + "'", str13, "0.0.0.0");
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo13);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression16);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory24.setCompression(compression26);
        int int28 = undertowEmbeddedServletContainerFactory24.getSessionTimeout();
        undertowEmbeddedServletContainerFactory24.buffersPerRegion = 100;
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer32 };
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        org.springframework.boot.context.embedded.JspServlet jspServlet37 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1800 + "'", int28 == 1800);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray33);
        org.junit.Assert.assertNotNull(jspServlet37);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression6 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression6);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.Ssl ssl13 = null;
        io.undertow.Undertow.Builder builder15 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl13, 0, builder15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file12);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 10);
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setPort(97);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet59 = undertowEmbeddedServletContainerFactory54.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory61.ioThreads;
        java.lang.String str63 = undertowEmbeddedServletContainerFactory61.accessLogPattern;
        undertowEmbeddedServletContainerFactory61.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray66 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList67 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList67, undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory61.builderCustomizers = undertowBuilderCustomizerList67;
        undertowEmbeddedServletContainerFactory54.builderCustomizers = undertowBuilderCustomizerList67;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList67;
        java.lang.Integer int72 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.ErrorPage errorPage73 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage74 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        org.junit.Assert.assertNotNull(errorPageSet59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(int72);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        undertowEmbeddedServletContainerFactory8.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList14, undertowBuilderCustomizerArray13);
        undertowEmbeddedServletContainerFactory8.builderCustomizers = undertowBuilderCustomizerList14;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection20 = undertowEmbeddedServletContainerFactory19.getBuilderCustomizers();
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory19.workerThreads;
        undertowEmbeddedServletContainerFactory19.setUseForwardHeaders(false);
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory19.createBuilder(0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory27.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet30 = null;
        undertowEmbeddedServletContainerFactory27.setJspServlet(jspServlet30);
        java.io.File file32 = undertowEmbeddedServletContainerFactory27.getDocumentRoot();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory27.buffersPerRegion;
        undertowEmbeddedServletContainerFactory27.setPort((int) (short) 0);
        java.net.InetAddress inetAddress36 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory38.ioThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory38.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager41 = undertowEmbeddedServletContainerFactory38.getDocumentRootResourceManager();
        boolean boolean42 = undertowEmbeddedServletContainerFactory38.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo43 = null;
        undertowEmbeddedServletContainerFactory38.configureErrorPages(deploymentInfo43);
        undertowEmbeddedServletContainerFactory38.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory38.bufferSize = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory50.setDocumentRoot(file53);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection55 = undertowEmbeddedServletContainerFactory50.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection58 = undertowEmbeddedServletContainerFactory57.getBuilderCustomizers();
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory57.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader60 = null;
        undertowEmbeddedServletContainerFactory57.resourceLoader = resourceLoader60;
        org.springframework.core.io.ResourceLoader resourceLoader62 = undertowEmbeddedServletContainerFactory57.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer65 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap64);
        java.util.Map<java.lang.String, java.lang.String> strMap66 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer67 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap66);
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer69 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap68);
        java.util.Map<java.lang.String, java.lang.String> strMap70 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer71 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap70);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray72 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer65, initParameterConfiguringServletContextInitializer67, initParameterConfiguringServletContextInitializer69, initParameterConfiguringServletContextInitializer71 };
        initializer63.initializers = servletContextInitializerArray72;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray74 = initializer63.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection77 = undertowEmbeddedServletContainerFactory76.getBuilderCustomizers();
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory76.workerThreads;
        undertowEmbeddedServletContainerFactory76.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file81 = null;
        undertowEmbeddedServletContainerFactory76.setAccessLogDirectory(file81);
        undertowEmbeddedServletContainerFactory76.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray85 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer86 = undertowEmbeddedServletContainerFactory76.getEmbeddedServletContainer(servletContextInitializerArray85);
        initializer63.initializers = servletContextInitializerArray85;
        io.undertow.servlet.api.DeploymentManager deploymentManager88 = undertowEmbeddedServletContainerFactory57.createDeploymentManager(servletContextInitializerArray85);
        undertowEmbeddedServletContainerFactory50.addInitializers(servletContextInitializerArray85);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer90 = undertowEmbeddedServletContainerFactory38.getEmbeddedServletContainer(servletContextInitializerArray85);
        io.undertow.servlet.api.DeploymentManager deploymentManager91 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray85);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer93 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder25, deploymentManager91, (int) (byte) 0);
        java.lang.ClassLoader classLoader94 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageSet6);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(file32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(inetAddress36);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(resourceManager41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection55);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection58);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(resourceLoader62);
        org.junit.Assert.assertNotNull(servletContextInitializerArray72);
        org.junit.Assert.assertNotNull(servletContextInitializerArray74);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection77);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(servletContextInitializerArray85);
        org.junit.Assert.assertNotNull(embeddedServletContainer86);
        org.junit.Assert.assertNotNull(deploymentManager88);
        org.junit.Assert.assertNotNull(embeddedServletContainer90);
        org.junit.Assert.assertNotNull(deploymentManager91);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer93);
        org.junit.Assert.assertNotNull(classLoader94);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory13.getBuilderCustomizers();
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory13.workerThreads;
        undertowEmbeddedServletContainerFactory13.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory13.setAccessLogDirectory(file18);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo20 = null;
        undertowEmbeddedServletContainerFactory13.configureErrorPages(deploymentInfo20);
        undertowEmbeddedServletContainerFactory13.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory13.setWorkerThreads((java.lang.Integer) 1800);
        java.lang.String str26 = undertowEmbeddedServletContainerFactory13.accessLogPattern;
        undertowEmbeddedServletContainerFactory13.setSessionTimeout(10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList29 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList29;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList29);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 52;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(mimeMappings14);
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file18 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.net.InetAddress inetAddress20 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        boolean boolean23 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader24 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader24;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(resourceLoader17);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertNull(ssl19);
        org.junit.Assert.assertNull(inetAddress20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        int int6 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.util.concurrent.TimeUnit timeUnit8 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 100, timeUnit8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1800 + "'", int6 == 1800);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList17, undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory11.builderCustomizers = undertowBuilderCustomizerList17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory30.ioThreads;
        java.lang.String str32 = undertowEmbeddedServletContainerFactory30.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl33 = null;
        undertowEmbeddedServletContainerFactory30.setSsl(ssl33);
        int int35 = undertowEmbeddedServletContainerFactory30.getPort();
        undertowEmbeddedServletContainerFactory30.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory39.getBuilderCustomizers();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory39.workerThreads;
        undertowEmbeddedServletContainerFactory39.setUseForwardHeaders(false);
        java.lang.String str44 = undertowEmbeddedServletContainerFactory39.getDisplayName();
        undertowEmbeddedServletContainerFactory39.setBufferSize((java.lang.Integer) 1);
        boolean boolean47 = undertowEmbeddedServletContainerFactory39.isRegisterDefaultServlet();
        java.lang.Boolean boolean48 = undertowEmbeddedServletContainerFactory39.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList49 = undertowEmbeddedServletContainerFactory39.builderCustomizers;
        undertowEmbeddedServletContainerFactory30.builderCustomizers = undertowBuilderCustomizerList49;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory58.ioThreads;
        org.springframework.boot.context.embedded.Compression compression60 = null;
        undertowEmbeddedServletContainerFactory58.setCompression(compression60);
        undertowEmbeddedServletContainerFactory58.setRegisterJspServlet(true);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory58.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet65 = undertowEmbeddedServletContainerFactory58.getJspServlet();
        undertowEmbeddedServletContainerFactory52.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory11.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet65);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        java.net.InetAddress inetAddress72 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress72);
        org.xnio.XnioWorker xnioWorker74 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(boolean48);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNull(int59);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNotNull(jspServlet65);
        org.junit.Assert.assertNotNull(xnioWorker74);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection23 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection23);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 100);
        io.undertow.server.HttpHandler httpHandler14 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler15 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder26, deploymentManager27, (int) '4');
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory10.setSessionStoreDir(file30);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory10.buffersPerRegion;
        int int33 = undertowEmbeddedServletContainerFactory10.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory35.setAccessLogDirectory(file40);
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getEmbeddedServletContainer(servletContextInitializerArray44);
        org.springframework.core.io.ResourceLoader resourceLoader46 = null;
        undertowEmbeddedServletContainerFactory35.setResourceLoader(resourceLoader46);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection53 = undertowEmbeddedServletContainerFactory49.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory49.configureErrorPages(deploymentInfo54);
        java.net.InetAddress inetAddress56 = null;
        undertowEmbeddedServletContainerFactory49.setAddress(inetAddress56);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory49.workerThreads;
        java.io.File file59 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file59);
        boolean boolean61 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory63.ioThreads;
        org.springframework.boot.context.embedded.Compression compression65 = null;
        undertowEmbeddedServletContainerFactory63.setCompression(compression65);
        undertowEmbeddedServletContainerFactory63.setRegisterJspServlet(true);
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory63.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet70 = undertowEmbeddedServletContainerFactory63.getJspServlet();
        undertowEmbeddedServletContainerFactory49.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory35.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory10.setJspServlet(jspServlet70);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet70);
        boolean boolean75 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(mimeMappings20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(embeddedServletContainer45);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection53);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(jspServlet70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNotNull(resourceManager12);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.bufferSize = 10;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList6 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.Compression compression12 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList6);
        org.junit.Assert.assertNotNull(mimeMappings7);
        org.junit.Assert.assertNull(compression12);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 1);
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.springframework.boot.context.embedded.JspServlet jspServlet16 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jspServlet16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        boolean boolean11 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean12 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        org.springframework.boot.context.embedded.Compression compression56 = null;
        undertowEmbeddedServletContainerFactory54.setCompression(compression56);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet59 = undertowEmbeddedServletContainerFactory54.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory61.ioThreads;
        java.lang.String str63 = undertowEmbeddedServletContainerFactory61.accessLogPattern;
        undertowEmbeddedServletContainerFactory61.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray66 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList67 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList67, undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory61.builderCustomizers = undertowBuilderCustomizerList67;
        undertowEmbeddedServletContainerFactory54.builderCustomizers = undertowBuilderCustomizerList67;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList67;
        java.lang.Integer int72 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory74 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int75 = undertowEmbeddedServletContainerFactory74.ioThreads;
        org.springframework.boot.context.embedded.Compression compression76 = null;
        undertowEmbeddedServletContainerFactory74.setCompression(compression76);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection78 = undertowEmbeddedServletContainerFactory74.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo79 = null;
        undertowEmbeddedServletContainerFactory74.configureErrorPages(deploymentInfo79);
        java.net.InetAddress inetAddress81 = null;
        undertowEmbeddedServletContainerFactory74.setAddress(inetAddress81);
        org.springframework.boot.context.embedded.ErrorPage errorPage83 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray84 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage83 };
        undertowEmbeddedServletContainerFactory74.addErrorPages(errorPageArray84);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray84);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        org.junit.Assert.assertNotNull(errorPageSet59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection78);
        org.junit.Assert.assertNotNull(errorPageArray84);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        java.lang.Boolean boolean24 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader25;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + false + "'", boolean24, false);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        io.undertow.server.handlers.resource.ResourceManager resourceManager16 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNotNull(resourceManager16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl14 = undertowEmbeddedServletContainerFactory1.getSsl();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray15 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(ssl14);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(0);
        org.springframework.boot.context.embedded.Compression compression6 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression6);
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode9 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ssl12);
        org.junit.Assert.assertNull(resourceLoader17);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings2 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory1.getAddress();
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        io.undertow.server.handlers.resource.ResourceManager resourceManager9 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.junit.Assert.assertNotNull(mimeMappings2);
        org.junit.Assert.assertNull(inetAddress3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(resourceManager9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.util.concurrent.TimeUnit timeUnit8 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(97, timeUnit8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        java.lang.String str4 = jarResourceManager0.jarPath;
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        java.lang.String str8 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        boolean boolean10 = jarResourceManager0.isResourceChangeListenerSupported();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.net.InetAddress inetAddress18 = null;
        undertowEmbeddedServletContainerFactory11.setAddress(inetAddress18);
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory11.setResourceLoader(resourceLoader20);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory11.setAccessLogDirectory(file22);
        org.springframework.core.io.ResourceLoader resourceLoader24 = undertowEmbeddedServletContainerFactory11.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.buffersPerRegion;
        java.io.File file29 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file29);
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory26.resourceLoader = resourceLoader31;
        undertowEmbeddedServletContainerFactory26.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList35 = undertowEmbeddedServletContainerFactory26.builderCustomizers;
        undertowEmbeddedServletContainerFactory11.builderCustomizers = undertowBuilderCustomizerList35;
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory11.createBuilder(0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory40.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory40.setJspServletClassName("0.0.0.0");
        java.io.File file49 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.JspServlet jspServlet50 = undertowEmbeddedServletContainerFactory40.getJspServlet();
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file51);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection55 = undertowEmbeddedServletContainerFactory54.getBuilderCustomizers();
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory54.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader57 = null;
        undertowEmbeddedServletContainerFactory54.resourceLoader = resourceLoader57;
        org.springframework.core.io.ResourceLoader resourceLoader59 = undertowEmbeddedServletContainerFactory54.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader60 = null;
        undertowEmbeddedServletContainerFactory54.resourceLoader = resourceLoader60;
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory54.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection65 = undertowEmbeddedServletContainerFactory64.getBuilderCustomizers();
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory64.workerThreads;
        undertowEmbeddedServletContainerFactory64.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file69 = null;
        undertowEmbeddedServletContainerFactory64.setAccessLogDirectory(file69);
        undertowEmbeddedServletContainerFactory64.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray73 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer74 = undertowEmbeddedServletContainerFactory64.getEmbeddedServletContainer(servletContextInitializerArray73);
        io.undertow.servlet.api.DeploymentManager deploymentManager75 = undertowEmbeddedServletContainerFactory54.createDeploymentManager(servletContextInitializerArray73);
        io.undertow.servlet.api.DeploymentManager deploymentManager76 = undertowEmbeddedServletContainerFactory40.createDeploymentManager(servletContextInitializerArray73);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer78 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder38, deploymentManager76, (int) (byte) 0);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNull(resourceLoader24);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNull(file49);
        org.junit.Assert.assertNotNull(jspServlet50);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNull(resourceLoader59);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(servletContextInitializerArray73);
        org.junit.Assert.assertNotNull(embeddedServletContainer74);
        org.junit.Assert.assertNotNull(deploymentManager75);
        org.junit.Assert.assertNotNull(deploymentManager76);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer78);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        org.springframework.boot.context.embedded.ErrorPage errorPage17 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage18 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory46.buffersPerRegion = 100;
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory46.setAccessLogDirectory(file49);
        undertowEmbeddedServletContainerFactory46.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str53 = undertowEmbeddedServletContainerFactory46.getListenAddress();
        java.lang.Boolean boolean54 = undertowEmbeddedServletContainerFactory46.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl55 = null;
        undertowEmbeddedServletContainerFactory46.setSsl(ssl55);
        undertowEmbeddedServletContainerFactory46.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean62 = undertowEmbeddedServletContainerFactory61.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection65 = undertowEmbeddedServletContainerFactory64.getBuilderCustomizers();
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory64.workerThreads;
        undertowEmbeddedServletContainerFactory64.setUseForwardHeaders(false);
        java.lang.String str69 = undertowEmbeddedServletContainerFactory64.getDisplayName();
        undertowEmbeddedServletContainerFactory64.setBufferSize((java.lang.Integer) 1);
        boolean boolean72 = undertowEmbeddedServletContainerFactory64.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory74 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection75 = undertowEmbeddedServletContainerFactory74.getBuilderCustomizers();
        java.lang.Integer int76 = undertowEmbeddedServletContainerFactory74.workerThreads;
        undertowEmbeddedServletContainerFactory74.setUseForwardHeaders(false);
        java.lang.String str79 = undertowEmbeddedServletContainerFactory74.getDisplayName();
        undertowEmbeddedServletContainerFactory74.setBufferSize((java.lang.Integer) 1);
        boolean boolean82 = undertowEmbeddedServletContainerFactory74.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory84 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection85 = undertowEmbeddedServletContainerFactory84.getBuilderCustomizers();
        java.lang.Integer int86 = undertowEmbeddedServletContainerFactory84.workerThreads;
        undertowEmbeddedServletContainerFactory84.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray89 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory84.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory74.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory64.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory61.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory46.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        java.net.InetAddress inetAddress96 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.0.0.0" + "'", str53, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + true + "'", boolean54, true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection75);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection85);
        org.junit.Assert.assertNull(int86);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray89);
        org.junit.Assert.assertNull(inetAddress96);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        int int8 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(inetAddress2);
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(0);
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file20 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        undertowEmbeddedServletContainerFactory28.setRegisterJspServlet(true);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory28.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet35 = undertowEmbeddedServletContainerFactory28.getJspServlet();
        undertowEmbeddedServletContainerFactory22.setJspServlet(jspServlet35);
        undertowEmbeddedServletContainerFactory22.accessLogEnabled = false;
        java.lang.String str39 = undertowEmbeddedServletContainerFactory22.getDisplayName();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet40 = undertowEmbeddedServletContainerFactory22.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet40);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNull(file20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(jspServlet35);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(errorPageSet40);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray14 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings15 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl17 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl17);
        org.springframework.boot.context.embedded.Ssl ssl19 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl19);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 52);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(mimeMappings14);
        org.junit.Assert.assertNotNull(mimeMappings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.io.File file18 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 32);
        boolean boolean24 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        boolean boolean11 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean12 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.core.io.ResourceLoader resourceLoader15 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.Ssl ssl16 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl16);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(file11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(resourceLoader15);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1800);
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        int int26 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.io.File file27 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1800 + "'", int26 == 1800);
        org.junit.Assert.assertNull(file27);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 10);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(ssl8);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList9 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        io.undertow.server.HttpHandler httpHandler10 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler11 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList9);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.String str17 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader20;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        io.undertow.server.handlers.resource.ResourceManager resourceManager3 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(resourceManager3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(compression5);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) -1);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file4;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file7;
        org.xnio.XnioWorker xnioWorker9 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        org.junit.Assert.assertNotNull(xnioWorker9);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer10 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap9);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer12 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer14 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap13);
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray17 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer10, initParameterConfiguringServletContextInitializer12, initParameterConfiguringServletContextInitializer14, initParameterConfiguringServletContextInitializer16 };
        initializer8.initializers = servletContextInitializerArray17;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = initializer8.initializers;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray19);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
        org.junit.Assert.assertNotNull(servletContextInitializerArray17);
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.boot.context.embedded.Ssl ssl13 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl13);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory16.buffersPerRegion = 100;
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file19);
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory16.getListenAddress();
        java.lang.Boolean boolean24 = undertowEmbeddedServletContainerFactory16.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl25 = null;
        undertowEmbeddedServletContainerFactory16.setSsl(ssl25);
        undertowEmbeddedServletContainerFactory16.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory34.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory34.workerThreads;
        undertowEmbeddedServletContainerFactory34.setUseForwardHeaders(false);
        java.lang.String str39 = undertowEmbeddedServletContainerFactory34.getDisplayName();
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 1);
        boolean boolean42 = undertowEmbeddedServletContainerFactory34.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection45 = undertowEmbeddedServletContainerFactory44.getBuilderCustomizers();
        java.lang.Integer int46 = undertowEmbeddedServletContainerFactory44.workerThreads;
        undertowEmbeddedServletContainerFactory44.setUseForwardHeaders(false);
        java.lang.String str49 = undertowEmbeddedServletContainerFactory44.getDisplayName();
        undertowEmbeddedServletContainerFactory44.setBufferSize((java.lang.Integer) 1);
        boolean boolean52 = undertowEmbeddedServletContainerFactory44.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection55 = undertowEmbeddedServletContainerFactory54.getBuilderCustomizers();
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory54.workerThreads;
        undertowEmbeddedServletContainerFactory54.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray59 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory54.addBuilderCustomizers(undertowBuilderCustomizerArray59);
        undertowEmbeddedServletContainerFactory44.addBuilderCustomizers(undertowBuilderCustomizerArray59);
        undertowEmbeddedServletContainerFactory34.addBuilderCustomizers(undertowBuilderCustomizerArray59);
        undertowEmbeddedServletContainerFactory31.addBuilderCustomizers(undertowBuilderCustomizerArray59);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray59);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray59);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0.0.0.0" + "'", str23, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean24 + "' != '" + true + "'", boolean24, true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection45);
        org.junit.Assert.assertNull(int46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection55);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray59);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        org.xnio.XnioWorker xnioWorker25 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNotNull(xnioWorker25);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList4 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList4, undertowBuilderCustomizerArray3);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList4;
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.util.concurrent.TimeUnit timeUnit9 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(100, timeUnit9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection4 = undertowEmbeddedServletContainerFactory3.getBuilderCustomizers();
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory3.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet6 = undertowEmbeddedServletContainerFactory3.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet6);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory9.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory9.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList20;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory23.ioThreads;
        org.springframework.boot.context.embedded.Compression compression25 = null;
        undertowEmbeddedServletContainerFactory23.setCompression(compression25);
        int int27 = undertowEmbeddedServletContainerFactory23.getSessionTimeout();
        undertowEmbeddedServletContainerFactory23.buffersPerRegion = 100;
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory23.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer31 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray32 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer31 };
        undertowEmbeddedServletContainerFactory23.addBuilderCustomizers(undertowBuilderCustomizerArray32);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray32);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        boolean boolean37 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(jspServlet6);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1800 + "'", int27 == 1800);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.util.concurrent.TimeUnit timeUnit20 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) ' ', timeUnit20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(int18);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.Boolean boolean16 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(compression13);
        org.junit.Assert.assertNull(boolean16);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory46.buffersPerRegion = 100;
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory46.setAccessLogDirectory(file49);
        undertowEmbeddedServletContainerFactory46.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str53 = undertowEmbeddedServletContainerFactory46.getListenAddress();
        java.lang.Boolean boolean54 = undertowEmbeddedServletContainerFactory46.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl55 = null;
        undertowEmbeddedServletContainerFactory46.setSsl(ssl55);
        undertowEmbeddedServletContainerFactory46.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean62 = undertowEmbeddedServletContainerFactory61.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection65 = undertowEmbeddedServletContainerFactory64.getBuilderCustomizers();
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory64.workerThreads;
        undertowEmbeddedServletContainerFactory64.setUseForwardHeaders(false);
        java.lang.String str69 = undertowEmbeddedServletContainerFactory64.getDisplayName();
        undertowEmbeddedServletContainerFactory64.setBufferSize((java.lang.Integer) 1);
        boolean boolean72 = undertowEmbeddedServletContainerFactory64.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory74 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection75 = undertowEmbeddedServletContainerFactory74.getBuilderCustomizers();
        java.lang.Integer int76 = undertowEmbeddedServletContainerFactory74.workerThreads;
        undertowEmbeddedServletContainerFactory74.setUseForwardHeaders(false);
        java.lang.String str79 = undertowEmbeddedServletContainerFactory74.getDisplayName();
        undertowEmbeddedServletContainerFactory74.setBufferSize((java.lang.Integer) 1);
        boolean boolean82 = undertowEmbeddedServletContainerFactory74.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory84 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection85 = undertowEmbeddedServletContainerFactory84.getBuilderCustomizers();
        java.lang.Integer int86 = undertowEmbeddedServletContainerFactory84.workerThreads;
        undertowEmbeddedServletContainerFactory84.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray89 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory84.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory74.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory64.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory61.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory46.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray89);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0.0.0.0" + "'", str53, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean54 + "' != '" + true + "'", boolean54, true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection75);
        org.junit.Assert.assertNull(int76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection85);
        org.junit.Assert.assertNull(int86);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray89);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray19);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean24 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory12.setCompression(compression14);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory12.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        java.net.InetAddress inetAddress19 = null;
        undertowEmbeddedServletContainerFactory12.setAddress(inetAddress19);
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory12.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory24.setPersistSession(false);
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory24.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory12.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) '4');
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory12.setSessionStoreDir(file32);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory12.buffersPerRegion;
        io.undertow.Undertow.Builder builder36 = undertowEmbeddedServletContainerFactory12.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory38.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet41 = null;
        undertowEmbeddedServletContainerFactory38.setJspServlet(jspServlet41);
        java.net.InetAddress inetAddress43 = undertowEmbeddedServletContainerFactory38.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection47 = undertowEmbeddedServletContainerFactory46.getBuilderCustomizers();
        java.lang.Integer int48 = undertowEmbeddedServletContainerFactory46.workerThreads;
        undertowEmbeddedServletContainerFactory46.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory46.setAccessLogDirectory(file51);
        undertowEmbeddedServletContainerFactory46.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray55 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer56 = undertowEmbeddedServletContainerFactory46.getEmbeddedServletContainer(servletContextInitializerArray55);
        initializer44.initializers = servletContextInitializerArray55;
        io.undertow.servlet.api.DeploymentManager deploymentManager58 = undertowEmbeddedServletContainerFactory38.createDeploymentManager(servletContextInitializerArray55);
        undertowEmbeddedServletContainerFactory12.addInitializers(servletContextInitializerArray55);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer60 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray55);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory62.ioThreads;
        java.lang.String str64 = undertowEmbeddedServletContainerFactory62.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl65 = null;
        undertowEmbeddedServletContainerFactory62.setSsl(ssl65);
        int int67 = undertowEmbeddedServletContainerFactory62.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory69 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int70 = undertowEmbeddedServletContainerFactory69.ioThreads;
        org.springframework.boot.context.embedded.Compression compression71 = null;
        undertowEmbeddedServletContainerFactory69.setCompression(compression71);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection73 = undertowEmbeddedServletContainerFactory69.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo74 = null;
        undertowEmbeddedServletContainerFactory69.configureErrorPages(deploymentInfo74);
        java.net.InetAddress inetAddress76 = null;
        undertowEmbeddedServletContainerFactory69.setAddress(inetAddress76);
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory69.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings79 = undertowEmbeddedServletContainerFactory69.getMimeMappings();
        undertowEmbeddedServletContainerFactory62.setMimeMappings(mimeMappings79);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings79);
        java.io.File file82 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        java.io.File file85 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file85;
        java.io.File file87 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(mimeMappings22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(inetAddress43);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(servletContextInitializerArray55);
        org.junit.Assert.assertNotNull(embeddedServletContainer56);
        org.junit.Assert.assertNotNull(deploymentManager58);
        org.junit.Assert.assertNotNull(embeddedServletContainer60);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection73);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(mimeMappings79);
        org.junit.Assert.assertNull(file82);
        org.junit.Assert.assertNull(file87);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory11.setCompression(compression13);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory11.configureErrorPages(deploymentInfo16);
        java.net.InetAddress inetAddress18 = null;
        undertowEmbeddedServletContainerFactory11.setAddress(inetAddress18);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory11.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory11.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory23.setPersistSession(false);
        io.undertow.Undertow.Builder builder27 = undertowEmbeddedServletContainerFactory23.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager28 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer30 = undertowEmbeddedServletContainerFactory11.getUndertowEmbeddedServletContainer(builder27, deploymentManager28, (int) '4');
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory11.setSessionStoreDir(file31);
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory11.buffersPerRegion;
        int int34 = undertowEmbeddedServletContainerFactory11.getPort();
        boolean boolean35 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList38 = undertowEmbeddedServletContainerFactory37.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList38;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(mimeMappings21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer30);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList38);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory12.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        java.lang.String str24 = undertowEmbeddedServletContainerFactory22.accessLogPattern;
        undertowEmbeddedServletContainerFactory22.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray30);
        org.springframework.boot.context.embedded.Ssl ssl35 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl35);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 10;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.JspServlet jspServlet20 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.Ssl ssl21 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl21);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(jspServlet20);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.close();
        boolean boolean11 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource13 = jarResourceManager0.getResource("hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray15 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = undertowEmbeddedServletContainerFactory1.getAddress();
        int int3 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.xnio.XnioWorker xnioWorker7 = undertowEmbeddedServletContainerFactory5.createWorker();
        org.springframework.boot.context.embedded.Compression compression8 = undertowEmbeddedServletContainerFactory5.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory10.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = null;
        undertowEmbeddedServletContainerFactory10.setJspServlet(jspServlet13);
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory10.resourceLoader = resourceLoader15;
        int int17 = undertowEmbeddedServletContainerFactory10.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer24 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer26 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap25);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22, initParameterConfiguringServletContextInitializer24, initParameterConfiguringServletContextInitializer26 };
        initializer18.initializers = servletContextInitializerArray27;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = initializer18.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        undertowEmbeddedServletContainerFactory31.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory31.setAccessLogDirectory(file36);
        undertowEmbeddedServletContainerFactory31.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer41 = undertowEmbeddedServletContainerFactory31.getEmbeddedServletContainer(servletContextInitializerArray40);
        initializer18.initializers = servletContextInitializerArray40;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer43 = undertowEmbeddedServletContainerFactory10.getEmbeddedServletContainer(servletContextInitializerArray40);
        undertowEmbeddedServletContainerFactory5.addInitializers(servletContextInitializerArray40);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray40);
        org.springframework.boot.context.embedded.Ssl ssl46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode47 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(inetAddress2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(xnioWorker7);
        org.junit.Assert.assertNull(compression8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
        org.junit.Assert.assertNotNull(embeddedServletContainer41);
        org.junit.Assert.assertNotNull(embeddedServletContainer43);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file17);
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection20 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        boolean boolean21 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray13 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory21.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory21.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory29.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory29.setCompression(compression31);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory29.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        undertowEmbeddedServletContainerFactory29.configureErrorPages(deploymentInfo34);
        java.net.InetAddress inetAddress36 = null;
        undertowEmbeddedServletContainerFactory29.setAddress(inetAddress36);
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory29.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings39 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        undertowEmbeddedServletContainerFactory21.setMimeMappings(mimeMappings39);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings39);
        java.io.File file42 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.workerThreads = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory46.ioThreads;
        java.lang.String str48 = undertowEmbeddedServletContainerFactory46.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager49 = undertowEmbeddedServletContainerFactory46.getDocumentRootResourceManager();
        boolean boolean50 = undertowEmbeddedServletContainerFactory46.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo51 = null;
        undertowEmbeddedServletContainerFactory46.configureErrorPages(deploymentInfo51);
        undertowEmbeddedServletContainerFactory46.setJspServletClassName("");
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory46.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet56 = undertowEmbeddedServletContainerFactory46.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet56);
        java.io.File file58 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(ssl19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(mimeMappings39);
        org.junit.Assert.assertNull(file42);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(resourceManager49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(jspServlet56);
        org.junit.Assert.assertNull(file58);
        org.junit.Assert.assertNull(int61);
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener8 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList14, undertowBuilderCustomizerArray13);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        java.net.InetAddress inetAddress27 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.Ssl ssl28 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl28);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setPort(100);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        org.junit.Assert.assertNull(inetAddress27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer19 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap18);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17, initParameterConfiguringServletContextInitializer19 };
        initializer11.initializers = servletContextInitializerArray20;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray22 = initializer11.initializers;
        initializer10.initializers = servletContextInitializerArray22;
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray22);
        boolean boolean25 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        boolean boolean28 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray13 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(compression10);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory3.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory3.workerThreads;
        undertowEmbeddedServletContainerFactory3.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory3.ioThreads = 0;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory3.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection27 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory26.workerThreads;
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setAccessLogDirectory(file31);
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getEmbeddedServletContainer(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory21.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder19, deploymentManager38, (int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file47);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo49 = null;
        undertowEmbeddedServletContainerFactory42.configureErrorPages(deploymentInfo49);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress53 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress53);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file55);
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory52.bufferSize;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList58 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory42.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList58;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet63 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        boolean boolean64 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        boolean boolean65 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
        org.junit.Assert.assertNotNull(deploymentManager38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList58);
        org.junit.Assert.assertNotNull(errorPageSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory8.configureErrorPages(deploymentInfo13);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList15 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression16 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression16);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory8.setAccessLogDirectory(file18);
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str22 = undertowEmbeddedServletContainerFactory8.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory24.setCompression(compression26);
        int int28 = undertowEmbeddedServletContainerFactory24.getSessionTimeout();
        undertowEmbeddedServletContainerFactory24.buffersPerRegion = 100;
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory24.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer32 };
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray33);
        org.springframework.boot.context.embedded.Compression compression37 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression37);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1800);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet41 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.Ssl ssl42 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl42);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList15);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1800 + "'", int28 == 1800);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray33);
        org.junit.Assert.assertNotNull(errorPageSet41);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1800);
        boolean boolean14 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray18 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray18);
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression20);
        boolean boolean22 = undertowEmbeddedServletContainerFactory16.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer25.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory16.getEmbeddedServletContainer(servletContextInitializerArray36);
        io.undertow.servlet.api.DeploymentManager deploymentManager40 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray36);
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) -1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.springframework.core.io.ResourceLoader resourceLoader45 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(errorPageArray18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertNotNull(deploymentManager40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(resourceLoader45);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.boot.context.embedded.Compression compression12 = undertowEmbeddedServletContainerFactory1.getCompression();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = compression12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(ssl10);
        org.junit.Assert.assertNull(file11);
        org.junit.Assert.assertNull(compression12);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl18);
        boolean boolean20 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory24.setCompression(compression26);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection28 = undertowEmbeddedServletContainerFactory24.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory24.configureErrorPages(deploymentInfo29);
        java.net.InetAddress inetAddress31 = null;
        undertowEmbeddedServletContainerFactory24.setAddress(inetAddress31);
        org.springframework.boot.context.embedded.ErrorPage errorPage33 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray34 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage33 };
        undertowEmbeddedServletContainerFactory24.addErrorPages(errorPageArray34);
        org.springframework.core.io.ResourceLoader resourceLoader36 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader36;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory24.setDocumentRoot(file38);
        org.springframework.core.io.ResourceLoader resourceLoader40 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader40;
        org.springframework.boot.context.embedded.Ssl ssl42 = undertowEmbeddedServletContainerFactory24.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory44.setPersistSession(false);
        io.undertow.Undertow.Builder builder48 = undertowEmbeddedServletContainerFactory44.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory44.buffersPerRegion = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress59);
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory52.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings62 = undertowEmbeddedServletContainerFactory52.getMimeMappings();
        undertowEmbeddedServletContainerFactory44.setMimeMappings(mimeMappings62);
        undertowEmbeddedServletContainerFactory24.setMimeMappings(mimeMappings62);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings62);
        org.springframework.core.io.ResourceLoader resourceLoader66 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection28);
        org.junit.Assert.assertNotNull(errorPageArray34);
        org.junit.Assert.assertNull(ssl42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(mimeMappings62);
        org.junit.Assert.assertNull(resourceLoader66);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener7 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer16 };
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray17);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file19;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) ' ');
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList23 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        int int24 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory10.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = null;
        undertowEmbeddedServletContainerFactory10.setJspServlet(jspServlet13);
        java.io.File file15 = undertowEmbeddedServletContainerFactory10.getDocumentRoot();
        org.springframework.boot.context.embedded.Compression compression16 = undertowEmbeddedServletContainerFactory10.getCompression();
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory10.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        undertowEmbeddedServletContainerFactory27.setRegisterJspServlet(true);
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory27.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet34 = undertowEmbeddedServletContainerFactory27.getJspServlet();
        undertowEmbeddedServletContainerFactory21.setJspServlet(jspServlet34);
        undertowEmbeddedServletContainerFactory21.accessLogEnabled = false;
        java.lang.String str38 = undertowEmbeddedServletContainerFactory21.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        org.springframework.boot.context.embedded.ErrorPage errorPage49 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray50 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage49 };
        undertowEmbeddedServletContainerFactory40.addErrorPages(errorPageArray50);
        org.springframework.core.io.ResourceLoader resourceLoader52 = null;
        undertowEmbeddedServletContainerFactory40.resourceLoader = resourceLoader52;
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory40.setDocumentRoot(file54);
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory58.setAddress(inetAddress59);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory58.setSessionStoreDir(file61);
        undertowEmbeddedServletContainerFactory58.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings65 = undertowEmbeddedServletContainerFactory58.getMimeMappings();
        undertowEmbeddedServletContainerFactory40.setMimeMappings(mimeMappings65);
        undertowEmbeddedServletContainerFactory21.setMimeMappings(mimeMappings65);
        undertowEmbeddedServletContainerFactory10.setMimeMappings(mimeMappings65);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings65);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection70 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.MimeMappings mimeMappings73 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(file15);
        org.junit.Assert.assertNull(compression16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(jspServlet34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNotNull(errorPageArray50);
        org.junit.Assert.assertNull(int56);
        org.junit.Assert.assertNotNull(mimeMappings65);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection70);
        org.junit.Assert.assertNotNull(mimeMappings73);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNull(ssl7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder16 = undertowEmbeddedServletContainerFactory14.createBuilder((int) (byte) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        java.net.InetAddress inetAddress20 = undertowEmbeddedServletContainerFactory18.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo27);
        java.net.InetAddress inetAddress29 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress29);
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory22.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory34.setPersistSession(false);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory34.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer41 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder38, deploymentManager39, (int) '4');
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file42);
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory22.buffersPerRegion;
        io.undertow.Undertow.Builder builder46 = undertowEmbeddedServletContainerFactory22.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory48.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet51 = null;
        undertowEmbeddedServletContainerFactory48.setJspServlet(jspServlet51);
        java.net.InetAddress inetAddress53 = undertowEmbeddedServletContainerFactory48.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection57 = undertowEmbeddedServletContainerFactory56.getBuilderCustomizers();
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory56.workerThreads;
        undertowEmbeddedServletContainerFactory56.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory56.setAccessLogDirectory(file61);
        undertowEmbeddedServletContainerFactory56.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer66 = undertowEmbeddedServletContainerFactory56.getEmbeddedServletContainer(servletContextInitializerArray65);
        initializer54.initializers = servletContextInitializerArray65;
        io.undertow.servlet.api.DeploymentManager deploymentManager68 = undertowEmbeddedServletContainerFactory48.createDeploymentManager(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray65);
        io.undertow.servlet.api.DeploymentManager deploymentManager70 = undertowEmbeddedServletContainerFactory18.createDeploymentManager(servletContextInitializerArray65);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer72 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder16, deploymentManager70, 1800);
        java.io.File file73 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.lang.Integer int74 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mimeMappings19);
        org.junit.Assert.assertNull(inetAddress20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(mimeMappings32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer41);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(inetAddress53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        org.junit.Assert.assertNotNull(embeddedServletContainer66);
        org.junit.Assert.assertNotNull(deploymentManager68);
        org.junit.Assert.assertNotNull(deploymentManager70);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer72);
        org.junit.Assert.assertNull(file73);
        org.junit.Assert.assertNull(int74);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.boot.context.embedded.Ssl ssl17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode18 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file9);
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file12;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file4 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        java.lang.String str7 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setPort(52);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray14 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jspServlet8);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.ClassLoader classLoader7 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file10);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo3 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo3);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader10 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str7 = jarResourceManager0.jarPath;
        java.lang.String str8 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(10);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings2 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.junit.Assert.assertNotNull(mimeMappings2);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 10);
        undertowEmbeddedServletContainerFactory1.workerThreads = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory5.buffersPerRegion = 100;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory5.setAccessLogDirectory(file8);
        undertowEmbeddedServletContainerFactory5.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory5.getListenAddress();
        java.lang.Boolean boolean13 = undertowEmbeddedServletContainerFactory5.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory5.setSsl(ssl14);
        undertowEmbeddedServletContainerFactory5.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory23.getBuilderCustomizers();
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory23.workerThreads;
        undertowEmbeddedServletContainerFactory23.setUseForwardHeaders(false);
        java.lang.String str28 = undertowEmbeddedServletContainerFactory23.getDisplayName();
        undertowEmbeddedServletContainerFactory23.setBufferSize((java.lang.Integer) 1);
        boolean boolean31 = undertowEmbeddedServletContainerFactory23.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        undertowEmbeddedServletContainerFactory33.setUseForwardHeaders(false);
        java.lang.String str38 = undertowEmbeddedServletContainerFactory33.getDisplayName();
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 1);
        boolean boolean41 = undertowEmbeddedServletContainerFactory33.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        undertowEmbeddedServletContainerFactory43.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray48 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory43.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory33.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory23.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory20.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory5.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray48);
        java.io.File file55 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0.0.0.0" + "'", str12, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean13 + "' != '" + true + "'", boolean13, true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray48);
        org.junit.Assert.assertNull(file55);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.net.InetAddress inetAddress15 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory17.buffersPerRegion = 100;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory17.setAccessLogDirectory(file20);
        undertowEmbeddedServletContainerFactory17.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str24 = undertowEmbeddedServletContainerFactory17.getListenAddress();
        java.lang.Boolean boolean25 = undertowEmbeddedServletContainerFactory17.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl26 = null;
        undertowEmbeddedServletContainerFactory17.setSsl(ssl26);
        undertowEmbeddedServletContainerFactory17.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setUseForwardHeaders(false);
        java.lang.String str40 = undertowEmbeddedServletContainerFactory35.getDisplayName();
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 1);
        boolean boolean43 = undertowEmbeddedServletContainerFactory35.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection46 = undertowEmbeddedServletContainerFactory45.getBuilderCustomizers();
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory45.workerThreads;
        undertowEmbeddedServletContainerFactory45.setUseForwardHeaders(false);
        java.lang.String str50 = undertowEmbeddedServletContainerFactory45.getDisplayName();
        undertowEmbeddedServletContainerFactory45.setBufferSize((java.lang.Integer) 1);
        boolean boolean53 = undertowEmbeddedServletContainerFactory45.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection56 = undertowEmbeddedServletContainerFactory55.getBuilderCustomizers();
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory55.workerThreads;
        undertowEmbeddedServletContainerFactory55.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray60 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory55.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory45.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory35.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory32.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory17.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        boolean boolean67 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.String str68 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        int int69 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNull(inetAddress15);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0.0.0.0" + "'", str24, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1800 + "'", int69 == 1800);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) -1);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.ioThreads = 10;
        java.io.File file8 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet11 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.junit.Assert.assertNull(file8);
        org.junit.Assert.assertNotNull(errorPageSet11);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo14);
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.Ssl ssl19 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl19);
        org.xnio.XnioWorker xnioWorker21 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(xnioWorker21);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray10 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer9 };
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray10);
        java.lang.ClassLoader classLoader12 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory17.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo22 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo22);
        java.net.InetAddress inetAddress24 = null;
        undertowEmbeddedServletContainerFactory17.setAddress(inetAddress24);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory17.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings27 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory29.setPersistSession(false);
        io.undertow.Undertow.Builder builder33 = undertowEmbeddedServletContainerFactory29.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager34 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer36 = undertowEmbeddedServletContainerFactory17.getUndertowEmbeddedServletContainer(builder33, deploymentManager34, (int) '4');
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory17.setSessionStoreDir(file37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory17.buffersPerRegion;
        io.undertow.Undertow.Builder builder41 = undertowEmbeddedServletContainerFactory17.createBuilder((int) '#');
        undertowEmbeddedServletContainerFactory17.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory17.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList46 = undertowEmbeddedServletContainerFactory17.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList46;
        org.springframework.boot.context.embedded.Ssl ssl48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode49 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(mimeMappings27);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer36);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList46);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file10);
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Ssl ssl14 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.junit.Assert.assertNotNull(mimeMappings8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(ssl14);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 1);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("hi!", 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        java.lang.Boolean boolean17 = undertowEmbeddedServletContainerFactory1.directBuffers;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 0);
        org.springframework.core.io.ResourceLoader resourceLoader2 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.xnio.XnioWorker xnioWorker5 = undertowEmbeddedServletContainerFactory1.createWorker();
        int int6 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo7);
        org.junit.Assert.assertNull(resourceLoader2);
        org.junit.Assert.assertNotNull(xnioWorker5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1800 + "'", int6 == 1800);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        boolean boolean35 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean36 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.io.File file37 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.net.InetAddress inetAddress39 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress39);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(file37);
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer24 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap23);
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer26 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer28 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap27);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22, initParameterConfiguringServletContextInitializer24, initParameterConfiguringServletContextInitializer26, initParameterConfiguringServletContextInitializer28 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray29);
        java.lang.Boolean boolean31 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl32 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl32);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(servletContextInitializerArray29);
        org.junit.Assert.assertNull(boolean31);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        int int10 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory12.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        undertowEmbeddedServletContainerFactory20.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory20.setAccessLogDirectory(file25);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory20.configureErrorPages(deploymentInfo27);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray30 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer29 };
        undertowEmbeddedServletContainerFactory20.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray30);
        undertowEmbeddedServletContainerFactory12.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray30);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray30);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings34 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray30);
        org.junit.Assert.assertNotNull(mimeMappings34);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        int int16 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1800;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        java.net.InetAddress inetAddress25 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(inetAddress25);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        org.junit.Assert.assertNotNull(xnioWorker11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory9.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory17.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo22 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo22);
        java.net.InetAddress inetAddress24 = null;
        undertowEmbeddedServletContainerFactory17.setAddress(inetAddress24);
        org.springframework.boot.context.embedded.ErrorPage errorPage26 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray27 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage26 };
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray27);
        org.springframework.core.io.ResourceLoader resourceLoader29 = null;
        undertowEmbeddedServletContainerFactory17.resourceLoader = resourceLoader29;
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory17.setDocumentRoot(file31);
        org.springframework.core.io.ResourceLoader resourceLoader33 = null;
        undertowEmbeddedServletContainerFactory17.resourceLoader = resourceLoader33;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43 };
        initializer35.initializers = servletContextInitializerArray44;
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray44);
        org.springframework.core.io.ResourceLoader resourceLoader47 = null;
        undertowEmbeddedServletContainerFactory17.resourceLoader = resourceLoader47;
        undertowEmbeddedServletContainerFactory17.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress53 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress53);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file55);
        org.springframework.boot.context.embedded.Compression compression57 = undertowEmbeddedServletContainerFactory52.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        undertowEmbeddedServletContainerFactory59.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory59.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection68 = undertowEmbeddedServletContainerFactory67.getBuilderCustomizers();
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory67.workerThreads;
        undertowEmbeddedServletContainerFactory67.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file72 = null;
        undertowEmbeddedServletContainerFactory67.setAccessLogDirectory(file72);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo74 = null;
        undertowEmbeddedServletContainerFactory67.configureErrorPages(deploymentInfo74);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer76 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray77 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer76 };
        undertowEmbeddedServletContainerFactory67.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory59.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory52.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory17.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        io.undertow.server.handlers.resource.ResourceManager resourceManager84 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.xnio.XnioWorker xnioWorker87 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(jspServlet4);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        org.junit.Assert.assertNotNull(errorPageArray27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNull(compression57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection68);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray77);
        org.junit.Assert.assertNotNull(resourceManager84);
        org.junit.Assert.assertNotNull(xnioWorker87);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        undertowEmbeddedServletContainerFactory10.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray15 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList16 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList16, undertowBuilderCustomizerArray15);
        undertowEmbeddedServletContainerFactory10.builderCustomizers = undertowBuilderCustomizerList16;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        undertowEmbeddedServletContainerFactory20.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray25 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory20.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory10.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection31 = undertowEmbeddedServletContainerFactory30.getBuilderCustomizers();
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory30.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer34, initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38 };
        undertowEmbeddedServletContainerFactory30.addInitializers(servletContextInitializerArray39);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file47);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList49 = undertowEmbeddedServletContainerFactory42.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet54 = undertowEmbeddedServletContainerFactory51.getJspServlet();
        undertowEmbeddedServletContainerFactory42.setJspServlet(jspServlet54);
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet54);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet54);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(jspServlet54);
        org.junit.Assert.assertNull(int58);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.Compression compression12 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression12);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection14 = undertowEmbeddedServletContainerFactory10.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        java.net.InetAddress inetAddress17 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList22 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory10.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = null;
        undertowEmbeddedServletContainerFactory28.setJspServlet(jspServlet31);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory28.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection37 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory36.workerThreads;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setAccessLogDirectory(file41);
        undertowEmbeddedServletContainerFactory36.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory28.createDeploymentManager(servletContextInitializerArray45);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder26, deploymentManager48, 10);
        java.io.File file51 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file51;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        boolean boolean57 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo58 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo58);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection14);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(inetAddress33);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        org.junit.Assert.assertNotNull(embeddedServletContainer46);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet12 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(jspServlet12);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.lang.String str4 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0.0.0.0" + "'", str4, "0.0.0.0");
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setAccessLogDirectory(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer18 };
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file22;
        java.net.InetAddress inetAddress24 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        java.lang.String str30 = undertowEmbeddedServletContainerFactory28.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager31 = undertowEmbeddedServletContainerFactory28.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory28.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory28.setRegisterJspServlet(false);
        java.io.File file36 = undertowEmbeddedServletContainerFactory28.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList37 = undertowEmbeddedServletContainerFactory28.builderCustomizers;
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory28.bufferSize;
        org.springframework.boot.context.embedded.Ssl ssl39 = null;
        undertowEmbeddedServletContainerFactory28.setSsl(ssl39);
        undertowEmbeddedServletContainerFactory28.bufferSize = 0;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.Compression compression46 = null;
        undertowEmbeddedServletContainerFactory44.setCompression(compression46);
        int int48 = undertowEmbeddedServletContainerFactory44.getSessionTimeout();
        undertowEmbeddedServletContainerFactory44.buffersPerRegion = 100;
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory44.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader52 = undertowEmbeddedServletContainerFactory44.resourceLoader;
        undertowEmbeddedServletContainerFactory44.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 10);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray58 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory57.addBuilderCustomizers(undertowBuilderCustomizerArray58);
        undertowEmbeddedServletContainerFactory44.addBuilderCustomizers(undertowBuilderCustomizerArray58);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress63 = null;
        undertowEmbeddedServletContainerFactory62.setAddress(inetAddress63);
        java.io.File file65 = null;
        undertowEmbeddedServletContainerFactory62.setSessionStoreDir(file65);
        undertowEmbeddedServletContainerFactory62.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray69 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory62.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory44.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory28.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray69);
        org.xnio.XnioWorker xnioWorker74 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        org.junit.Assert.assertNull(inetAddress24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(resourceManager31);
        org.junit.Assert.assertNull(file36);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1800 + "'", int48 == 1800);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNull(resourceLoader52);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray58);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray69);
        org.junit.Assert.assertNotNull(xnioWorker74);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str3 = jarResourceManager0.jarPath;
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource6 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0.0.0.0" + "'", str3, "0.0.0.0");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory11.getDisplayName();
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        boolean boolean32 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory7.accessLogPattern;
        undertowEmbeddedServletContainerFactory7.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray15 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory13.addErrorPages(errorPageArray15);
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray15);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray15);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file19);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet25 = null;
        undertowEmbeddedServletContainerFactory22.setJspServlet(jspServlet25);
        org.springframework.core.io.ResourceLoader resourceLoader27 = null;
        undertowEmbeddedServletContainerFactory22.resourceLoader = resourceLoader27;
        java.lang.String str29 = undertowEmbeddedServletContainerFactory22.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory31.ioThreads;
        java.lang.String str33 = undertowEmbeddedServletContainerFactory31.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager34 = undertowEmbeddedServletContainerFactory31.getDocumentRootResourceManager();
        boolean boolean35 = undertowEmbeddedServletContainerFactory31.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo36 = null;
        undertowEmbeddedServletContainerFactory31.configureErrorPages(deploymentInfo36);
        undertowEmbeddedServletContainerFactory31.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory31.bufferSize = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.workerThreads;
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory43.setDocumentRoot(file46);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection48 = undertowEmbeddedServletContainerFactory43.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader53 = null;
        undertowEmbeddedServletContainerFactory50.resourceLoader = resourceLoader53;
        org.springframework.core.io.ResourceLoader resourceLoader55 = undertowEmbeddedServletContainerFactory50.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer58 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap57);
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer60 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap59);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer62 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer64 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap63);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer58, initParameterConfiguringServletContextInitializer60, initParameterConfiguringServletContextInitializer62, initParameterConfiguringServletContextInitializer64 };
        initializer56.initializers = servletContextInitializerArray65;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray67 = initializer56.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory69 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection70 = undertowEmbeddedServletContainerFactory69.getBuilderCustomizers();
        java.lang.Integer int71 = undertowEmbeddedServletContainerFactory69.workerThreads;
        undertowEmbeddedServletContainerFactory69.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file74 = null;
        undertowEmbeddedServletContainerFactory69.setAccessLogDirectory(file74);
        undertowEmbeddedServletContainerFactory69.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray78 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer79 = undertowEmbeddedServletContainerFactory69.getEmbeddedServletContainer(servletContextInitializerArray78);
        initializer56.initializers = servletContextInitializerArray78;
        io.undertow.servlet.api.DeploymentManager deploymentManager81 = undertowEmbeddedServletContainerFactory50.createDeploymentManager(servletContextInitializerArray78);
        undertowEmbeddedServletContainerFactory43.addInitializers(servletContextInitializerArray78);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer83 = undertowEmbeddedServletContainerFactory31.getEmbeddedServletContainer(servletContextInitializerArray78);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer84 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray78);
        io.undertow.servlet.api.DeploymentManager deploymentManager85 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray78);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(errorPageArray15);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(resourceManager34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection48);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNull(resourceLoader55);
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        org.junit.Assert.assertNotNull(servletContextInitializerArray67);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection70);
        org.junit.Assert.assertNull(int71);
        org.junit.Assert.assertNotNull(servletContextInitializerArray78);
        org.junit.Assert.assertNotNull(embeddedServletContainer79);
        org.junit.Assert.assertNotNull(deploymentManager81);
        org.junit.Assert.assertNotNull(embeddedServletContainer83);
        org.junit.Assert.assertNotNull(embeddedServletContainer84);
        org.junit.Assert.assertNotNull(deploymentManager85);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl10);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(1);
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0.0.0.0" + "'", str8, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean9 + "' != '" + true + "'", boolean9, true);
        org.junit.Assert.assertNull(resourceLoader14);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(jspServlet5);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.net.InetAddress inetAddress5 = undertowEmbeddedServletContainerFactory1.getAddress();
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.xnio.XnioWorker xnioWorker7 = undertowEmbeddedServletContainerFactory1.createWorker();
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(inetAddress5);
        org.junit.Assert.assertNotNull(resourceManager6);
        org.junit.Assert.assertNotNull(xnioWorker7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        java.net.InetAddress inetAddress17 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 32);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(inetAddress17);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        io.undertow.Undertow.Builder builder6 = null;
        io.undertow.servlet.api.DeploymentManager deploymentManager7 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer9 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder6, deploymentManager7, (int) (short) -1);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        undertowEmbeddedServletContainerFactory14.setDisplayName("hi!");
        boolean boolean19 = undertowEmbeddedServletContainerFactory14.isAccessLogEnabled();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection20 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer23 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer25 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer27 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap26);
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer23, initParameterConfiguringServletContextInitializer25, initParameterConfiguringServletContextInitializer27, initParameterConfiguringServletContextInitializer29 };
        initializer21.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = initializer21.initializers;
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.NullPointerException");
        } catch (java.lang.RuntimeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer9);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection20);
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        io.undertow.Undertow.Builder builder24 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) 1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo25);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory11.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, 0);
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory22.setDocumentRoot(file24);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory22.bufferSize;
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress27);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean31 = undertowEmbeddedServletContainerFactory30.directBuffers;
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory30.setSessionStoreDir(file32);
        undertowEmbeddedServletContainerFactory30.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection38 = undertowEmbeddedServletContainerFactory37.getBuilderCustomizers();
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory37.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet40 = undertowEmbeddedServletContainerFactory37.getJspServlet();
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet40);
        undertowEmbeddedServletContainerFactory22.setJspServlet(jspServlet40);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet40);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        undertowEmbeddedServletContainerFactory1.setPersistSession(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(boolean31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(jspServlet40);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray16);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader19);
        org.springframework.boot.context.embedded.Ssl ssl21 = undertowEmbeddedServletContainerFactory1.getSsl();
        boolean boolean22 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray16);
        org.junit.Assert.assertNull(ssl21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        java.lang.String str7 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "hi!";
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList4 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList4, undertowBuilderCustomizerArray3);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList4;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader7);
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo10);
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress18 = null;
        undertowEmbeddedServletContainerFactory17.setAddress(inetAddress18);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory17.setSessionStoreDir(file20);
        undertowEmbeddedServletContainerFactory17.bufferSize = 1800;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList24 = undertowEmbeddedServletContainerFactory17.deploymentInfoCustomizers;
        boolean boolean25 = undertowEmbeddedServletContainerFactory17.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory27.ioThreads;
        org.springframework.boot.context.embedded.Compression compression29 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression29);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection31 = undertowEmbeddedServletContainerFactory27.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        undertowEmbeddedServletContainerFactory27.configureErrorPages(deploymentInfo32);
        java.net.InetAddress inetAddress34 = null;
        undertowEmbeddedServletContainerFactory27.setAddress(inetAddress34);
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory27.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory39.setPersistSession(false);
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory39.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager44 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer46 = undertowEmbeddedServletContainerFactory27.getUndertowEmbeddedServletContainer(builder43, deploymentManager44, (int) '4');
        undertowEmbeddedServletContainerFactory27.buffersPerRegion = 1800;
        undertowEmbeddedServletContainerFactory27.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory52.ioThreads;
        org.springframework.boot.context.embedded.Compression compression54 = null;
        undertowEmbeddedServletContainerFactory52.setCompression(compression54);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection56 = undertowEmbeddedServletContainerFactory52.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo57);
        java.net.InetAddress inetAddress59 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress59);
        org.springframework.boot.context.embedded.ErrorPage errorPage61 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray62 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage61 };
        undertowEmbeddedServletContainerFactory52.addErrorPages(errorPageArray62);
        undertowEmbeddedServletContainerFactory27.addErrorPages(errorPageArray62);
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray62);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int68 = undertowEmbeddedServletContainerFactory67.ioThreads;
        org.springframework.boot.context.embedded.Compression compression69 = null;
        undertowEmbeddedServletContainerFactory67.setCompression(compression69);
        int int71 = undertowEmbeddedServletContainerFactory67.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker72 = undertowEmbeddedServletContainerFactory67.createWorker();
        undertowEmbeddedServletContainerFactory67.setSessionTimeout((int) ' ');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection77 = undertowEmbeddedServletContainerFactory76.getBuilderCustomizers();
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory76.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader79 = null;
        undertowEmbeddedServletContainerFactory76.resourceLoader = resourceLoader79;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory82 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int83 = undertowEmbeddedServletContainerFactory82.ioThreads;
        java.lang.String str84 = undertowEmbeddedServletContainerFactory82.accessLogPattern;
        undertowEmbeddedServletContainerFactory82.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory88 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int89 = undertowEmbeddedServletContainerFactory88.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray90 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory88.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory82.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory76.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory67.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray90);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray90);
        org.springframework.boot.context.embedded.Compression compression97 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(resourceLoader9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection31);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(mimeMappings37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer46);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection56);
        org.junit.Assert.assertNotNull(errorPageArray62);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1800 + "'", int71 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection77);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(int89);
        org.junit.Assert.assertNotNull(errorPageArray90);
        org.junit.Assert.assertNull(compression97);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file7);
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        io.undertow.server.HttpHandler httpHandler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler16 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jspServlet14);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 0);
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory12.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory12.bufferSize = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory24.getBuilderCustomizers();
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory24.workerThreads;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory24.setDocumentRoot(file27);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection29 = undertowEmbeddedServletContainerFactory24.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection32 = undertowEmbeddedServletContainerFactory31.getBuilderCustomizers();
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory31.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory31.resourceLoader = resourceLoader34;
        org.springframework.core.io.ResourceLoader resourceLoader36 = undertowEmbeddedServletContainerFactory31.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        java.util.Map<java.lang.String, java.lang.String> strMap44 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer45 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap44);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43, initParameterConfiguringServletContextInitializer45 };
        initializer37.initializers = servletContextInitializerArray46;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = initializer37.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection51 = undertowEmbeddedServletContainerFactory50.getBuilderCustomizers();
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory50.workerThreads;
        undertowEmbeddedServletContainerFactory50.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory50.setAccessLogDirectory(file55);
        undertowEmbeddedServletContainerFactory50.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray59 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer60 = undertowEmbeddedServletContainerFactory50.getEmbeddedServletContainer(servletContextInitializerArray59);
        initializer37.initializers = servletContextInitializerArray59;
        io.undertow.servlet.api.DeploymentManager deploymentManager62 = undertowEmbeddedServletContainerFactory31.createDeploymentManager(servletContextInitializerArray59);
        undertowEmbeddedServletContainerFactory24.addInitializers(servletContextInitializerArray59);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer64 = undertowEmbeddedServletContainerFactory12.getEmbeddedServletContainer(servletContextInitializerArray59);
        io.undertow.servlet.api.DeploymentManager deploymentManager65 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray59);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray66 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(inetAddress10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(resourceLoader36);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection51);
        org.junit.Assert.assertNull(int52);
        org.junit.Assert.assertNotNull(servletContextInitializerArray59);
        org.junit.Assert.assertNotNull(embeddedServletContainer60);
        org.junit.Assert.assertNotNull(deploymentManager62);
        org.junit.Assert.assertNotNull(embeddedServletContainer64);
        org.junit.Assert.assertNotNull(deploymentManager65);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress9 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress9);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) 'a');
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int21);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory8.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet11);
        java.io.File file13 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.net.InetAddress inetAddress14 = undertowEmbeddedServletContainerFactory1.getAddress();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.bufferSize;
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file18;
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNull(file13);
        org.junit.Assert.assertNull(inetAddress14);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNotNull(mimeMappings19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList20);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        io.undertow.Undertow.Builder builder4 = undertowEmbeddedServletContainerFactory2.createBuilder((int) (byte) 100);
        org.xnio.XnioWorker xnioWorker5 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.setWorkerThreads((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        undertowEmbeddedServletContainerFactory9.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray18 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray18);
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer26 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer28 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer30 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap29);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer26, initParameterConfiguringServletContextInitializer28, initParameterConfiguringServletContextInitializer30 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray31);
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray31);
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory9.setSessionStoreDir(file34);
        undertowEmbeddedServletContainerFactory9.setAccessLogEnabled(true);
        java.io.File file38 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection44 = undertowEmbeddedServletContainerFactory40.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory40.configureErrorPages(deploymentInfo45);
        java.net.InetAddress inetAddress47 = null;
        undertowEmbeddedServletContainerFactory40.setAddress(inetAddress47);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList52 = undertowEmbeddedServletContainerFactory40.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory40.ioThreads = 0;
        undertowEmbeddedServletContainerFactory40.bufferSize = 100;
        java.io.File file57 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory59.ioThreads;
        java.lang.String str61 = undertowEmbeddedServletContainerFactory59.accessLogPattern;
        undertowEmbeddedServletContainerFactory59.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory65.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray67 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory65.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory59.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory40.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray67);
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray67);
        java.lang.Boolean boolean73 = undertowEmbeddedServletContainerFactory2.directBuffers;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(xnioWorker5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(errorPageArray18);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNull(file38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList52);
        org.junit.Assert.assertNull(file57);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(errorPageArray67);
        org.junit.Assert.assertNull(boolean73);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader5;
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray12 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(ssl7);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.boot.context.embedded.ErrorPage errorPage12 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage13 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory11.ioThreads;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory11.accessLogPattern;
        undertowEmbeddedServletContainerFactory11.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray19);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray19);
        java.lang.String str23 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        int int29 = undertowEmbeddedServletContainerFactory25.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker30 = undertowEmbeddedServletContainerFactory25.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory25.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        org.springframework.boot.context.embedded.Compression compression33 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader34;
        undertowEmbeddedServletContainerFactory1.setPort((-1));
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        java.lang.Boolean boolean40 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.lang.String str41 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1800 + "'", int29 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker30);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
        org.junit.Assert.assertNull(compression33);
        org.junit.Assert.assertNull(boolean40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0.0.0.0" + "'", str41, "0.0.0.0");
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("");
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory14.setAddress(inetAddress15);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.setSessionStoreDir(file17);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory14.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress22 = null;
        undertowEmbeddedServletContainerFactory21.setAddress(inetAddress22);
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory21.setSessionStoreDir(file24);
        org.springframework.boot.context.embedded.Compression compression26 = undertowEmbeddedServletContainerFactory21.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection32 = undertowEmbeddedServletContainerFactory28.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        undertowEmbeddedServletContainerFactory28.configureErrorPages(deploymentInfo33);
        java.net.InetAddress inetAddress35 = null;
        undertowEmbeddedServletContainerFactory28.setAddress(inetAddress35);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory28.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings38 = undertowEmbeddedServletContainerFactory28.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory40.setPersistSession(false);
        io.undertow.Undertow.Builder builder44 = undertowEmbeddedServletContainerFactory40.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager45 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer47 = undertowEmbeddedServletContainerFactory28.getUndertowEmbeddedServletContainer(builder44, deploymentManager45, (int) '4');
        undertowEmbeddedServletContainerFactory28.buffersPerRegion = 1800;
        undertowEmbeddedServletContainerFactory28.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory53.ioThreads;
        org.springframework.boot.context.embedded.Compression compression55 = null;
        undertowEmbeddedServletContainerFactory53.setCompression(compression55);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection57 = undertowEmbeddedServletContainerFactory53.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo58 = null;
        undertowEmbeddedServletContainerFactory53.configureErrorPages(deploymentInfo58);
        java.net.InetAddress inetAddress60 = null;
        undertowEmbeddedServletContainerFactory53.setAddress(inetAddress60);
        org.springframework.boot.context.embedded.ErrorPage errorPage62 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray63 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage62 };
        undertowEmbeddedServletContainerFactory53.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory14.addErrorPages(errorPageArray63);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray63);
        org.springframework.boot.context.embedded.ErrorPage errorPage69 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage70 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNull(compression26);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection32);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(mimeMappings38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer47);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection57);
        org.junit.Assert.assertNotNull(errorPageArray63);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(97);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory12.ioThreads;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory12.getDocumentRootResourceManager();
        boolean boolean16 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo17);
        undertowEmbeddedServletContainerFactory12.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        java.lang.String str24 = undertowEmbeddedServletContainerFactory22.accessLogPattern;
        undertowEmbeddedServletContainerFactory22.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray30 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray30);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray30);
        org.springframework.boot.context.embedded.Ssl ssl35 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl35);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(resourceManager15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(errorPageArray30);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) -1);
        org.springframework.boot.context.embedded.Compression compression2 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNull(compression2);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.Compression compression4 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression4);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file17);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(compression10);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((-1));
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet18 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 1);
        boolean boolean21 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ssl12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(errorPageSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        io.undertow.server.HttpHandler httpHandler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler8 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        io.undertow.server.HttpHandler httpHandler20 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler21 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "";
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource12 = jarResourceManager0.getResource("");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader8);
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        boolean boolean11 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 0);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo14);
        java.io.File file16 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.util.concurrent.TimeUnit timeUnit18 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(0, timeUnit18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(file10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(file16);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 1);
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress15);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList17);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("hi!", 1800);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory13.accessLogDirectory = file14;
        undertowEmbeddedServletContainerFactory13.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection20 = undertowEmbeddedServletContainerFactory19.getBuilderCustomizers();
        java.lang.Integer int21 = undertowEmbeddedServletContainerFactory19.workerThreads;
        undertowEmbeddedServletContainerFactory19.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory19.setAccessLogDirectory(file24);
        undertowEmbeddedServletContainerFactory19.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer29 = undertowEmbeddedServletContainerFactory19.getEmbeddedServletContainer(servletContextInitializerArray28);
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory19.setResourceLoader(resourceLoader30);
        undertowEmbeddedServletContainerFactory19.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer34 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray35 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer34 };
        undertowEmbeddedServletContainerFactory19.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray35);
        undertowEmbeddedServletContainerFactory13.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray35);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray35);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) ' ');
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        org.junit.Assert.assertNotNull(embeddedServletContainer29);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray35);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo9 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo9);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(mimeMappings11);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 10);
        boolean boolean26 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        int int27 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray23);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray23);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file26);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        java.io.File file30 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(errorPageArray10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNull(file30);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray10 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer9 };
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray10);
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray10);
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        io.undertow.Undertow.Builder builder6 = null;
        io.undertow.servlet.api.DeploymentManager deploymentManager7 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer9 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder6, deploymentManager7, (int) (short) -1);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet13 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer9);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNotNull(errorPageSet13);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        undertowEmbeddedServletContainerFactory1.setPort(1);
        java.util.concurrent.TimeUnit timeUnit14 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout(100, timeUnit14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory8.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        undertowEmbeddedServletContainerFactory1.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory35.setDocumentRoot(file38);
        boolean boolean40 = undertowEmbeddedServletContainerFactory35.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory42.setDocumentRoot(file45);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection47 = undertowEmbeddedServletContainerFactory42.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory49.getBuilderCustomizers();
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory49.setAccessLogDirectory(file54);
        undertowEmbeddedServletContainerFactory49.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray58 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer59 = undertowEmbeddedServletContainerFactory49.getEmbeddedServletContainer(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory42.addInitializers(servletContextInitializerArray58);
        io.undertow.servlet.api.DeploymentManager deploymentManager61 = undertowEmbeddedServletContainerFactory35.createDeploymentManager(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray58);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int65 = undertowEmbeddedServletContainerFactory64.ioThreads;
        org.springframework.boot.context.embedded.Compression compression66 = null;
        undertowEmbeddedServletContainerFactory64.setCompression(compression66);
        int int68 = undertowEmbeddedServletContainerFactory64.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker69 = undertowEmbeddedServletContainerFactory64.createWorker();
        boolean boolean70 = undertowEmbeddedServletContainerFactory64.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory64.bufferSize = 100;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList73 = undertowEmbeddedServletContainerFactory64.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList73;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray75 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection47);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(servletContextInitializerArray58);
        org.junit.Assert.assertNotNull(embeddedServletContainer59);
        org.junit.Assert.assertNotNull(deploymentManager61);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1800 + "'", int68 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList73);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        undertowEmbeddedServletContainerFactory1.setPort((int) (short) 0);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file22);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.xnio.XnioWorker xnioWorker26 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress27);
        undertowEmbeddedServletContainerFactory1.setPort((int) '4');
        org.springframework.core.io.ResourceLoader resourceLoader31 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader31;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(xnioWorker26);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray9 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory7.addErrorPages(errorPageArray9);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray9);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setIoThreads((java.lang.Integer) (-1));
        java.io.File file18 = undertowEmbeddedServletContainerFactory13.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory13.resourceLoader = resourceLoader19;
        java.lang.ClassLoader classLoader21 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        org.springframework.boot.context.embedded.JspServlet jspServlet22 = undertowEmbeddedServletContainerFactory13.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet22);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory1.bufferSize;
        io.undertow.server.HttpHandler httpHandler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler26 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(errorPageArray9);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(jspServlet22);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        undertowEmbeddedServletContainerFactory10.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray15 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList16 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList16, undertowBuilderCustomizerArray15);
        undertowEmbeddedServletContainerFactory10.builderCustomizers = undertowBuilderCustomizerList16;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection21 = undertowEmbeddedServletContainerFactory20.getBuilderCustomizers();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory20.workerThreads;
        undertowEmbeddedServletContainerFactory20.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray25 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory20.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory10.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray25);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection31 = undertowEmbeddedServletContainerFactory30.getBuilderCustomizers();
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory30.workerThreads;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer34 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer36 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer38 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap37);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer34, initParameterConfiguringServletContextInitializer36, initParameterConfiguringServletContextInitializer38 };
        undertowEmbeddedServletContainerFactory30.addInitializers(servletContextInitializerArray39);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file47);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList49 = undertowEmbeddedServletContainerFactory42.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet54 = undertowEmbeddedServletContainerFactory51.getJspServlet();
        undertowEmbeddedServletContainerFactory42.setJspServlet(jspServlet54);
        undertowEmbeddedServletContainerFactory30.setJspServlet(jspServlet54);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet54);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.lang.Integer int59 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(jspServlet54);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNull(int59);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 10;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(ssl8);
        org.junit.Assert.assertNotNull(jspServlet11);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection6 = undertowEmbeddedServletContainerFactory5.getBuilderCustomizers();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory5.workerThreads;
        undertowEmbeddedServletContainerFactory5.setUseForwardHeaders(false);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory5.getDisplayName();
        undertowEmbeddedServletContainerFactory5.setBufferSize((java.lang.Integer) 1);
        boolean boolean13 = undertowEmbeddedServletContainerFactory5.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setUseForwardHeaders(false);
        java.lang.String str20 = undertowEmbeddedServletContainerFactory15.getDisplayName();
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) 1);
        boolean boolean23 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray30 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory25.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory15.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory5.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        undertowEmbeddedServletContainerFactory2.addBuilderCustomizers(undertowBuilderCustomizerArray30);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection35 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory2.ioThreads;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        java.lang.Boolean boolean13 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        org.springframework.core.io.ResourceLoader resourceLoader16 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader16);
        java.lang.String str18 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(boolean13);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener6 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(xnioWorker11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file12);
        org.springframework.boot.context.embedded.ErrorPage errorPage14 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage15 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        org.xnio.XnioWorker xnioWorker13 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory19.setCompression(compression21);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection23 = undertowEmbeddedServletContainerFactory19.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory19.configureErrorPages(deploymentInfo24);
        java.net.InetAddress inetAddress26 = null;
        undertowEmbeddedServletContainerFactory19.setAddress(inetAddress26);
        io.undertow.server.handlers.resource.ResourceManager resourceManager28 = undertowEmbeddedServletContainerFactory19.getDocumentRootResourceManager();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory19.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory31.setPersistSession(false);
        undertowEmbeddedServletContainerFactory31.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList36 = undertowEmbeddedServletContainerFactory31.builderCustomizers;
        undertowEmbeddedServletContainerFactory19.builderCustomizers = undertowBuilderCustomizerList36;
        undertowEmbeddedServletContainerFactory19.setDisplayName("hi!");
        int int40 = undertowEmbeddedServletContainerFactory19.getSessionTimeout();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet41 = undertowEmbeddedServletContainerFactory19.getErrorPages();
        undertowEmbeddedServletContainerFactory1.setErrorPages(errorPageSet41);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(xnioWorker13);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection23);
        org.junit.Assert.assertNotNull(resourceManager28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1800 + "'", int40 == 1800);
        org.junit.Assert.assertNotNull(errorPageSet41);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 97);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory11.workerThreads;
        undertowEmbeddedServletContainerFactory11.setUseForwardHeaders(false);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory11.getDisplayName();
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection22 = undertowEmbeddedServletContainerFactory21.getBuilderCustomizers();
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory21.workerThreads;
        undertowEmbeddedServletContainerFactory21.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory21.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray26);
        boolean boolean30 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection31 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection22);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection31);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        java.lang.Boolean boolean8 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = null;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList12;
        undertowEmbeddedServletContainerFactory1.ioThreads = 97;
        org.springframework.boot.context.embedded.ErrorPage errorPage16 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage17 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(boolean8);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet16 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.net.InetAddress inetAddress25 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress25);
        io.undertow.server.handlers.resource.ResourceManager resourceManager27 = undertowEmbeddedServletContainerFactory18.getDocumentRootResourceManager();
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory18.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory30.setPersistSession(false);
        undertowEmbeddedServletContainerFactory30.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList35 = undertowEmbeddedServletContainerFactory30.builderCustomizers;
        undertowEmbeddedServletContainerFactory18.builderCustomizers = undertowBuilderCustomizerList35;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList35;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 100);
        java.lang.Boolean boolean40 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(errorPageSet16);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(resourceManager27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList35);
        org.junit.Assert.assertEquals("'" + boolean40 + "' != '" + true + "'", boolean40, true);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNull(compression13);
        org.junit.Assert.assertNotNull(mimeMappings14);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = null;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        java.net.InetAddress inetAddress24 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress24);
        int int26 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.close();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource9 = jarResourceManager0.getResource("");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer34 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray31);
        boolean boolean35 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean36 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.io.File file37 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Integer int38 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(embeddedServletContainer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(file37);
        org.junit.Assert.assertNull(int38);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory5.ioThreads;
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory5.setCompression(compression7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory5.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory5.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList12;
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file15);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file17);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo19);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        org.junit.Assert.assertNull(compression14);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "0.0.0.0";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        java.lang.Class<?> wildcardClass16 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        undertowEmbeddedServletContainerFactory1.setPort((int) 'a');
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        int int12 = undertowEmbeddedServletContainerFactory1.getPort();
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file13);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNull(file11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        undertowEmbeddedServletContainerFactory13.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList18;
        java.io.File file20 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory24.ioThreads;
        org.springframework.boot.context.embedded.Compression compression26 = null;
        undertowEmbeddedServletContainerFactory24.setCompression(compression26);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection28 = undertowEmbeddedServletContainerFactory24.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory24.configureErrorPages(deploymentInfo29);
        java.net.InetAddress inetAddress31 = null;
        undertowEmbeddedServletContainerFactory24.setAddress(inetAddress31);
        org.springframework.boot.context.embedded.ErrorPage errorPage33 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray34 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage33 };
        undertowEmbeddedServletContainerFactory24.addErrorPages(errorPageArray34);
        org.springframework.core.io.ResourceLoader resourceLoader36 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader36;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory24.setDocumentRoot(file38);
        org.springframework.core.io.ResourceLoader resourceLoader40 = null;
        undertowEmbeddedServletContainerFactory24.resourceLoader = resourceLoader40;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer44 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap43);
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer46 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap45);
        java.util.Map<java.lang.String, java.lang.String> strMap47 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer48 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap47);
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer50 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap49);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer44, initParameterConfiguringServletContextInitializer46, initParameterConfiguringServletContextInitializer48, initParameterConfiguringServletContextInitializer50 };
        initializer42.initializers = servletContextInitializerArray51;
        undertowEmbeddedServletContainerFactory24.addInitializers(servletContextInitializerArray51);
        undertowEmbeddedServletContainerFactory24.useForwardHeaders = false;
        org.springframework.boot.context.embedded.JspServlet jspServlet56 = undertowEmbeddedServletContainerFactory24.getJspServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection59 = undertowEmbeddedServletContainerFactory58.getBuilderCustomizers();
        java.lang.Integer int60 = undertowEmbeddedServletContainerFactory58.workerThreads;
        undertowEmbeddedServletContainerFactory58.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int65 = undertowEmbeddedServletContainerFactory64.ioThreads;
        org.springframework.boot.context.embedded.Compression compression66 = null;
        undertowEmbeddedServletContainerFactory64.setCompression(compression66);
        undertowEmbeddedServletContainerFactory64.setRegisterJspServlet(true);
        java.lang.Integer int70 = undertowEmbeddedServletContainerFactory64.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet71 = undertowEmbeddedServletContainerFactory64.getJspServlet();
        undertowEmbeddedServletContainerFactory58.setJspServlet(jspServlet71);
        java.io.File file73 = null;
        undertowEmbeddedServletContainerFactory58.setDocumentRoot(file73);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList75 = undertowEmbeddedServletContainerFactory58.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory24.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList75;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList75;
        java.lang.Integer int78 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.Compression compression79 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection80 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.io.File file81 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        java.util.concurrent.TimeUnit timeUnit83 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (short) 1, timeUnit83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList18);
        org.junit.Assert.assertNull(file20);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection28);
        org.junit.Assert.assertNotNull(errorPageArray34);
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
        org.junit.Assert.assertNotNull(jspServlet56);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection59);
        org.junit.Assert.assertNull(int60);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNull(int70);
        org.junit.Assert.assertNotNull(jspServlet71);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList75);
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNull(compression79);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection80);
        org.junit.Assert.assertNull(file81);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.ClassLoader classLoader7 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader12;
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1800);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.lang.Boolean boolean17 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(boolean17);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str4 = jarResourceManager0.jarPath;
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray6 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(xnioWorker4);
        org.junit.Assert.assertNotNull(errorPageSet5);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) ' ');
        io.undertow.servlet.api.DeploymentInfo deploymentInfo2 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureMimeMappings(deploymentInfo2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.Ssl ssl10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode11 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Compression compression6 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.ErrorPage errorPage11 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage12 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(compression6);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection13 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory12.workerThreads;
        undertowEmbeddedServletContainerFactory12.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory12.bufferSize = 100;
        org.springframework.boot.context.embedded.Ssl ssl19 = null;
        undertowEmbeddedServletContainerFactory12.setSsl(ssl19);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress23 = null;
        undertowEmbeddedServletContainerFactory22.setAddress(inetAddress23);
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file25);
        undertowEmbeddedServletContainerFactory22.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray29 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory22.addBuilderCustomizers(undertowBuilderCustomizerArray29);
        undertowEmbeddedServletContainerFactory12.addBuilderCustomizers(undertowBuilderCustomizerArray29);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray29);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection13);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray29);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.junit.Assert.assertNull(inetAddress8);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener6 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.ErrorPage errorPage8 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage9 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        io.undertow.servlet.api.DeploymentInfo deploymentInfo5 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo5);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory1.getCompression();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.Compression compression14 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(compression9);
        org.junit.Assert.assertNull(compression14);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer11 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer13 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap12);
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer15 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer17 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap16);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer11, initParameterConfiguringServletContextInitializer13, initParameterConfiguringServletContextInitializer15, initParameterConfiguringServletContextInitializer17 };
        initializer9.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = initializer9.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        undertowEmbeddedServletContainerFactory22.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setAccessLogDirectory(file27);
        undertowEmbeddedServletContainerFactory22.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray31);
        initializer9.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = initializer9.initializers;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer35 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray34);
        org.springframework.boot.context.embedded.Ssl ssl36 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection37 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file41 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        org.junit.Assert.assertNotNull(embeddedServletContainer32);
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        org.junit.Assert.assertNotNull(embeddedServletContainer35);
        org.junit.Assert.assertNull(ssl36);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection37);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(file41);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.net.InetAddress inetAddress9 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress9);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) 'a');
        org.springframework.boot.context.embedded.Compression compression13 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression13);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNotNull(resourceManager6);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl8);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray10 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(mimeMappings12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        java.io.File file4 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        undertowEmbeddedServletContainerFactory8.setRegisterJspServlet(true);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory8.setSessionStoreDir(file14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory17.setResourceLoader(resourceLoader18);
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory17.createBuilder((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory23.ioThreads;
        org.springframework.boot.context.embedded.Compression compression25 = null;
        undertowEmbeddedServletContainerFactory23.setCompression(compression25);
        int int27 = undertowEmbeddedServletContainerFactory23.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker28 = undertowEmbeddedServletContainerFactory23.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList29 = undertowEmbeddedServletContainerFactory23.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory23.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection34 = undertowEmbeddedServletContainerFactory33.getBuilderCustomizers();
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory33.workerThreads;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory33.setDocumentRoot(file36);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection38 = undertowEmbeddedServletContainerFactory33.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection41 = undertowEmbeddedServletContainerFactory40.getBuilderCustomizers();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory40.workerThreads;
        undertowEmbeddedServletContainerFactory40.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory40.setAccessLogDirectory(file45);
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory40.getEmbeddedServletContainer(servletContextInitializerArray49);
        undertowEmbeddedServletContainerFactory33.addInitializers(servletContextInitializerArray49);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory23.createDeploymentManager(servletContextInitializerArray49);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer54 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder21, deploymentManager52, (-1));
        java.lang.String str55 = undertowEmbeddedServletContainerFactory8.getContextPath();
        io.undertow.Undertow.Builder builder57 = undertowEmbeddedServletContainerFactory8.createBuilder(100);
        undertowEmbeddedServletContainerFactory8.setWorkerThreads((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.Ssl ssl60 = null;
        undertowEmbeddedServletContainerFactory8.setSsl(ssl60);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList62 = undertowEmbeddedServletContainerFactory8.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList62;
        org.junit.Assert.assertNull(file4);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1800 + "'", int27 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker28);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList29);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection38);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection41);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNotNull(deploymentManager52);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList62);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        io.undertow.Undertow.Builder builder8 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(jspServlet4);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory9.setDocumentRoot(file23);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer29 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer31 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer33 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap32);
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer35 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap34);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer29, initParameterConfiguringServletContextInitializer31, initParameterConfiguringServletContextInitializer33, initParameterConfiguringServletContextInitializer35 };
        initializer27.initializers = servletContextInitializerArray36;
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray36);
        org.springframework.core.io.ResourceLoader resourceLoader39 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader39;
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress45 = null;
        undertowEmbeddedServletContainerFactory44.setAddress(inetAddress45);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.setSessionStoreDir(file47);
        org.springframework.boot.context.embedded.Compression compression49 = undertowEmbeddedServletContainerFactory44.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection52 = undertowEmbeddedServletContainerFactory51.getBuilderCustomizers();
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory51.workerThreads;
        undertowEmbeddedServletContainerFactory51.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory51.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        undertowEmbeddedServletContainerFactory59.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file64 = null;
        undertowEmbeddedServletContainerFactory59.setAccessLogDirectory(file64);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo66 = null;
        undertowEmbeddedServletContainerFactory59.configureErrorPages(deploymentInfo66);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer68 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray69 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer68 };
        undertowEmbeddedServletContainerFactory59.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory51.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory44.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray69);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean78 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNull(compression49);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray69);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader2);
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.net.InetAddress inetAddress6 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress6);
        org.junit.Assert.assertNotNull(xnioWorker4);
        org.junit.Assert.assertNotNull(errorPageSet5);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        io.undertow.server.handlers.resource.ResourceManager resourceManager7 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        undertowEmbeddedServletContainerFactory1.workerThreads = 1800;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader13);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(resourceManager7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList10;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        org.springframework.core.io.ResourceLoader resourceLoader17 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        java.lang.String str21 = undertowEmbeddedServletContainerFactory19.accessLogPattern;
        undertowEmbeddedServletContainerFactory19.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory19.builderCustomizers = undertowBuilderCustomizerList25;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        undertowEmbeddedServletContainerFactory29.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory29.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory19.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray34);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) (-1));
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection40 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Boolean boolean41 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory43.getBuilderCustomizers();
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory43.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet46 = undertowEmbeddedServletContainerFactory43.getJspServlet();
        undertowEmbeddedServletContainerFactory43.setRegisterDefaultServlet(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList49 = undertowEmbeddedServletContainerFactory43.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList49;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings51 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(resourceLoader6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(resourceLoader17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray34);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection40);
        org.junit.Assert.assertNull(boolean41);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(jspServlet46);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList49);
        org.junit.Assert.assertNotNull(mimeMappings51);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList14, undertowBuilderCustomizerArray13);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory18.ioThreads;
        org.springframework.boot.context.embedded.Compression compression20 = null;
        undertowEmbeddedServletContainerFactory18.setCompression(compression20);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection22 = undertowEmbeddedServletContainerFactory18.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory18.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        int int31 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.ioThreads = 100;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection22);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        org.junit.Assert.assertNull(resourceLoader29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader11);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file13;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression9);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0.0.0.0" + "'", str19, "0.0.0.0");
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        int int11 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(jspServlet5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(mimeMappings12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file3;
        undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (byte) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory8.ioThreads;
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory8.setCompression(compression10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory8.getDeploymentInfoCustomizers();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet13 = undertowEmbeddedServletContainerFactory8.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory15.ioThreads;
        java.lang.String str17 = undertowEmbeddedServletContainerFactory15.accessLogPattern;
        undertowEmbeddedServletContainerFactory15.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray20 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList21 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList21, undertowBuilderCustomizerArray20);
        undertowEmbeddedServletContainerFactory15.builderCustomizers = undertowBuilderCustomizerList21;
        undertowEmbeddedServletContainerFactory8.builderCustomizers = undertowBuilderCustomizerList21;
        undertowEmbeddedServletContainerFactory2.builderCustomizers = undertowBuilderCustomizerList21;
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(false);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
        org.junit.Assert.assertNotNull(errorPageSet13);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDisplayName("hi!");
        boolean boolean6 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet9 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.Class<?> wildcardClass10 = undertowEmbeddedServletContainerFactory1.getClass();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(errorPageSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader15);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.Ssl ssl22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode23 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNotNull(mimeMappings17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        org.junit.Assert.assertNotNull(mimeMappings21);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory8.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        java.io.File file32 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNull(file32);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray13 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file8);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet11 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory13.setAddress(inetAddress14);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory13.setSessionStoreDir(file16);
        undertowEmbeddedServletContainerFactory13.bufferSize = 1800;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings20);
        int int22 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(errorPageSet11);
        org.junit.Assert.assertNotNull(mimeMappings20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1800 + "'", int22 == 1800);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress7);
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader9);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.io.File file4 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        org.springframework.core.io.ResourceLoader resourceLoader7 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory9.ioThreads;
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory9.setCompression(compression11);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory9.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo14);
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory9.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.ErrorPage errorPage18 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray19 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage18 };
        undertowEmbeddedServletContainerFactory9.addErrorPages(errorPageArray19);
        org.springframework.core.io.ResourceLoader resourceLoader21 = null;
        undertowEmbeddedServletContainerFactory9.resourceLoader = resourceLoader21;
        java.io.File file23 = undertowEmbeddedServletContainerFactory9.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection29 = undertowEmbeddedServletContainerFactory25.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo30 = null;
        undertowEmbeddedServletContainerFactory25.configureErrorPages(deploymentInfo30);
        java.net.InetAddress inetAddress32 = null;
        undertowEmbeddedServletContainerFactory25.setAddress(inetAddress32);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory25.workerThreads;
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory25.setAccessLogDirectory(file35);
        boolean boolean37 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory39.ioThreads;
        org.springframework.boot.context.embedded.Compression compression41 = null;
        undertowEmbeddedServletContainerFactory39.setCompression(compression41);
        undertowEmbeddedServletContainerFactory39.setRegisterJspServlet(true);
        java.lang.Integer int45 = undertowEmbeddedServletContainerFactory39.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet46 = undertowEmbeddedServletContainerFactory39.getJspServlet();
        undertowEmbeddedServletContainerFactory25.setJspServlet(jspServlet46);
        undertowEmbeddedServletContainerFactory9.setJspServlet(jspServlet46);
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet46);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList50 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(false);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList55 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.junit.Assert.assertNull(file4);
        org.junit.Assert.assertNull(resourceLoader7);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
        org.junit.Assert.assertNotNull(errorPageArray19);
        org.junit.Assert.assertNull(file23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection29);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(jspServlet46);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList55);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory19.accessLogDirectory = file20;
        undertowEmbeddedServletContainerFactory19.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection26 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory25.workerThreads;
        undertowEmbeddedServletContainerFactory25.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setAccessLogDirectory(file30);
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer35 = undertowEmbeddedServletContainerFactory25.getEmbeddedServletContainer(servletContextInitializerArray34);
        org.springframework.core.io.ResourceLoader resourceLoader36 = null;
        undertowEmbeddedServletContainerFactory25.setResourceLoader(resourceLoader36);
        undertowEmbeddedServletContainerFactory25.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer40 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray41 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer40 };
        undertowEmbeddedServletContainerFactory25.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray41);
        undertowEmbeddedServletContainerFactory19.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray41);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray41);
        io.undertow.Undertow.Builder builder46 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (byte) 1);
        org.springframework.boot.context.embedded.Ssl ssl47 = undertowEmbeddedServletContainerFactory1.getSsl();
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        org.junit.Assert.assertNotNull(embeddedServletContainer35);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(ssl47);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet10 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setDisplayName("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory1.workerThreads = 52;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo21);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(errorPageSet10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray10 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer9 };
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray10);
        java.lang.ClassLoader classLoader12 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("0.0.0.0");
        boolean boolean15 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        java.lang.String str18 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader19;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.net.InetAddress inetAddress5 = undertowEmbeddedServletContainerFactory1.getAddress();
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.xnio.XnioWorker xnioWorker7 = undertowEmbeddedServletContainerFactory1.createWorker();
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory10.setResourceLoader(resourceLoader11);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList14 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList14, undertowDeploymentInfoCustomizerArray13);
        undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList14;
        org.springframework.boot.context.embedded.Ssl ssl17 = undertowEmbeddedServletContainerFactory10.getSsl();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 100);
        undertowEmbeddedServletContainerFactory10.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory23.ioThreads;
        org.springframework.boot.context.embedded.Compression compression25 = null;
        undertowEmbeddedServletContainerFactory23.setCompression(compression25);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection27 = undertowEmbeddedServletContainerFactory23.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo28 = null;
        undertowEmbeddedServletContainerFactory23.configureErrorPages(deploymentInfo28);
        java.net.InetAddress inetAddress30 = null;
        undertowEmbeddedServletContainerFactory23.setAddress(inetAddress30);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory23.workerThreads;
        undertowEmbeddedServletContainerFactory23.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = undertowEmbeddedServletContainerFactory23.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory23.ioThreads = 0;
        undertowEmbeddedServletContainerFactory23.bufferSize = 100;
        java.io.File file40 = undertowEmbeddedServletContainerFactory23.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory42.ioThreads;
        java.lang.String str44 = undertowEmbeddedServletContainerFactory42.accessLogPattern;
        undertowEmbeddedServletContainerFactory42.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory48.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray50 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory48.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory42.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory23.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray50);
        boolean boolean56 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(inetAddress5);
        org.junit.Assert.assertNotNull(resourceManager6);
        org.junit.Assert.assertNotNull(xnioWorker7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(ssl17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection27);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList35);
        org.junit.Assert.assertNull(file40);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNotNull(errorPageArray50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        boolean boolean8 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        io.undertow.server.HttpHandler httpHandler10 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler11 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection12 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection12);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl4 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl4);
        int int6 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setUseForwardHeaders(false);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory10.getDisplayName();
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 1);
        boolean boolean18 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        java.lang.Boolean boolean19 = undertowEmbeddedServletContainerFactory10.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList20;
        java.net.InetAddress inetAddress22 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress22);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 100);
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file3);
        undertowEmbeddedServletContainerFactory1.ioThreads = 1;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory8.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet11);
        org.springframework.boot.context.embedded.Ssl ssl13 = undertowEmbeddedServletContainerFactory1.getSsl();
        int int14 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory22.ioThreads;
        org.springframework.boot.context.embedded.Compression compression24 = null;
        undertowEmbeddedServletContainerFactory22.setCompression(compression24);
        undertowEmbeddedServletContainerFactory22.setRegisterJspServlet(true);
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory22.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet29 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        undertowEmbeddedServletContainerFactory16.setJspServlet(jspServlet29);
        undertowEmbeddedServletContainerFactory16.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory16.accessLogPattern = "";
        org.springframework.boot.context.embedded.Ssl ssl35 = null;
        undertowEmbeddedServletContainerFactory16.setSsl(ssl35);
        io.undertow.Undertow.Builder builder38 = undertowEmbeddedServletContainerFactory16.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory40.ioThreads;
        org.springframework.boot.context.embedded.Compression compression42 = null;
        undertowEmbeddedServletContainerFactory40.setCompression(compression42);
        undertowEmbeddedServletContainerFactory40.setRegisterJspServlet(true);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory40.setSessionStoreDir(file46);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory49.ioThreads;
        org.springframework.boot.context.embedded.Compression compression51 = null;
        undertowEmbeddedServletContainerFactory49.setCompression(compression51);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection53 = undertowEmbeddedServletContainerFactory49.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory49.configureErrorPages(deploymentInfo54);
        java.net.InetAddress inetAddress56 = null;
        undertowEmbeddedServletContainerFactory49.setAddress(inetAddress56);
        java.lang.Integer int58 = undertowEmbeddedServletContainerFactory49.workerThreads;
        undertowEmbeddedServletContainerFactory49.setBufferSize((java.lang.Integer) 10);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList61 = undertowEmbeddedServletContainerFactory49.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory49.ioThreads = 0;
        io.undertow.Undertow.Builder builder65 = undertowEmbeddedServletContainerFactory49.createBuilder(1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory67.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet70 = null;
        undertowEmbeddedServletContainerFactory67.setJspServlet(jspServlet70);
        java.net.InetAddress inetAddress72 = undertowEmbeddedServletContainerFactory67.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer73 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection76 = undertowEmbeddedServletContainerFactory75.getBuilderCustomizers();
        java.lang.Integer int77 = undertowEmbeddedServletContainerFactory75.workerThreads;
        undertowEmbeddedServletContainerFactory75.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file80 = null;
        undertowEmbeddedServletContainerFactory75.setAccessLogDirectory(file80);
        undertowEmbeddedServletContainerFactory75.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray84 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer85 = undertowEmbeddedServletContainerFactory75.getEmbeddedServletContainer(servletContextInitializerArray84);
        initializer73.initializers = servletContextInitializerArray84;
        io.undertow.servlet.api.DeploymentManager deploymentManager87 = undertowEmbeddedServletContainerFactory67.createDeploymentManager(servletContextInitializerArray84);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer89 = undertowEmbeddedServletContainerFactory40.getUndertowEmbeddedServletContainer(builder65, deploymentManager87, 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer91 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder38, deploymentManager87, (int) 'a');
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "0.0.0.0";
        java.util.concurrent.TimeUnit timeUnit97 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 10, timeUnit97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(jspServlet11);
        org.junit.Assert.assertNull(ssl13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1800 + "'", int14 == 1800);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(jspServlet29);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection53);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(inetAddress72);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection76);
        org.junit.Assert.assertNull(int77);
        org.junit.Assert.assertNotNull(servletContextInitializerArray84);
        org.junit.Assert.assertNotNull(embeddedServletContainer85);
        org.junit.Assert.assertNotNull(deploymentManager87);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer89);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer91);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "0.0.0.0";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener10 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray3 = undertowEmbeddedServletContainerFactory2.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        undertowEmbeddedServletContainerFactory1.bufferSize = 0;
        org.springframework.boot.context.embedded.Ssl ssl11 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl11);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(errorPageSet8);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.bufferSize = 100;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = true;
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file9 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.xnio.XnioWorker xnioWorker10 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.workerThreads = 52;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(resourceLoader8);
        org.junit.Assert.assertNull(file9);
        org.junit.Assert.assertNotNull(xnioWorker10);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader11;
        undertowEmbeddedServletContainerFactory1.setPort((int) (byte) 10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Compression compression4 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory6.setJspServlet(jspServlet9);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory6.resourceLoader = resourceLoader11;
        int int13 = undertowEmbeddedServletContainerFactory6.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer16 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer18 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer20 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer22 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap21);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer16, initParameterConfiguringServletContextInitializer18, initParameterConfiguringServletContextInitializer20, initParameterConfiguringServletContextInitializer22 };
        initializer14.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray25 = initializer14.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        undertowEmbeddedServletContainerFactory27.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file32);
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer37 = undertowEmbeddedServletContainerFactory27.getEmbeddedServletContainer(servletContextInitializerArray36);
        initializer14.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer39 = undertowEmbeddedServletContainerFactory6.getEmbeddedServletContainer(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray36);
        int int41 = undertowEmbeddedServletContainerFactory1.getPort();
        org.xnio.XnioWorker xnioWorker42 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection45 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNull(compression4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        org.junit.Assert.assertNotNull(servletContextInitializerArray25);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        org.junit.Assert.assertNotNull(embeddedServletContainer37);
        org.junit.Assert.assertNotNull(embeddedServletContainer39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(xnioWorker42);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection45);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory10.ioThreads;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory10.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager13 = undertowEmbeddedServletContainerFactory10.getDocumentRootResourceManager();
        boolean boolean14 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo15);
        undertowEmbeddedServletContainerFactory10.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory10.bufferSize = 100;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection23 = undertowEmbeddedServletContainerFactory22.getBuilderCustomizers();
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory22.workerThreads;
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory22.setDocumentRoot(file25);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection27 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory29.getBuilderCustomizers();
        java.lang.Integer int31 = undertowEmbeddedServletContainerFactory29.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader32 = null;
        undertowEmbeddedServletContainerFactory29.resourceLoader = resourceLoader32;
        org.springframework.core.io.ResourceLoader resourceLoader34 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43 };
        initializer35.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = initializer35.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection49 = undertowEmbeddedServletContainerFactory48.getBuilderCustomizers();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory48.workerThreads;
        undertowEmbeddedServletContainerFactory48.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory48.setAccessLogDirectory(file53);
        undertowEmbeddedServletContainerFactory48.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer58 = undertowEmbeddedServletContainerFactory48.getEmbeddedServletContainer(servletContextInitializerArray57);
        initializer35.initializers = servletContextInitializerArray57;
        io.undertow.servlet.api.DeploymentManager deploymentManager60 = undertowEmbeddedServletContainerFactory29.createDeploymentManager(servletContextInitializerArray57);
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray57);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer62 = undertowEmbeddedServletContainerFactory10.getEmbeddedServletContainer(servletContextInitializerArray57);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer63 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray57);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.Ssl ssl66 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl66);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(resourceManager13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection27);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(resourceLoader34);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        org.junit.Assert.assertNotNull(embeddedServletContainer58);
        org.junit.Assert.assertNotNull(deploymentManager60);
        org.junit.Assert.assertNotNull(embeddedServletContainer62);
        org.junit.Assert.assertNotNull(embeddedServletContainer63);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 32);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory7.ioThreads;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory7.setCompression(compression9);
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory7.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory7.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet14);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file16);
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) -1);
        io.undertow.Undertow.Builder builder23 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) 0);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(jspServlet14);
        org.junit.Assert.assertNotNull(xnioWorker18);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(int24);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.workerThreads = 0;
        org.springframework.boot.context.embedded.Compression compression14 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression14);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList16 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory19.ioThreads;
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory19.setCompression(compression21);
        undertowEmbeddedServletContainerFactory19.setRegisterJspServlet(true);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory19.bufferSize;
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory19.getJspServlet();
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet26);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet28 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNotNull(errorPageSet28);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        java.lang.Boolean boolean2 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode4 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(boolean2);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        boolean boolean10 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory1.getContextPath();
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray15 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.io.File file18 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.lang.Boolean boolean19 = undertowEmbeddedServletContainerFactory1.directBuffers;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(file18);
        org.junit.Assert.assertNull(boolean19);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 97);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl4 = null;
        undertowEmbeddedServletContainerFactory1.setSsl(ssl4);
        int int6 = undertowEmbeddedServletContainerFactory1.getPort();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory10.workerThreads;
        undertowEmbeddedServletContainerFactory10.setUseForwardHeaders(false);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory10.getDisplayName();
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 1);
        boolean boolean18 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        java.lang.Boolean boolean19 = undertowEmbeddedServletContainerFactory10.directBuffers;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList20;
        java.net.InetAddress inetAddress22 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress22);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory1.ioThreads = 0;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray28 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(boolean19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.Compression compression8 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression8);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        undertowEmbeddedServletContainerFactory1.bufferSize = (-1);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory1.workerThreads;
        boolean boolean9 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        undertowEmbeddedServletContainerFactory14.setMimeMappings(mimeMappings17);
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings17);
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        java.lang.String str22 = undertowEmbeddedServletContainerFactory1.getContextPath();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(mimeMappings17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress2 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress2);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Compression compression6 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory8.getBuilderCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory8.workerThreads;
        undertowEmbeddedServletContainerFactory8.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory8.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection17 = undertowEmbeddedServletContainerFactory16.getBuilderCustomizers();
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory16.workerThreads;
        undertowEmbeddedServletContainerFactory16.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setAccessLogDirectory(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer25 };
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        java.lang.Boolean boolean32 = undertowEmbeddedServletContainerFactory1.directBuffers;
        java.lang.Integer int33 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.junit.Assert.assertNull(compression6);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        org.junit.Assert.assertNull(boolean32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNull(int34);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory1.createBuilder((int) '#');
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList30 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection31 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureAccessLog(deploymentInfo32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList30);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection31);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        java.io.File file6 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection11 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory13.setResourceLoader(resourceLoader14);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList17, undertowDeploymentInfoCustomizerArray16);
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList17;
        undertowEmbeddedServletContainerFactory13.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection24 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        boolean boolean25 = undertowEmbeddedServletContainerFactory13.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection28 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader30 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader30;
        org.springframework.core.io.ResourceLoader resourceLoader32 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader33 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader33;
        java.lang.Integer int35 = undertowEmbeddedServletContainerFactory27.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection38 = undertowEmbeddedServletContainerFactory37.getBuilderCustomizers();
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory37.workerThreads;
        undertowEmbeddedServletContainerFactory37.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory37.setAccessLogDirectory(file42);
        undertowEmbeddedServletContainerFactory37.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer47 = undertowEmbeddedServletContainerFactory37.getEmbeddedServletContainer(servletContextInitializerArray46);
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = undertowEmbeddedServletContainerFactory27.createDeploymentManager(servletContextInitializerArray46);
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer50 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection53 = undertowEmbeddedServletContainerFactory52.getBuilderCustomizers();
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory52.workerThreads;
        undertowEmbeddedServletContainerFactory52.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setAccessLogDirectory(file57);
        undertowEmbeddedServletContainerFactory52.setBufferSize((java.lang.Integer) 0);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList61 = undertowEmbeddedServletContainerFactory52.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList61;
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory1.bufferSize;
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        org.junit.Assert.assertNull(file6);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection11);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNull(resourceLoader32);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        org.junit.Assert.assertNotNull(embeddedServletContainer47);
        org.junit.Assert.assertNotNull(deploymentManager48);
        org.junit.Assert.assertNotNull(embeddedServletContainer50);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection53);
        org.junit.Assert.assertNull(int54);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList61);
        org.junit.Assert.assertNull(int63);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory13.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager18 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer20 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder17, deploymentManager18, (int) '4');
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file21);
        java.lang.Integer int23 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.xnio.XnioWorker xnioWorker24 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(mimeMappings11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer20);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(xnioWorker24);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 0);
        undertowEmbeddedServletContainerFactory1.setIoThreads((java.lang.Integer) 100);
        java.net.InetAddress inetAddress4 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress4);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory1.getServletClassLoader();
        org.xnio.XnioWorker xnioWorker9 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(xnioWorker9);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory1.createWorker();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 0);
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder(10);
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory1.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory15.getBuilderCustomizers();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory15.workerThreads;
        undertowEmbeddedServletContainerFactory15.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory15.buffersPerRegion = 0;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory15.setSessionStoreDir(file22);
        undertowEmbeddedServletContainerFactory15.accessLogEnabled = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList28 = undertowEmbeddedServletContainerFactory27.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Ssl ssl29 = undertowEmbeddedServletContainerFactory27.getSsl();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet30 = undertowEmbeddedServletContainerFactory27.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setWorkerThreads((java.lang.Integer) (-1));
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory27.setAccessLogDirectory(file33);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory36.ioThreads;
        org.springframework.boot.context.embedded.Compression compression38 = null;
        undertowEmbeddedServletContainerFactory36.setCompression(compression38);
        undertowEmbeddedServletContainerFactory36.setSessionTimeout(100);
        boolean boolean42 = undertowEmbeddedServletContainerFactory36.accessLogEnabled;
        undertowEmbeddedServletContainerFactory36.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory46.ioThreads;
        java.lang.String str48 = undertowEmbeddedServletContainerFactory46.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager49 = undertowEmbeddedServletContainerFactory46.getDocumentRootResourceManager();
        boolean boolean50 = undertowEmbeddedServletContainerFactory46.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory46.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory54.ioThreads;
        java.lang.String str56 = undertowEmbeddedServletContainerFactory54.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager57 = undertowEmbeddedServletContainerFactory54.getDocumentRootResourceManager();
        boolean boolean58 = undertowEmbeddedServletContainerFactory54.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory54.setRegisterJspServlet(true);
        undertowEmbeddedServletContainerFactory54.setAccessLogPattern("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection65 = undertowEmbeddedServletContainerFactory64.getBuilderCustomizers();
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory64.workerThreads;
        undertowEmbeddedServletContainerFactory64.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file69 = null;
        undertowEmbeddedServletContainerFactory64.setAccessLogDirectory(file69);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo71 = null;
        undertowEmbeddedServletContainerFactory64.configureErrorPages(deploymentInfo71);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer73 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray74 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer73 };
        undertowEmbeddedServletContainerFactory64.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        undertowEmbeddedServletContainerFactory54.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        undertowEmbeddedServletContainerFactory46.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        undertowEmbeddedServletContainerFactory36.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        undertowEmbeddedServletContainerFactory27.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray74);
        java.util.concurrent.TimeUnit timeUnit83 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.setSessionTimeout((int) (byte) 10, timeUnit83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(xnioWorker3);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList28);
        org.junit.Assert.assertNull(ssl29);
        org.junit.Assert.assertNotNull(errorPageSet30);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(resourceManager49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(resourceManager57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection65);
        org.junit.Assert.assertNull(int66);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray74);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 0);
        java.io.File file3 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file4;
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory2.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(file3);
        org.junit.Assert.assertNotNull(resourceManager6);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray3 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray3);
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList9 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader10;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(errorPageArray3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList9);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "0.0.0.0";
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource11 = jarResourceManager0.getResource("");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList6 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader7);
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader9;
        io.undertow.server.handlers.resource.ResourceManager resourceManager11 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.core.io.ResourceLoader resourceLoader15 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        boolean boolean16 = undertowEmbeddedServletContainerFactory1.isAccessLogEnabled();
        java.lang.String str17 = undertowEmbeddedServletContainerFactory1.getContextPath();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection18 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList6);
        org.junit.Assert.assertNotNull(resourceManager11);
        org.junit.Assert.assertNull(file12);
        org.junit.Assert.assertNull(resourceLoader15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection18);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = null;
        undertowEmbeddedServletContainerFactory1.setJspServlet(jspServlet4);
        org.springframework.core.io.ResourceLoader resourceLoader6 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader6;
        int int8 = undertowEmbeddedServletContainerFactory1.getPort();
        java.net.InetAddress inetAddress9 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress9);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory12.setResourceLoader(resourceLoader13);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory16.ioThreads;
        org.springframework.boot.context.embedded.Compression compression18 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression18);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection20 = undertowEmbeddedServletContainerFactory16.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo21);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList23 = undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList23;
        org.springframework.boot.context.embedded.Compression compression25 = undertowEmbeddedServletContainerFactory12.getCompression();
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory12.setSessionStoreDir(file26);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo28 = null;
        undertowEmbeddedServletContainerFactory12.configureErrorPages(deploymentInfo28);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings30 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        java.net.InetAddress inetAddress31 = undertowEmbeddedServletContainerFactory12.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int34 = undertowEmbeddedServletContainerFactory33.ioThreads;
        org.springframework.boot.context.embedded.Compression compression35 = null;
        undertowEmbeddedServletContainerFactory33.setCompression(compression35);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection37 = undertowEmbeddedServletContainerFactory33.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo38 = null;
        undertowEmbeddedServletContainerFactory33.configureErrorPages(deploymentInfo38);
        java.net.InetAddress inetAddress40 = null;
        undertowEmbeddedServletContainerFactory33.setAddress(inetAddress40);
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory33.workerThreads;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory33.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory45.setPersistSession(false);
        io.undertow.Undertow.Builder builder49 = undertowEmbeddedServletContainerFactory45.createBuilder((int) '4');
        io.undertow.servlet.api.DeploymentManager deploymentManager50 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer52 = undertowEmbeddedServletContainerFactory33.getUndertowEmbeddedServletContainer(builder49, deploymentManager50, (int) '4');
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory33.setSessionStoreDir(file53);
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory33.buffersPerRegion;
        io.undertow.Undertow.Builder builder57 = undertowEmbeddedServletContainerFactory33.createBuilder((int) '#');
        undertowEmbeddedServletContainerFactory33.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList62 = undertowEmbeddedServletContainerFactory33.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList62;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList62;
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection20);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList23);
        org.junit.Assert.assertNull(compression25);
        org.junit.Assert.assertNotNull(mimeMappings30);
        org.junit.Assert.assertNull(inetAddress31);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection37);
        org.junit.Assert.assertNull(int42);
        org.junit.Assert.assertNotNull(mimeMappings43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer52);
        org.junit.Assert.assertNull(int55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList62);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory1.workerThreads = 100;
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file19 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        undertowEmbeddedServletContainerFactory1.setJspServletClassName("hi!");
        io.undertow.server.handlers.resource.ResourceManager resourceManager22 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(file19);
        org.junit.Assert.assertNotNull(resourceManager22);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader17;
        java.lang.String str19 = undertowEmbeddedServletContainerFactory1.getContextPath();
        org.springframework.boot.context.embedded.JspServlet jspServlet20 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(jspServlet20);
        org.junit.Assert.assertNull(compression21);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.io.File file14 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 1);
        java.net.InetAddress inetAddress17 = undertowEmbeddedServletContainerFactory1.getAddress();
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        java.lang.Boolean boolean20 = undertowEmbeddedServletContainerFactory1.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UndertowDeploymentInfoCustomizers must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(file14);
        org.junit.Assert.assertNull(inetAddress17);
        org.junit.Assert.assertNull(boolean20);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        int int5 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory1.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory1.getSsl();
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file8);
        org.springframework.boot.context.embedded.JspServlet jspServlet10 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        java.io.File file11 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file12;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1800 + "'", int5 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker6);
        org.junit.Assert.assertNull(ssl7);
        org.junit.Assert.assertNotNull(jspServlet10);
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "hi!";
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        boolean boolean7 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection8 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 10;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(52);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection8);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory1.getErrorPages();
        java.net.InetAddress inetAddress5 = undertowEmbeddedServletContainerFactory1.getAddress();
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        org.xnio.XnioWorker xnioWorker7 = undertowEmbeddedServletContainerFactory1.createWorker();
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getContextPath();
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(errorPageSet4);
        org.junit.Assert.assertNull(inetAddress5);
        org.junit.Assert.assertNotNull(resourceManager6);
        org.junit.Assert.assertNotNull(xnioWorker7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "";
        boolean boolean14 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean15 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource18 = jarResourceManager0.getResource("hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory3.ioThreads;
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory3.setCompression(compression5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection7 = undertowEmbeddedServletContainerFactory3.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory3.configureErrorPages(deploymentInfo8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory3.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList10;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList12 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.net.InetAddress inetAddress15 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory17.buffersPerRegion = 100;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory17.setAccessLogDirectory(file20);
        undertowEmbeddedServletContainerFactory17.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str24 = undertowEmbeddedServletContainerFactory17.getListenAddress();
        java.lang.Boolean boolean25 = undertowEmbeddedServletContainerFactory17.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl26 = null;
        undertowEmbeddedServletContainerFactory17.setSsl(ssl26);
        undertowEmbeddedServletContainerFactory17.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory35.getBuilderCustomizers();
        java.lang.Integer int37 = undertowEmbeddedServletContainerFactory35.workerThreads;
        undertowEmbeddedServletContainerFactory35.setUseForwardHeaders(false);
        java.lang.String str40 = undertowEmbeddedServletContainerFactory35.getDisplayName();
        undertowEmbeddedServletContainerFactory35.setBufferSize((java.lang.Integer) 1);
        boolean boolean43 = undertowEmbeddedServletContainerFactory35.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection46 = undertowEmbeddedServletContainerFactory45.getBuilderCustomizers();
        java.lang.Integer int47 = undertowEmbeddedServletContainerFactory45.workerThreads;
        undertowEmbeddedServletContainerFactory45.setUseForwardHeaders(false);
        java.lang.String str50 = undertowEmbeddedServletContainerFactory45.getDisplayName();
        undertowEmbeddedServletContainerFactory45.setBufferSize((java.lang.Integer) 1);
        boolean boolean53 = undertowEmbeddedServletContainerFactory45.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection56 = undertowEmbeddedServletContainerFactory55.getBuilderCustomizers();
        java.lang.Integer int57 = undertowEmbeddedServletContainerFactory55.workerThreads;
        undertowEmbeddedServletContainerFactory55.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray60 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory55.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory45.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory35.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory32.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory17.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray60);
        boolean boolean67 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.bufferSize = 1;
        undertowEmbeddedServletContainerFactory1.useForwardHeaders = false;
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection7);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList12);
        org.junit.Assert.assertNull(inetAddress15);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0.0.0.0" + "'", str24, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean25 + "' != '" + true + "'", boolean25, true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection46);
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection56);
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        undertowEmbeddedServletContainerFactory1.setWorkerThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList7, undertowBuilderCustomizerArray6);
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList7;
        undertowEmbeddedServletContainerFactory1.ioThreads = (-1);
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory1.getSsl();
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        undertowEmbeddedServletContainerFactory1.setSessionTimeout((-1));
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("hi!");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(ssl12);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        undertowEmbeddedServletContainerFactory1.setPort(10);
        undertowEmbeddedServletContainerFactory1.setDisplayName("");
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(false);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file18;
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(false);
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader22;
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        undertowEmbeddedServletContainerFactory1.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory1.directBuffers = true;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(false);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0.0.0.0" + "'", str9, "0.0.0.0");
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.ErrorPage errorPage10 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage10 };
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray11);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory1.setDocumentRoot(file15);
        undertowEmbeddedServletContainerFactory1.accessLogEnabled = false;
        java.net.InetAddress inetAddress19 = undertowEmbeddedServletContainerFactory1.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader20;
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression22);
        java.net.InetAddress inetAddress24 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress24);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo26 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(errorPageArray11);
        org.junit.Assert.assertNull(inetAddress19);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory1.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer11 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory13.ioThreads;
        org.springframework.boot.context.embedded.Compression compression15 = null;
        undertowEmbeddedServletContainerFactory13.setCompression(compression15);
        int int17 = undertowEmbeddedServletContainerFactory13.getSessionTimeout();
        org.xnio.XnioWorker xnioWorker18 = undertowEmbeddedServletContainerFactory13.createWorker();
        java.lang.String str19 = undertowEmbeddedServletContainerFactory13.getDisplayName();
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) (-1));
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList22 = undertowEmbeddedServletContainerFactory13.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList22;
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 100;
        boolean boolean26 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file27;
        io.undertow.server.HttpHandler httpHandler29 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler30 = undertowEmbeddedServletContainerFactory1.createAccessLogHandler(httpHandler29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        org.junit.Assert.assertNotNull(embeddedServletContainer11);
        org.junit.Assert.assertNull(int14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1800 + "'", int17 == 1800);
        org.junit.Assert.assertNotNull(xnioWorker18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory1.workerThreads;
        org.springframework.boot.context.embedded.Compression compression12 = undertowEmbeddedServletContainerFactory1.getCompression();
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory1.setRegisterDefaultServlet(true);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNotNull(resourceManager10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(compression12);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.io.File file5 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder((int) (short) -1);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.bufferSize;
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(file5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.buffersPerRegion;
        org.springframework.boot.context.embedded.JspServlet jspServlet4 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression5);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory9.getBuilderCustomizers();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory9.workerThreads;
        undertowEmbeddedServletContainerFactory9.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory9.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory17.ioThreads;
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory17.setCompression(compression19);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory17.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo22 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo22);
        java.net.InetAddress inetAddress24 = null;
        undertowEmbeddedServletContainerFactory17.setAddress(inetAddress24);
        org.springframework.boot.context.embedded.ErrorPage errorPage26 = null;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray27 = new org.springframework.boot.context.embedded.ErrorPage[] { errorPage26 };
        undertowEmbeddedServletContainerFactory17.addErrorPages(errorPageArray27);
        org.springframework.core.io.ResourceLoader resourceLoader29 = null;
        undertowEmbeddedServletContainerFactory17.resourceLoader = resourceLoader29;
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory17.setDocumentRoot(file31);
        org.springframework.core.io.ResourceLoader resourceLoader33 = null;
        undertowEmbeddedServletContainerFactory17.resourceLoader = resourceLoader33;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer37 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap36);
        java.util.Map<java.lang.String, java.lang.String> strMap38 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer39 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer41 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer43 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap42);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer37, initParameterConfiguringServletContextInitializer39, initParameterConfiguringServletContextInitializer41, initParameterConfiguringServletContextInitializer43 };
        initializer35.initializers = servletContextInitializerArray44;
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray44);
        org.springframework.core.io.ResourceLoader resourceLoader47 = null;
        undertowEmbeddedServletContainerFactory17.resourceLoader = resourceLoader47;
        undertowEmbeddedServletContainerFactory17.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.net.InetAddress inetAddress53 = null;
        undertowEmbeddedServletContainerFactory52.setAddress(inetAddress53);
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file55);
        org.springframework.boot.context.embedded.Compression compression57 = undertowEmbeddedServletContainerFactory52.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection60 = undertowEmbeddedServletContainerFactory59.getBuilderCustomizers();
        java.lang.Integer int61 = undertowEmbeddedServletContainerFactory59.workerThreads;
        undertowEmbeddedServletContainerFactory59.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory59.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory67 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection68 = undertowEmbeddedServletContainerFactory67.getBuilderCustomizers();
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory67.workerThreads;
        undertowEmbeddedServletContainerFactory67.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file72 = null;
        undertowEmbeddedServletContainerFactory67.setAccessLogDirectory(file72);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo74 = null;
        undertowEmbeddedServletContainerFactory67.configureErrorPages(deploymentInfo74);
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer76 = null;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray77 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] { undertowDeploymentInfoCustomizer76 };
        undertowEmbeddedServletContainerFactory67.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory59.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory52.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory17.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        undertowEmbeddedServletContainerFactory1.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray77);
        io.undertow.server.handlers.resource.ResourceManager resourceManager84 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        org.springframework.boot.context.embedded.Compression compression87 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression87);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(jspServlet4);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        org.junit.Assert.assertNotNull(errorPageArray27);
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        org.junit.Assert.assertNull(compression57);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection60);
        org.junit.Assert.assertNull(int61);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection68);
        org.junit.Assert.assertNull(int69);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray77);
        org.junit.Assert.assertNotNull(resourceManager84);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        java.lang.String str3 = undertowEmbeddedServletContainerFactory1.accessLogPattern;
        io.undertow.server.handlers.resource.ResourceManager resourceManager4 = undertowEmbeddedServletContainerFactory1.getDocumentRootResourceManager();
        boolean boolean5 = undertowEmbeddedServletContainerFactory1.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory1.setRegisterJspServlet(true);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file8;
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory1.directBuffers;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection15 = undertowEmbeddedServletContainerFactory14.getBuilderCustomizers();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory14.workerThreads;
        undertowEmbeddedServletContainerFactory14.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory14.bufferSize = 100;
        undertowEmbeddedServletContainerFactory14.setIoThreads((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory14.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory28.ioThreads;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory28.setCompression(compression30);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection32 = undertowEmbeddedServletContainerFactory28.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        undertowEmbeddedServletContainerFactory28.configureErrorPages(deploymentInfo33);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList35 = undertowEmbeddedServletContainerFactory28.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList35;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList37 = undertowEmbeddedServletContainerFactory26.builderCustomizers;
        undertowEmbeddedServletContainerFactory26.accessLogEnabled = false;
        java.net.InetAddress inetAddress40 = undertowEmbeddedServletContainerFactory26.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
        undertowEmbeddedServletContainerFactory42.buffersPerRegion = 100;
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory42.setAccessLogDirectory(file45);
        undertowEmbeddedServletContainerFactory42.setDirectBuffers((java.lang.Boolean) true);
        java.lang.String str49 = undertowEmbeddedServletContainerFactory42.getListenAddress();
        java.lang.Boolean boolean50 = undertowEmbeddedServletContainerFactory42.directBuffers;
        org.springframework.boot.context.embedded.Ssl ssl51 = null;
        undertowEmbeddedServletContainerFactory42.setSsl(ssl51);
        undertowEmbeddedServletContainerFactory42.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 100);
        boolean boolean58 = undertowEmbeddedServletContainerFactory57.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection61 = undertowEmbeddedServletContainerFactory60.getBuilderCustomizers();
        java.lang.Integer int62 = undertowEmbeddedServletContainerFactory60.workerThreads;
        undertowEmbeddedServletContainerFactory60.setUseForwardHeaders(false);
        java.lang.String str65 = undertowEmbeddedServletContainerFactory60.getDisplayName();
        undertowEmbeddedServletContainerFactory60.setBufferSize((java.lang.Integer) 1);
        boolean boolean68 = undertowEmbeddedServletContainerFactory60.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection71 = undertowEmbeddedServletContainerFactory70.getBuilderCustomizers();
        java.lang.Integer int72 = undertowEmbeddedServletContainerFactory70.workerThreads;
        undertowEmbeddedServletContainerFactory70.setUseForwardHeaders(false);
        java.lang.String str75 = undertowEmbeddedServletContainerFactory70.getDisplayName();
        undertowEmbeddedServletContainerFactory70.setBufferSize((java.lang.Integer) 1);
        boolean boolean78 = undertowEmbeddedServletContainerFactory70.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory80 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection81 = undertowEmbeddedServletContainerFactory80.getBuilderCustomizers();
        java.lang.Integer int82 = undertowEmbeddedServletContainerFactory80.workerThreads;
        undertowEmbeddedServletContainerFactory80.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray85 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        undertowEmbeddedServletContainerFactory80.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory70.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory60.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory57.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory42.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory26.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory14.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        undertowEmbeddedServletContainerFactory1.addBuilderCustomizers(undertowBuilderCustomizerArray85);
        org.springframework.boot.context.embedded.Ssl ssl94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode95 = undertowEmbeddedServletContainerFactory1.getSslClientAuthMode(ssl94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(resourceManager4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(boolean10);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection32);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList35);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList37);
        org.junit.Assert.assertNull(inetAddress40);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0.0.0.0" + "'", str49, "0.0.0.0");
        org.junit.Assert.assertEquals("'" + boolean50 + "' != '" + true + "'", boolean50, true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection61);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection81);
        org.junit.Assert.assertNull(int82);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray85);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "hi!";
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory1.deploymentInfoCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file10 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray11 = undertowEmbeddedServletContainerFactory1.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        org.junit.Assert.assertNull(resourceLoader9);
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection2 = undertowEmbeddedServletContainerFactory1.getBuilderCustomizers();
        java.lang.Integer int3 = undertowEmbeddedServletContainerFactory1.workerThreads;
        undertowEmbeddedServletContainerFactory1.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 0;
        java.lang.String str8 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        int int9 = undertowEmbeddedServletContainerFactory1.getPort();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        undertowEmbeddedServletContainerFactory11.setIoThreads((java.lang.Integer) (-1));
        java.io.File file16 = undertowEmbeddedServletContainerFactory11.getDocumentRoot();
        boolean boolean17 = undertowEmbeddedServletContainerFactory11.isAccessLogEnabled();
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory11.accessLogDirectory = file18;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList20 = undertowEmbeddedServletContainerFactory11.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.builderCustomizers = undertowBuilderCustomizerList20;
        org.springframework.boot.context.embedded.Ssl ssl22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory25.ioThreads;
        org.springframework.boot.context.embedded.Compression compression27 = null;
        undertowEmbeddedServletContainerFactory25.setCompression(compression27);
        java.io.File file29 = undertowEmbeddedServletContainerFactory25.getDocumentRoot();
        undertowEmbeddedServletContainerFactory25.setPersistSession(false);
        io.undertow.Undertow.Builder builder33 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory1.configureSsl(ssl22, (int) 'a', builder33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList20);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(file29);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory1.setResourceLoader(resourceLoader10);
        boolean boolean12 = undertowEmbeddedServletContainerFactory1.accessLogEnabled;
        java.lang.String str13 = undertowEmbeddedServletContainerFactory1.getListenAddress();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray14 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0.0.0.0" + "'", str13, "0.0.0.0");
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.lang.Integer int2 = undertowEmbeddedServletContainerFactory1.ioThreads;
        org.springframework.boot.context.embedded.Compression compression3 = null;
        undertowEmbeddedServletContainerFactory1.setCompression(compression3);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection5 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo6);
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory1.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file11);
        boolean boolean13 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        undertowEmbeddedServletContainerFactory1.setAccessLogPattern("");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.accessLogPattern = "";
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory1.accessLogDirectory = file19;
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory1.getCompression();
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory1.workerThreads;
        java.io.File file23 = undertowEmbeddedServletContainerFactory1.getSessionStoreDir();
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory1.setAccessLogDirectory(file24);
        org.springframework.boot.context.embedded.JspServlet jspServlet26 = undertowEmbeddedServletContainerFactory1.getJspServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        undertowEmbeddedServletContainerFactory28.setIoThreads((java.lang.Integer) (-1));
        java.io.File file33 = undertowEmbeddedServletContainerFactory28.getDocumentRoot();
        boolean boolean34 = undertowEmbeddedServletContainerFactory28.isAccessLogEnabled();
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory28.accessLogDirectory = file35;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList37 = undertowEmbeddedServletContainerFactory28.builderCustomizers;
        undertowEmbeddedServletContainerFactory28.setContextPath("");
        java.io.File file40 = undertowEmbeddedServletContainerFactory28.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection43 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory42.workerThreads;
        org.springframework.core.io.ResourceLoader resourceLoader45 = null;
        undertowEmbeddedServletContainerFactory42.resourceLoader = resourceLoader45;
        org.springframework.core.io.ResourceLoader resourceLoader47 = undertowEmbeddedServletContainerFactory42.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer50 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap49);
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer52 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap51);
        java.util.Map<java.lang.String, java.lang.String> strMap53 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer54 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer56 = new org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer(strMap55);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { initParameterConfiguringServletContextInitializer50, initParameterConfiguringServletContextInitializer52, initParameterConfiguringServletContextInitializer54, initParameterConfiguringServletContextInitializer56 };
        initializer48.initializers = servletContextInitializerArray57;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray59 = initializer48.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (short) 100);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection62 = undertowEmbeddedServletContainerFactory61.getBuilderCustomizers();
        java.lang.Integer int63 = undertowEmbeddedServletContainerFactory61.workerThreads;
        undertowEmbeddedServletContainerFactory61.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory61.setAccessLogDirectory(file66);
        undertowEmbeddedServletContainerFactory61.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer71 = undertowEmbeddedServletContainerFactory61.getEmbeddedServletContainer(servletContextInitializerArray70);
        initializer48.initializers = servletContextInitializerArray70;
        io.undertow.servlet.api.DeploymentManager deploymentManager73 = undertowEmbeddedServletContainerFactory42.createDeploymentManager(servletContextInitializerArray70);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer74 = undertowEmbeddedServletContainerFactory28.getEmbeddedServletContainer(servletContextInitializerArray70);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer75 = undertowEmbeddedServletContainerFactory1.getEmbeddedServletContainer(servletContextInitializerArray70);
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection5);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        org.junit.Assert.assertNull(compression21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(file23);
        org.junit.Assert.assertNotNull(jspServlet26);
        org.junit.Assert.assertNull(file33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList37);
        org.junit.Assert.assertNull(file40);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNull(resourceLoader47);
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        org.junit.Assert.assertNotNull(servletContextInitializerArray59);
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection62);
        org.junit.Assert.assertNull(int63);
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        org.junit.Assert.assertNotNull(embeddedServletContainer71);
        org.junit.Assert.assertNotNull(deploymentManager73);
        org.junit.Assert.assertNotNull(embeddedServletContainer74);
        org.junit.Assert.assertNotNull(embeddedServletContainer75);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str5 = jarResourceManager0.jarPath;
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener9 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 1);
        undertowEmbeddedServletContainerFactory1.setPersistSession(false);
        undertowEmbeddedServletContainerFactory1.setUseForwardHeaders(true);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList6 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.workerThreads = 10;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory1.getDisplayName();
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList6);
        org.junit.Assert.assertNotNull(mimeMappings7);
        org.junit.Assert.assertNull(str10);
    }
}

