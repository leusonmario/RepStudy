/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 21:12:52 GMT 2021
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;
import java.util.Collection;
import java.util.List;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.util.AsciiBytes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "Z3)Bgy{Dl};fHE(&e~";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Z3)Bgy{Dl};fHE(&e~/yHECK4>zv!<2 FG-}4Y");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      String string1 = "yHECK4>zv!<2 FG-}4Y";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("yHECK4>zv!<2 FG-}4Y", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/Z3)Bgy{Dl};fHE(&e~", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/Z3)Bgy{Dl};fHE(&e~/yHECK4>zv!<2 FG-}4Y", mockFile0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("yHECK4>zv!<2 FG-}4Y", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/Z3)Bgy{Dl};fHE(&e~", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/Z3)Bgy{Dl};fHE(&e~/yHECK4>zv!<2 FG-}4Y", mockFile0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "org.springframework.boot.loaNer.archive.Archive";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loaNer.archive.Archive/org.springframework.boot.loaNer.archive.Archive
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      
      AsciiBytes asciiBytes0 = null;
      String string1 = explodedArchive0.toString();
      assertNotNull(string1);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("file:/", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, asciiBytes0, asciiBytes0, asciiBytes0, asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(string0.equals((Object)string1));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(string0, string1);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      byte[] byteArray0 = new byte[6];
      AsciiBytes asciiBytes0 = new AsciiBytes(string0);
      assertNotNull(asciiBytes0);
      assertEquals(0, asciiBytes0.length());
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, asciiBytes0.length());
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
      
      URL uRL0 = archive0.getUrl();
      assertNotNull(uRL0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, asciiBytes0.length());
      assertEquals("", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "META-INF";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotNull(file0);
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("META-INF", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/META-INF", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/META-INF/META-INF0META-INF", file0.toString());
      assertEquals("META-INF0META-INF", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("META-INF", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.equals((Object)file0));
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals("META-INF", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "META#INF";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotNull(file0);
      assertEquals("META#INF", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("META#INF", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/META#INF/META#INF0META#INF", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/META#INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertEquals("META#INF0META#INF", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertEquals("META#INF", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("META#INF", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.equals((Object)file0));
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertEquals("META#INF", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("META#INF", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "eT/2=U7`'@qJq&B/i";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("eT/2=U7`'@qJq&B", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("eT/2=U7`'@qJq&B/i", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("i", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B/i", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean1 = mockFile0.renameTo(file0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("eT/2=U7`'@qJq&B", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("eT/2=U7`'@qJq&B/i", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("i", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B/i", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(boolean1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("eT/2=U7`'@qJq&B", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("eT/2=U7`'@qJq&B/i", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean0, boolean1, boolean1, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNotNull(list0);
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isHidden());
      assertEquals("eT/2=U7`'@qJq&B", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("eT/2=U7`'@qJq&B/i", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("i", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("i", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B/i", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean0, boolean1, boolean0, boolean0).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/eT/2=U7`'@qJq&B/i/eT/2=U7`'@qJq&B/i0eT/2=U7`'@qJq&B/i (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "$QAoDYQ>mW";
      File file0 = MockFile.createTempFile(string0, string0);
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals("$QAoDYQ>mW0$QAoDYQ>mW", file0.getName());
      assertEquals("/tmp/$QAoDYQ>mW0$QAoDYQ>mW", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/$QAoDYQ>mW0$QAoDYQ>mW
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "n6:5Y!>8.3+%DV";
      File file0 = MockFile.createTempFile(string0, string0);
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/n6:5Y!>8.3+%DV0n6:5Y!>8.3+%DV", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("n6:5Y!>8.3+%DV0n6:5Y!>8.3+%DV", file0.getName());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp", file0.getParent());
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/n6:5Y!>8.3+%DV0n6:5Y!>8.3+%DV
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(boolean0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("evosuite_2", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.equals((Object)file0));
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertNotNull(collection0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      
      Collection<Archive.Entry> collection1 = explodedArchive0.getEntries();
      assertNotNull(collection1);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(collection1.equals((Object)collection0));
      assertNotSame(mockFile0, file0);
      assertNotSame(collection1, collection0);
      
      String string1 = explodedArchive0.toString();
      assertNotNull(string1);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/", string1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string0);
      
      try { 
        explodedArchive0.getMainClass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No 'Start-Class' manifest entry specified in file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/
         //
         verifyException("org.springframework.boot.loader.archive.Archive", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "META-INF";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = "hX\"";
      String string2 = "";
      File file0 = MockFile.createTempFile(string1, string2, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("META-INF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/META-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/META-INF/hX\"0", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("hX\"0", file0.getName());
      assertTrue(file0.exists());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(file0, mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("META-INF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("META-INF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNotNull(list0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("META-INF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn((AsciiBytes) null, (AsciiBytes) null).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("META-INF", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("META-INF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
      
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1735239980 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      File file0 = null;
      String string0 = "OqqF ";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = mockFile0.setReadable(boolean0, boolean1);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("OqqF ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("OqqF ", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = mockFile0.getAbsolutePath();
      assertNotNull(string1);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("OqqF ", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("OqqF ", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/OqqF ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder OqqF 
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("evosuite_2", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744", file0.getParent());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean1 = mockFile0.createNewFile();
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertNotSame(mockFile0, file0);
      
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1735239980 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertNotNull(collection0);
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNotNull(list0);
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Archive.EntryFilter archive_EntryFilter1 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = "";
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1);
      assertNotNull(explodedArchive0);
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744", mockFile1.getParent());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals("evosuite_2", mockFile1.getName());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      URL uRL0 = explodedArchive0.getUrl();
      assertNotNull(uRL0);
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744", mockFile1.getParent());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals("evosuite_2", mockFile1.getName());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertSame(string0, string1);
      assertNotSame(mockFile0, mockFile1);
      assertSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "XlfmF9R#";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      String string1 = "z+<Zl5Tc?#]-";
      File file0 = MockFile.createTempFile(string1, string0, (File) mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("XlfmF9R#", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("XlfmF9R#", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals("z+<Zl5Tc?#]-0XlfmF9R#", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/XlfmF9R#/z+<Zl5Tc?#]-0XlfmF9R#", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/XlfmF9R#", file0.getParent());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean1 = mockFile0.setWritable(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("XlfmF9R#", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("XlfmF9R#", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("XlfmF9R#", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("XlfmF9R#", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      
      try { 
        explodedArchive0.getMainClass();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No 'Start-Class' manifest entry specified in file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/XlfmF9R%23/
         //
         verifyException("org.springframework.boot.loader.archive.Archive", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn((AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("", file0.getName());
      assertEquals("/", file0.toString());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setWritable(boolean0);
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
      
      String string1 = explodedArchive0.toString();
      assertNotNull(string1);
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("file:/", string1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(string1, string0);
      
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1735239980 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      AsciiBytes asciiBytes0 = new AsciiBytes(string0);
      assertNotNull(asciiBytes0);
      assertEquals(0, asciiBytes0.length());
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, asciiBytes0, asciiBytes0, asciiBytes0, asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertNull(file0.getParent());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertTrue(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setWritable(boolean0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, asciiBytes0.length());
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
      
      String string1 = explodedArchive0.toString();
      assertNotNull(string1);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("file:/", string1);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(string1, string0);
      
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1735239980 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = "HJb(%7I";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(string0.equals((Object)string1));
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      
      Archive.Entry archive_Entry0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)83;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)94;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-69);
      byteArray0[4] = byte4;
      AsciiBytes asciiBytes0 = new AsciiBytes(byteArray0);
      assertNotNull(asciiBytes0);
      assertEquals(5, asciiBytes0.length());
      assertArrayEquals(new byte[] {(byte)83, (byte) (-1), (byte) (-1), (byte)94, (byte) (-69)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertEquals(5, asciiBytes0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertArrayEquals(new byte[] {(byte)83, (byte) (-1), (byte) (-1), (byte)94, (byte) (-69)}, byteArray0);
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(archive0, explodedArchive0);
      assertNotSame(explodedArchive0, archive0);
      assertEquals(5, byteArray0.length);
      
      URL uRL0 = archive0.getUrl();
      assertNotNull(uRL0);
      assertEquals(5, asciiBytes0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertArrayEquals(new byte[] {(byte)83, (byte) (-1), (byte) (-1), (byte)94, (byte) (-69)}, byteArray0);
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(archive0, explodedArchive0);
      assertNotSame(explodedArchive0, archive0);
      assertEquals(5, byteArray0.length);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNotNull(list0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(explodedArchive0, archive0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$1";
      AsciiBytes asciiBytes0 = new AsciiBytes(string1);
      assertNotNull(asciiBytes0);
      assertEquals(57, asciiBytes0.length());
      assertFalse(string1.equals((Object)string0));
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, asciiBytes0, asciiBytes0, asciiBytes0, asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals("", file0.getName());
      assertEquals("/", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertNull(file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(string0.equals((Object)string1));
      assertTrue(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setWritable(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(57, asciiBytes0.length());
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(string1, string0);
      assertNotSame(archive0, explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertNotNull(string2);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("file:/", string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = true;
      boolean boolean3 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean2, boolean0, boolean1, boolean3).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNotNull(list0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(boolean0 == boolean3);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean3);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean2 == boolean3);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.loader.archive.Archive$Entry$MockitoMock$1735239980 cannot be cast to org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "'l6C.Ls?$)E$(e";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotNull(file0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean1 = mockFile0.renameTo(file0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(boolean1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      
      AsciiBytes asciiBytes0 = new AsciiBytes(string0);
      assertNotNull(asciiBytes0);
      assertEquals(15, asciiBytes0.length());
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(15, asciiBytes0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
      
      File file1 = mockFile0.getAbsoluteFile();
      assertNotNull(file1);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2", file1.getParent());
      assertFalse(file1.isHidden());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file1.toString());
      assertFalse(file1.isFile());
      assertEquals("'l6C.Ls?$)E$(e", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive0, archive0);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertNotNull(collection0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive0, archive0);
      
      Collection<Archive.Entry> collection1 = explodedArchive0.getEntries();
      assertNotNull(collection1);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(collection1.equals((Object)collection0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(collection1, collection0);
      
      boolean boolean2 = true;
      boolean boolean3 = mockFile0.delete();
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(boolean3);
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      
      boolean boolean4 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, boolean4).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNotNull(list0);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean4);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive0, archive0);
      
      boolean boolean5 = false;
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list1 = archive0.getNestedArchives(archive_EntryFilter1);
      assertNotNull(list1);
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(15, asciiBytes0.length());
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean5);
      assertFalse(boolean0 == boolean4);
      assertFalse(boolean0 == boolean1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(list1, list0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(archive0, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter2 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean5, boolean2).when(archive_EntryFilter2).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$1";
      AsciiBytes asciiBytes0 = new AsciiBytes(string1);
      assertNotNull(asciiBytes0);
      assertEquals(57, asciiBytes0.length());
      assertFalse(string1.equals((Object)string0));
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(string0.equals((Object)string1));
      assertTrue(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setWritable(boolean1);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      
      Archive.Entry archive_Entry0 = mock(Archive.Entry.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = true;
      boolean boolean4 = true;
      boolean boolean5 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      // Undeclared exception!
      explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "'l6C.Ls?$)E$(e";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file0.getParent());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean1 = mockFile0.renameTo(file0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file0.getParent());
      assertFalse(boolean1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      
      String string1 = "NvKs`lHLq";
      AsciiBytes asciiBytes0 = new AsciiBytes(string1);
      assertNotNull(asciiBytes0);
      assertEquals(9, asciiBytes0.length());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = file0.mkdir();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file0.getParent());
      assertFalse(boolean2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      Archive archive0 = explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertNotNull(archive0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(9, asciiBytes0.length());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(archive0.equals((Object)explodedArchive0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(string1, string0);
      assertNotSame(archive0, explodedArchive0);
      
      File file1 = mockFile0.getAbsoluteFile();
      assertNotNull(file1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2", file1.getParent());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isFile());
      assertEquals("'l6C.Ls?$)E$(e", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertNotNull(collection0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      
      boolean boolean3 = file0.delete();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e/'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.toString());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("'l6C.Ls?$)E$(e0'l6C.Ls?$)E$(e", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/'l6C.Ls?$)E$(e", file0.getParent());
      assertTrue(boolean3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      
      Collection<Archive.Entry> collection1 = explodedArchive0.getEntries();
      assertNotNull(collection1);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.getName());
      assertEquals("'l6C.Ls?$)E$(e", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.equals((Object)file1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean3);
      assertFalse(explodedArchive0.equals((Object)archive0));
      assertFalse(collection1.equals((Object)collection0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive0, archive0);
      assertNotSame(collection1, collection0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semantic-conflict-study/SMAT");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
  }
}
