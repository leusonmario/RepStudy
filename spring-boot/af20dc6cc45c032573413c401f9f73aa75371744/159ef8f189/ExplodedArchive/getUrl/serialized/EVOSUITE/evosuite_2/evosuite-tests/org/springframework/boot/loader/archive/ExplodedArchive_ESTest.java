/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 12:08:20 GMT 2021
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.nio.file.Path;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.archive.FilteredArchive;
import org.springframework.boot.loader.archive.JarFileArchive;
import org.springframework.boot.loader.archive.SerializedObjectSupporter;
import org.springframework.boot.loader.util.AsciiBytes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "ADZ\\NV";
      File file0 = MockFile.createTempFile(string0, string0);
      assertNotNull(file0);
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/ADZ\\NV0ADZ\\NV", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("ADZ\\NV0ADZ\\NV", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/ADZ\\NV0ADZ\\NV
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = explodedArchive0.getroot();
      assertNotNull(file1);
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file1.toString());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canRead());
      assertEquals("jars", file1.getName());
      assertFalse(file1.canExecute());
      assertFalse(file1.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file1.getParent());
      assertSame(file0, file1);
      assertSame(file1, file0);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive0.root);
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile9();
      assertNotNull(file0);
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive0.buildEntries(file0, explodedArchive0.filtered);
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      URL uRL0 = null;
      String string0 = "";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string0);
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:null", explodedArchive_FileNotFoundURLConnection0.toString());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      
      try { 
        explodedArchive_FileNotFoundURLConnection0.connect();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // 
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(explodedArchive0.filtered);
      
      boolean boolean1 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(list0);
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertNotNull(uRL0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, mockFile0);
      assertNotNull(explodedArchive_FileEntry0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = new Manifest();
      assertNotNull(manifest0);
      
      explodedArchive0.manifest = manifest0;
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertFalse(explodedArchive0.filtered);
      
      URLConnection uRLConnection0 = explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
      assertNull(uRLConnection0);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry0.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      assertFalse(string0.equals((Object)string1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(string0, string1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(manifest1);
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNotSame(string0, string1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(manifest1, manifest0);
      assertFalse(explodedArchive0.filtered);
      
      try { 
        explodedArchive1.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile7();
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      FilteredArchive filteredArchive0 = new FilteredArchive(explodedArchive0, archive_EntryFilter0);
      assertNotNull(filteredArchive0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL0 = filteredArchive0.getUrl();
      assertNotNull(uRL0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = (ExplodedArchive.FileNotFoundURLConnection)explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/tmp/junit1069761328127692012/junit891059030562649033/d", explodedArchive_FileNotFoundURLConnection0.toString());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile4();
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "org.springframework.boot.loader";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      
      String string1 = "";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      
      MockFile mockFile1 = new MockFile(explodedArchive_FileNotFoundURLConnection0.name, explodedArchive_FileNotFoundURLConnection0.name);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals("/", mockFile1.toString());
      assertFalse(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(mockFile1, explodedArchive0.filtered);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(uRL0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(manifest0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(collection0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn((AsciiBytes) null, (AsciiBytes) null).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(list0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes0);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(20, asciiBytes0.length());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertFalse(explodedArchive0.filtered);
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", string2);
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNull(manifest1);
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "@r)4Of";
      String string1 = "{w@CX6o;B_!DyAw";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/@r)4Of/{w@CX6o;B_!DyAw", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/@r)4Of", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("{w@CX6o;B_!DyAw", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile7();
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      explodedArchive0.buildEntries(file0, boolean0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)34;
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      int int0 = 0;
      int int1 = 4;
      AsciiBytes asciiBytes0 = null;
      try {
        asciiBytes0 = new AsciiBytes(byteArray0, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.util.AsciiBytes", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(uRL0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, mockFile0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.filtered);
      
      File file0 = explodedArchive_FileEntry0.getFile();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(file0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertNull(file0.getParent());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertFalse(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file0, boolean2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "i~_EAxRK LTn~";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1, hashMap0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile3();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotNull(file0);
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals("junit897402010941125298", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals("junit897402010941125298", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals("junit897402010941125298", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertTrue(explodedArchive0.filtered);
      
      File file1 = explodedArchive0.getroot();
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", file1.getParent());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.exists());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canRead());
      assertEquals("i~_EAxRK LTn~", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", file1.toString());
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockFile1, file1);
      assertNotSame(mockFile1, file0);
      assertSame(file1, mockFile1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertTrue(explodedArchive0.filtered);
      
      String string1 = "z|YT6";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK%20LTn~/i~_EAxRK%20LTn~/i~_EAxRK%20LTn~", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("z|YT6", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertTrue(explodedArchive0.filtered);
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("z|YT6", string2);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("i~_EAxRK LTn~", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.toString());
      assertEquals("i~_EAxRK LTn~", mockFile1.getName());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK LTn~/i~_EAxRK LTn~", mockFile1.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/i~_EAxRK%20LTn~/i~_EAxRK%20LTn~/i~_EAxRK%20LTn~", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("z|YT6", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockFile1, file1);
      assertNotSame(mockFile1, file0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile13();
      assertNotNull(file0);
      assertEquals("nested-jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      File file0 = null;
      String string0 = "gi";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getHost());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/gi", uRI0.toString());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/gi", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = explodedArchive0.getroot();
      assertNotNull(file1);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("gi", file1.toString());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertEquals("gi", file1.getName());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertSame(mockFile0, file1);
      assertSame(file1, mockFile0);
      assertTrue(explodedArchive0.filtered);
      
      String string1 = mockFile0.getAbsolutePath();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/gi", string1);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNotSame(string0, string1);
      assertSame(mockFile0, file1);
      assertNotSame(string1, string0);
      
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = mockFile0.setExecutable(boolean3, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean3);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("gi", mockFile0.toString());
      assertEquals("gi", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertNotSame(string0, string1);
      assertSame(mockFile0, file1);
      
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file1, boolean2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile15();
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file1);
      assertNotNull(explodedArchive_FileEntry0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      AsciiBytes asciiBytes0 = explodedArchive_FileEntry0.getName();
      assertNotNull(asciiBytes0);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, asciiBytes0.length());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      File file2 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile14();
      assertFalse(file2.equals((Object)file0));
      assertNotNull(file2);
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars/META-INF", file2.getParent());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("MANIFEST.MF", file2.getName());
      assertFalse(file2.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars/META-INF/MANIFEST.MF", file2.toString());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.lastModified());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canWrite());
      assertFalse(file2.exists());
      assertTrue(file2.isFile());
      assertNotSame(file0, file2);
      assertNotSame(file2, file0);
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "sH^q*R$C8";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      Map<AsciiBytes, Archive.Entry> map0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile15();
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      
      String string0 = "gXaWe_";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      long long0 = 0L;
      boolean boolean0 = mockFile0.setLastModified(long0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("gXaWe_", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes/gXaWe_", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("gXaWe_", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes/gXaWe_", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertTrue(explodedArchive0.filtered);
      
      String string1 = "Invalid source folder ";
      int int0 = (-801);
      String string2 = "File3.xml";
      Archive.Entry archive_Entry0 = null;
      Archive.Entry archive_Entry1 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, archive_Entry0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNull(archive_Entry1);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("gXaWe_", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes/gXaWe_", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, mockFile0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive0.root);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("gXaWe_", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes/gXaWe_", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      Archive.Entry archive_Entry2 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNull(archive_Entry2);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("gXaWe_", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/target/exploded-war/WEB-INF/classes/gXaWe_", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, mockFile0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.filtered);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile4();
      assertNotNull(file0);
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      
      String string0 = "`GRLP/WE";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      HashMap<AsciiBytes, ExplodedArchive.FileEntry> hashMap0 = new HashMap<AsciiBytes, ExplodedArchive.FileEntry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap1 = new HashMap<AsciiBytes, Archive.Entry>(hashMap0);
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap1);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("WE", mockFile0.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF/`GRLP", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF/`GRLP/WE", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(list0);
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("WE", mockFile0.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF/`GRLP", mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF/`GRLP/WE", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertTrue(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter";
      String string2 = "il);7$[";
      String string3 = "ExplodedArchive6.xml";
      String string4 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      String string5 = "DuE&'8U%au";
      try { 
        MockURI.URI(string1, string2, string3, string4, string5);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter://i%7Fl);7$[ExplodedArchive6.xml?org.springframework.boot.loader.archive.ExplodedArchive$FileEntry#DuE&'8U%25au
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      URL uRL0 = null;
      String string0 = "";
      String string1 = "\"av&@%4Qc}efMf";
      String string2 = "";
      File file0 = null;
      File file1 = MockFile.createTempFile(string1, string2, file0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(file1);
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/\"av&@%4Qc}efMf0", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.canRead());
      assertEquals("\"av&@%4Qc}efMf0", file1.getName());
      assertTrue(file1.isFile());
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/\"av&@%4Qc}efMf0
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      URL uRL0 = null;
      String string0 = null;
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string0);
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:null", explodedArchive_FileNotFoundURLConnection0.toString());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      
      try { 
        explodedArchive_FileNotFoundURLConnection0.connect();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertNotNull(file2);
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.lastModified());
      assertTrue(file2.isFile());
      assertEquals("jars", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canRead());
      assertFalse(file2.exists());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file1));
      assertNotNull(file3);
      assertFalse(file3.canRead());
      assertFalse(file3.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.isHidden());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file3.getParent());
      assertFalse(file3.exists());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file3));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertNotNull(explodedArchive0);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file4 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file3));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertTrue(file4.equals((Object)file2));
      assertNotNull(file4);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.getUsableSpace());
      assertFalse(file4.canRead());
      assertFalse(file4.exists());
      assertTrue(file4.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file4.getParent());
      assertTrue(file4.isFile());
      assertEquals("jars", file4.getName());
      assertFalse(file4.isHidden());
      assertFalse(file4.canExecute());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file4.toString());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals(0L, file4.lastModified());
      assertFalse(file4.canWrite());
      assertEquals(0L, file4.length());
      assertSame(file0, file4);
      assertNotSame(file0, file3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      assertSame(file4, file0);
      assertNotSame(file4, file2);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file1);
      assertFalse(file0.equals((Object)file3));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file3));
      assertFalse(file1.equals((Object)file2));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)file4));
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file3));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file3));
      assertFalse(file1.equals((Object)file2));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)file4));
      assertNull(archive_Entry0);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertSame(file0, file4);
      assertNotSame(file0, file3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file1, file3);
      assertNotSame(file1, file2);
      assertNotSame(file1, file0);
      assertNotSame(file1, file4);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive0.filtered).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file3));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertNotNull(uRL0);
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertSame(file0, file4);
      assertNotSame(file0, file3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertFalse(file1.exists());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertFalse(file2.equals((Object)file1));
      assertTrue(file2.equals((Object)file0));
      assertNotNull(file2);
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.lastModified());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("jars", file2.getName());
      assertTrue(file2.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file1));
      assertNotNull(file3);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertTrue(file3.isAbsolute());
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file1);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertNotNull(file4);
      assertTrue(file4.isAbsolute());
      assertFalse(file4.canWrite());
      assertTrue(file4.isFile());
      assertFalse(file4.canExecute());
      assertFalse(file4.isHidden());
      assertEquals(0L, file4.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertFalse(file4.canRead());
      assertEquals("MANIFEST.MF", file4.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertFalse(file4.exists());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals(0L, file4.lastModified());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.length());
      assertNotSame(file4, file2);
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(explodedArchive0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertTrue(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file3));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file1));
      assertNotNull(file5);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(file5.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertEquals("jars", file5.getName());
      assertFalse(file5.canWrite());
      assertFalse(file5.isHidden());
      assertEquals(0L, file5.getUsableSpace());
      assertEquals(0L, file5.length());
      assertEquals(0L, file5.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertEquals(0L, file5.lastModified());
      assertFalse(file5.isDirectory());
      assertFalse(file5.exists());
      assertEquals(0L, file5.getTotalSpace());
      assertFalse(file5.canExecute());
      assertFalse(file5.canRead());
      assertTrue(file5.isFile());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertSame(file5, file0);
      assertNotSame(file5, file3);
      assertNotSame(file5, file2);
      assertNotSame(file5, file4);
      assertNotSame(file5, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file1));
      assertNotNull(explodedArchive_FileEntry0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file1));
      assertNull(archive_Entry0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file5);
      assertNotSame(file3, file4);
      assertNotSame(file3, file1);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(uRL0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(list0);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertNotSame(uRL1, uRL0);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(explodedArchive_FileEntry1);
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn((AsciiBytes) null).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      File file0 = null;
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      FilteredArchive filteredArchive0 = new FilteredArchive(explodedArchive0, archive_EntryFilter0);
      assertNotNull(filteredArchive0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertNull(manifest0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        filteredArchive0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile7();
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      explodedArchive0.buildEntries(file0, boolean0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertNotNull(asciiBytes0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, asciiBytes0.length());
      assertTrue(explodedArchive0.filtered);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)34;
      byteArray0[0] = byte0;
      byte byte1 = (byte)73;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      int int0 = 0;
      int int1 = 4;
      AsciiBytes asciiBytes1 = null;
      try {
        asciiBytes1 = new AsciiBytes(byteArray0, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.util.AsciiBytes", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap0);
      assertNotNull(explodedArchive0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, mockFile0);
      assertNotNull(explodedArchive_FileEntry0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = hashMap0.remove((Object) mockFile0, (Object) string0);
      assertFalse(boolean0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertNull(archive_Entry0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setExecutable(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      
      File file0 = explodedArchive0.getroot();
      assertNotNull(file0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0L, file0.getUsableSpace());
      assertNull(file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertEquals("", file0.toString());
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertTrue(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertNotNull(collection0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertSame(mockFile0, file0);
      assertTrue(explodedArchive0.filtered);
      
      String string1 = "";
      try { 
        MockURL.URL(string0, string0, string1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "org.springframework.boot.loader";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      
      String string1 = "";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = mockFile0.getCanonicalPath();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", string3);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      MockFile mockFile1 = new MockFile(string2, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      boolean boolean0 = mockFile1.mkdirs();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean0);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("/", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(mockFile1, mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("/", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn((AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("/", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      boolean boolean1 = false;
      boolean boolean2 = mockFile1.setWritable(boolean1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("/", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(mockFile1, mockFile0);
      
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(mockFile1, boolean3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertFalse(file1.exists());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isFile());
      assertFalse(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertFalse(file1.canExecute());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertFalse(file2.equals((Object)file1));
      assertTrue(file2.equals((Object)file0));
      assertNotNull(file2);
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getUsableSpace());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isHidden());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertFalse(file2.canRead());
      assertFalse(file2.canWrite());
      assertFalse(file2.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertEquals("jars", file2.getName());
      assertEquals(0L, file2.getTotalSpace());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertNotNull(file3);
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isAbsolute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isHidden());
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertNotNull(file4);
      assertEquals(0L, file4.getTotalSpace());
      assertFalse(file4.canExecute());
      assertEquals(0L, file4.length());
      assertEquals(0L, file4.getFreeSpace());
      assertFalse(file4.isDirectory());
      assertTrue(file4.isAbsolute());
      assertFalse(file4.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertFalse(file4.canRead());
      assertEquals("MANIFEST.MF", file4.getName());
      assertFalse(file4.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertEquals(0L, file4.getUsableSpace());
      assertEquals(0L, file4.lastModified());
      assertTrue(file4.isFile());
      assertFalse(file4.canWrite());
      assertNotSame(file4, file2);
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file3));
      assertTrue(file5.equals((Object)file2));
      assertNotNull(file5);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file5.canRead());
      assertEquals("jars", file5.getName());
      assertFalse(file5.canExecute());
      assertFalse(file5.canWrite());
      assertTrue(file5.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertEquals(0L, file5.getFreeSpace());
      assertTrue(file5.isFile());
      assertEquals(0L, file5.length());
      assertEquals(0L, file5.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertFalse(file5.exists());
      assertEquals(0L, file5.lastModified());
      assertFalse(file5.isDirectory());
      assertFalse(file5.isHidden());
      assertEquals(0L, file5.getUsableSpace());
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertSame(file5, file0);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertNotSame(file5, file4);
      assertNotSame(file5, file3);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file4));
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isAbsolute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isAbsolute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file4));
      assertNull(archive_Entry0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertTrue(file3.isAbsolute());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertNotSame(file3, file5);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      assertNotSame(file3, file4);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(uRL0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(list0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(uRL1);
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(uRL1, uRL0);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(explodedArchive_FileEntry1);
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry1.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals("jars", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertFalse(file1.exists());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertTrue(file1.isFile());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isHidden());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertNotNull(file2);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertEquals("jars", file2.getName());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canRead());
      assertFalse(file2.exists());
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(file3);
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertFalse(file3.isDirectory());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.lastModified());
      assertTrue(file3.isAbsolute());
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      
      boolean boolean0 = file0.delete();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertTrue(file0.equals((Object)file2));
      assertFalse(boolean0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file2);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file2));
      assertNotNull(file4);
      assertFalse(file4.isDirectory());
      assertFalse(file4.exists());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals(0L, file4.length());
      assertFalse(file4.canExecute());
      assertEquals(0L, file4.getTotalSpace());
      assertTrue(file4.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertEquals("MANIFEST.MF", file4.getName());
      assertTrue(file4.isAbsolute());
      assertFalse(file4.canWrite());
      assertEquals(0L, file4.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertFalse(file4.canRead());
      assertFalse(file4.isHidden());
      assertEquals(0L, file4.getUsableSpace());
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      assertNotSame(file4, file2);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertTrue(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file3));
      assertFalse(file5.equals((Object)file1));
      assertNotNull(file5);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertTrue(file5.isAbsolute());
      assertFalse(file5.canWrite());
      assertTrue(file5.isFile());
      assertFalse(file5.canExecute());
      assertEquals("jars", file5.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertEquals(0L, file5.getFreeSpace());
      assertEquals(0L, file5.lastModified());
      assertEquals(0L, file5.length());
      assertEquals(0L, file5.getTotalSpace());
      assertFalse(file5.exists());
      assertFalse(file5.isDirectory());
      assertEquals(0L, file5.getUsableSpace());
      assertFalse(file5.isHidden());
      assertFalse(file5.canRead());
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertSame(file5, file0);
      assertNotSame(file5, file4);
      assertNotSame(file5, file3);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file5));
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertFalse(file3.isDirectory());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.lastModified());
      assertTrue(file3.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertFalse(file3.isDirectory());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.lastModified());
      assertTrue(file3.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file5));
      assertNull(archive_Entry0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canWrite());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertFalse(file3.isDirectory());
      assertFalse(file3.exists());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.lastModified());
      assertTrue(file3.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(file3, file4);
      assertNotSame(file3, file5);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean1 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(uRL0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertTrue(boolean1 == boolean0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(uRL1);
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(uRL1, uRL0);
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertNotNull(explodedArchive_FileEntry1);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-48);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-116);
      byteArray0[1] = byte1;
      AsciiBytes asciiBytes0 = new AsciiBytes(byteArray0);
      assertNotNull(asciiBytes0);
      assertEquals(2, asciiBytes0.length());
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, asciiBytes0.length());
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertTrue(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars");
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertTrue(file1.isFile());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canExecute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertFalse(file1.isHidden());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertNotNull(file2);
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertTrue(file2.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertEquals("jars", file2.getName());
      assertFalse(file2.canWrite());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(file3);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.canWrite());
      assertNotSame(file3, file1);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file2));
      assertNotNull(file4);
      assertEquals(0L, file4.getFreeSpace());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.getTotalSpace());
      assertFalse(file4.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertFalse(file4.canRead());
      assertFalse(file4.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertEquals("MANIFEST.MF", file4.getName());
      assertTrue(file4.isFile());
      assertFalse(file4.isHidden());
      assertEquals(0L, file4.getUsableSpace());
      assertEquals(0L, file4.lastModified());
      assertTrue(file4.isAbsolute());
      assertEquals(0L, file4.length());
      assertFalse(file4.canWrite());
      assertNotSame(file4, file0);
      assertNotSame(file4, file3);
      assertNotSame(file4, file1);
      assertNotSame(file4, file2);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(explodedArchive0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file1));
      assertTrue(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file3));
      assertNotNull(file5);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0L, file5.getUsableSpace());
      assertEquals(0L, file5.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertFalse(file5.isHidden());
      assertTrue(file5.isFile());
      assertTrue(file5.isAbsolute());
      assertFalse(file5.canWrite());
      assertEquals(0L, file5.getFreeSpace());
      assertEquals(0L, file5.length());
      assertEquals(0L, file5.getTotalSpace());
      assertFalse(file5.canExecute());
      assertFalse(file5.isDirectory());
      assertEquals("jars", file5.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertFalse(file5.exists());
      assertFalse(file5.canRead());
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file5, file0);
      assertNotSame(file5, file4);
      assertNotSame(file5, file1);
      assertNotSame(file5, file3);
      assertNotSame(file5, file2);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.canWrite());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.canWrite());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file2));
      assertNull(archive_Entry0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.canWrite());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file3, file4);
      assertNotSame(file3, file1);
      assertNotSame(file3, file0);
      assertNotSame(file3, file5);
      assertNotSame(file3, file2);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean4 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean4).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(uRL0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertTrue(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(set0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertFalse(file2.equals((Object)file1));
      assertTrue(file2.equals((Object)file0));
      assertNotNull(file2);
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals("jars", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.exists());
      assertEquals(0L, file2.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertFalse(file2.isDirectory());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(file3);
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canRead());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertFalse(file3.exists());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getTotalSpace());
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertNotNull(file4);
      assertEquals(0L, file4.getUsableSpace());
      assertEquals(0L, file4.lastModified());
      assertFalse(file4.isHidden());
      assertTrue(file4.isFile());
      assertTrue(file4.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertFalse(file4.canRead());
      assertFalse(file4.exists());
      assertEquals("MANIFEST.MF", file4.getName());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals(0L, file4.length());
      assertEquals(0L, file4.getTotalSpace());
      assertFalse(file4.canExecute());
      assertFalse(file4.isDirectory());
      assertFalse(file4.canWrite());
      assertNotSame(file4, file3);
      assertNotSame(file4, file2);
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(explodedArchive0);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file5.equals((Object)file4));
      assertTrue(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file3));
      assertNotNull(file5);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file5.exists());
      assertFalse(file5.isDirectory());
      assertEquals(0L, file5.length());
      assertEquals(0L, file5.getTotalSpace());
      assertTrue(file5.isFile());
      assertFalse(file5.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertEquals("jars", file5.getName());
      assertFalse(file5.canRead());
      assertFalse(file5.canWrite());
      assertEquals(0L, file5.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertFalse(file5.isHidden());
      assertEquals(0L, file5.lastModified());
      assertEquals(0L, file5.getFreeSpace());
      assertTrue(file5.isAbsolute());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertNotSame(file5, file4);
      assertSame(file5, file0);
      assertNotSame(file5, file1);
      assertNotSame(file5, file2);
      assertNotSame(file5, file3);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canRead());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertFalse(file3.exists());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canRead());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertFalse(file3.exists());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertNull(archive_Entry0);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertEquals(0L, file3.lastModified());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canRead());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertFalse(file3.exists());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertNotSame(file3, file4);
      assertNotSame(file3, file0);
      assertNotSame(file3, file5);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(uRL0);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(list0);
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertTrue(uRL1.equals((Object)uRL0));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(uRL1);
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(uRL1, uRL0);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(asciiBytes0);
      assertEquals(20, asciiBytes0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertEquals(20, asciiBytes0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertFalse(file1.canExecute());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isFile());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertNotNull(file2);
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isHidden());
      assertTrue(file2.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertFalse(file2.canWrite());
      assertEquals("jars", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(file3);
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.isDirectory());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertTrue(file3.isFile());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      
      boolean boolean0 = file0.delete();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean0);
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file2));
      assertNotNull(file4);
      assertFalse(file4.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertFalse(file4.canWrite());
      assertTrue(file4.isFile());
      assertEquals(0L, file4.getTotalSpace());
      assertFalse(file4.canExecute());
      assertFalse(file4.exists());
      assertEquals("MANIFEST.MF", file4.getName());
      assertEquals(0L, file4.length());
      assertEquals(0L, file4.getFreeSpace());
      assertFalse(file4.isHidden());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.getUsableSpace());
      assertEquals(0L, file4.lastModified());
      assertTrue(file4.isAbsolute());
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      assertNotSame(file4, file2);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertNotNull(explodedArchive0);
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file3));
      assertFalse(file5.equals((Object)file1));
      assertTrue(file5.equals((Object)file2));
      assertNotNull(file5);
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, file5.getFreeSpace());
      assertEquals(0L, file5.length());
      assertFalse(file5.isDirectory());
      assertFalse(file5.canRead());
      assertFalse(file5.exists());
      assertTrue(file5.isAbsolute());
      assertFalse(file5.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertEquals(0L, file5.getUsableSpace());
      assertTrue(file5.isFile());
      assertEquals(0L, file5.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertFalse(file5.canWrite());
      assertEquals("jars", file5.getName());
      assertFalse(file5.canExecute());
      assertEquals(0L, file5.getTotalSpace());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file5, file2);
      assertNotSame(file5, file4);
      assertNotSame(file5, file3);
      assertSame(file5, file0);
      assertNotSame(file5, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.isDirectory());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertTrue(file3.isFile());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file2));
      assertNull(archive_Entry0);
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.isDirectory());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertTrue(file3.isFile());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file5);
      assertNotSame(file3, file4);
      assertNotSame(file3, file2);
      assertTrue(explodedArchive0.filtered);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(list0);
      assertFalse(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertFalse(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(uRL1, uRL0);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertNotNull(explodedArchive_FileEntry1);
      assertFalse(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive_FileEntry1.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-48);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-116);
      byteArray0[1] = byte1;
      AsciiBytes asciiBytes0 = new AsciiBytes(byteArray0);
      assertNotNull(asciiBytes0);
      assertEquals(2, asciiBytes0.length());
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertFalse(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, asciiBytes0.length());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertTrue(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ExplodedArchive explodedArchive2 = (ExplodedArchive)explodedArchive0.getNestedArchive(explodedArchive_FileEntry1);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertNotNull(explodedArchive2);
      assertFalse(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive_FileEntry1.isDirectory());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertTrue(explodedArchive0.filtered);
      assertFalse(explodedArchive2.filtered);
      
      boolean boolean3 = false;
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file3, boolean3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      URL uRL0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile9();
      assertNotNull(file0);
      assertEquals("classes", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = file0.getAbsolutePath();
      assertNotNull(string0);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", string0);
      assertEquals("classes", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals("classes", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertNotNull(collection0);
      assertEquals("classes", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertNotNull(uRL1);
      assertEquals("classes", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      explodedArchive0.buildEntries(file0, boolean0);
      assertEquals("classes", file0.getName());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      File file0 = null;
      String string0 = "gi";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/gi", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/gi", uRI0.getRawPath());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = explodedArchive0.getroot();
      assertNotNull(file1);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file1.exists());
      assertEquals("gi", file1.toString());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertNull(file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("gi", file1.getName());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertFalse(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getTotalSpace());
      assertSame(mockFile0, file1);
      assertSame(file1, mockFile0);
      assertTrue(explodedArchive0.filtered);
      
      String string1 = mockFile0.getAbsolutePath();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/gi", string1);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNotSame(string0, string1);
      assertSame(mockFile0, file1);
      assertNotSame(string1, string0);
      
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = mockFile0.setExecutable(boolean3, boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean3);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("gi", mockFile0.getName());
      assertEquals("gi", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNotSame(string0, string1);
      assertSame(mockFile0, file1);
      
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file1, boolean2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile7();
      assertNotNull(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file1.getParent());
      assertNotSame(file1, file0);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(asciiBytes0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, asciiBytes0.length());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      FilteredArchive filteredArchive0 = new FilteredArchive(explodedArchive0, archive_EntryFilter0);
      assertFalse(file0.equals((Object)file1));
      assertNotNull(filteredArchive0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL0 = filteredArchive0.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(uRL0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = (ExplodedArchive.FileNotFoundURLConnection)explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
      assertFalse(file0.equals((Object)file1));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/tmp/junit1069761328127692012/junit891059030562649033/d", explodedArchive_FileNotFoundURLConnection0.toString());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(file0.equals((Object)file1));
      assertNotNull(list0);
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("d", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.canWrite());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertNotNull(file2);
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertFalse(file2.canWrite());
      assertEquals("jars", file2.getName());
      assertTrue(file2.isAbsolute());
      assertTrue(file2.isFile());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isHidden());
      assertFalse(file2.exists());
      assertFalse(file2.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file1));
      assertNotNull(file3);
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.canExecute());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file1);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file2));
      assertNotNull(file4);
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals(0L, file4.lastModified());
      assertEquals(0L, file4.length());
      assertFalse(file4.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertTrue(file4.isFile());
      assertFalse(file4.isHidden());
      assertTrue(file4.isAbsolute());
      assertFalse(file4.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertEquals(0L, file4.getUsableSpace());
      assertEquals("MANIFEST.MF", file4.getName());
      assertFalse(file4.canRead());
      assertFalse(file4.exists());
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      assertNotSame(file4, file0);
      assertNotSame(file4, file2);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file5 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertTrue(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file3));
      assertNotNull(file5);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, file5.getTotalSpace());
      assertEquals(0L, file5.getFreeSpace());
      assertFalse(file5.canWrite());
      assertFalse(file5.canRead());
      assertEquals(0L, file5.length());
      assertTrue(file5.isAbsolute());
      assertFalse(file5.isDirectory());
      assertFalse(file5.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertEquals(0L, file5.getUsableSpace());
      assertEquals(0L, file5.lastModified());
      assertFalse(file5.exists());
      assertTrue(file5.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertEquals("jars", file5.getName());
      assertFalse(file5.canExecute());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertNotSame(file5, file4);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertNotSame(file5, file3);
      assertSame(file5, file0);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file1));
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.canExecute());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.canExecute());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.canExecute());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file1));
      assertNull(archive_Entry0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.canExecute());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertNotSame(file3, file4);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file5);
      assertNotSame(file3, file1);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(uRL0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertNotNull(uRL1);
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getAuthority());
      assertEquals("", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(uRL1, uRL0);
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertNotNull(explodedArchive_FileEntry1);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry1.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.equals((Object)file2));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals("jars", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file0, file1);
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file1, boolean0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      
      boolean boolean2 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotNull(uRL0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(manifest0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotNull(collection0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = null;
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(asciiBytes0, explodedArchive0.MANIFEST_ENTRY_NAME, (AsciiBytes) null, (AsciiBytes) null, (AsciiBytes) null).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, boolean0, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(list0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes1 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(20, asciiBytes1.length());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(explodedArchive0.filtered);
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(string2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", string2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNull(manifest1);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set1 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(set1);
      assertFalse(set1.contains(string1));
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(set1.isEmpty());
      assertEquals(2, set1.size());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(set1, set0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes2 = new AsciiBytes(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(asciiBytes2.equals((Object)asciiBytes1));
      assertNotNull(asciiBytes2);
      assertEquals(65, asciiBytes2.length());
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(asciiBytes2, mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(asciiBytes2.equals((Object)asciiBytes1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(65, asciiBytes2.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive explodedArchive2 = (ExplodedArchive)explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(asciiBytes2.equals((Object)asciiBytes1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive2);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(65, asciiBytes2.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(asciiBytes2, asciiBytes1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertFalse(explodedArchive2.filtered);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      URL uRL0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile9();
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.canWrite());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertNotNull(uRL1);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("", uRL1.getHost());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertTrue(explodedArchive0.filtered);
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertNull(archive_Entry0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean1 = false;
      explodedArchive0.buildEntries(file0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertNotNull(asciiBytes0);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(20, asciiBytes0.length());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = explodedArchive0.getroot();
      assertNotNull(file1);
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("classes", file1.getName());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file1.toString());
      assertTrue(file1.canExecute());
      assertFalse(file1.isFile());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file1.getParent());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertSame(file0, file1);
      assertSame(file1, file0);
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive7();
      assertNull(explodedArchive0);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.exists());
      assertTrue(file1.isFile());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertNotNull(file2);
      assertFalse(file2.exists());
      assertFalse(file2.isDirectory());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canRead());
      assertTrue(file2.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertTrue(file2.isFile());
      assertEquals("jars", file2.getName());
      assertFalse(file2.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.length());
      assertFalse(file2.canWrite());
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file1));
      assertNotNull(file3);
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.length());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file1);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file2));
      assertNotNull(file4);
      assertEquals(0L, file4.getUsableSpace());
      assertFalse(file4.isHidden());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.lastModified());
      assertEquals(0L, file4.length());
      assertFalse(file4.canWrite());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertEquals(0L, file4.getFreeSpace());
      assertFalse(file4.canExecute());
      assertTrue(file4.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertTrue(file4.isFile());
      assertEquals("MANIFEST.MF", file4.getName());
      assertFalse(file4.canRead());
      assertFalse(file4.exists());
      assertNotSame(file4, file0);
      assertNotSame(file4, file3);
      assertNotSame(file4, file1);
      assertNotSame(file4, file2);
      
      ExplodedArchive explodedArchive1 = new ExplodedArchive(file0, hashMap0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(explodedArchive1);
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive1.filtered);
      
      File file5 = explodedArchive1.getroot();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file5.equals((Object)file3));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file4));
      assertTrue(file5.equals((Object)file2));
      assertNotNull(file5);
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file5.canExecute());
      assertFalse(file5.canRead());
      assertEquals(0L, file5.getTotalSpace());
      assertEquals(0L, file5.length());
      assertFalse(file5.canWrite());
      assertFalse(file5.exists());
      assertEquals("jars", file5.getName());
      assertTrue(file5.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertFalse(file5.isHidden());
      assertEquals(0L, file5.getUsableSpace());
      assertFalse(file5.isDirectory());
      assertEquals(0L, file5.getFreeSpace());
      assertEquals(0L, file5.lastModified());
      assertTrue(file5.isAbsolute());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertNotSame(file5, file3);
      assertSame(file5, file0);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertNotSame(file5, file4);
      assertTrue(explodedArchive1.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive1.new FileEntry(explodedArchive1.MANIFEST_ENTRY_NAME, file3);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file5));
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.length());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive1.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive1.serializedObjectSupporter;
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.length());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive1.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file4));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file5));
      assertNull(archive_Entry0);
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.length());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertFalse(file3.isHidden());
      assertEquals("MANIFEST.MF", file3.getName());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      assertNotSame(file3, file4);
      assertNotSame(file3, file1);
      assertNotSame(file3, file5);
      assertTrue(explodedArchive1.filtered);
      
      boolean boolean0 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars");
      String string0 = "com.thoughtworks.xstream.converters.time.OffsetDateTimeConverter";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      URL uRL0 = explodedArchive1.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(uRL0);
      assertFalse(file0.isDirectory());
      assertEquals(64L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive1.filtered);
      
      List<Archive> list0 = explodedArchive1.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(boolean0 == boolean1);
      assertNotNull(list0);
      assertFalse(file0.isDirectory());
      assertEquals(64L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive1.filtered);
      
      URL uRL1 = explodedArchive1.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertFalse(file0.isDirectory());
      assertEquals(64L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertNotSame(uRL1, uRL0);
      assertTrue(explodedArchive1.filtered);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(file0.isDirectory());
      assertEquals(64L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertTrue(explodedArchive1.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive1.new FileEntry(explodedArchive1.MANIFEST_ENTRY_NAME, file0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertNotNull(explodedArchive_FileEntry1);
      assertFalse(file0.isDirectory());
      assertEquals(64L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertTrue(explodedArchive1.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry1.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive2 = (ExplodedArchive)explodedArchive1.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertNotNull(explodedArchive2);
      assertFalse(file0.isDirectory());
      assertEquals(64L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file2);
      assertSame(file0, file5);
      assertNotSame(file0, file3);
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertTrue(explodedArchive2.filtered);
      assertTrue(explodedArchive1.filtered);
      
      try { 
        explodedArchive1.getNestedArchive(explodedArchive_FileEntry1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(uRL0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(manifest0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(collection0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive0.MANIFEST_ENTRY_NAME).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      boolean boolean3 = true;
      boolean boolean4 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3, boolean4).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean4);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertNotNull(list0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes0);
      assertEquals(20, asciiBytes0.length());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(explodedArchive0.filtered);
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(string2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", string2);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNull(manifest1);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list1 = explodedArchive1.getNestedArchives(archive_EntryFilter1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(list1);
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(list1, list0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter1 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getFilteredArchive(archive_EntryRenameFilter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      URL uRL0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile9();
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertNotNull(uRL1);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertEquals("", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertTrue(explodedArchive0.filtered);
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertNull(archive_Entry0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = (ExplodedArchive.FileEntry)hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, archive_Entry0);
      assertNotNull(explodedArchive_FileEntry1);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean0 = false;
      explodedArchive0.buildEntries(file0, boolean0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertNotNull(asciiBytes0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.exists());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(20, asciiBytes0.length());
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile7();
      assertNotNull(file0);
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file1.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.exists());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertNotSame(file1, file0);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(asciiBytes0);
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, asciiBytes0.length());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)7;
      byteArray0[0] = byte0;
      AsciiBytes asciiBytes1 = new AsciiBytes(byteArray0);
      assertFalse(asciiBytes1.equals((Object)asciiBytes0));
      assertNotNull(asciiBytes1);
      assertEquals(1, asciiBytes1.length());
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Archive.Entry archive_Entry0 = null;
      Archive.Entry archive_Entry1 = hashMap0.put(asciiBytes1, archive_Entry0);
      assertFalse(asciiBytes1.equals((Object)asciiBytes0));
      assertNull(archive_Entry1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, asciiBytes1.length());
      assertNotSame(asciiBytes1, asciiBytes0);
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      FilteredArchive filteredArchive0 = new FilteredArchive(explodedArchive0, archive_EntryFilter0);
      assertFalse(file0.equals((Object)file1));
      assertNotNull(filteredArchive0);
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL0 = filteredArchive0.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(uRL0);
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = (ExplodedArchive.FileNotFoundURLConnection)explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
      assertFalse(file0.equals((Object)file1));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/tmp/junit1069761328127692012/junit891059030562649033/d", explodedArchive_FileNotFoundURLConnection0.toString());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter1).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(file0.equals((Object)file1));
      assertNotNull(list0);
      assertFalse(file0.exists());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("d", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile11();
      assertNotNull(file0);
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile6();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canWrite());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile11();
      assertFalse(file2.equals((Object)file1));
      assertTrue(file2.equals((Object)file0));
      assertNotNull(file2);
      assertTrue(file2.isFile());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertEquals("jars", file2.getName());
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertNotNull(file3);
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isHidden());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      
      File file4 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file3));
      assertNotNull(file4);
      assertTrue(file4.isAbsolute());
      assertTrue(file4.isFile());
      assertEquals(0L, file4.lastModified());
      assertEquals("MANIFEST.MF", file4.getName());
      assertFalse(file4.canWrite());
      assertFalse(file4.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file4.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file4.toString());
      assertFalse(file4.isHidden());
      assertEquals(0L, file4.getUsableSpace());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals(0L, file4.length());
      assertFalse(file4.exists());
      assertFalse(file4.canExecute());
      assertEquals(0L, file4.getTotalSpace());
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file2);
      assertNotSame(file4, file3);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertNotNull(explodedArchive0);
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertEquals("jars", file0.getName());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars");
      String string0 = "2VIkKjRC}?x6_1{/X+";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      File file5 = explodedArchive0.getroot();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file3));
      assertFalse(file5.equals((Object)file4));
      assertNotNull(file5);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0L, file5.getFreeSpace());
      assertTrue(file5.canWrite());
      assertFalse(file5.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file5.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file5.getParent());
      assertTrue(file5.canExecute());
      assertTrue(file5.canRead());
      assertEquals("jars", file5.getName());
      assertTrue(file5.isAbsolute());
      assertEquals(0L, file5.getTotalSpace());
      assertFalse(file5.isHidden());
      assertEquals(0L, file5.getUsableSpace());
      assertEquals(1392409281320L, file5.lastModified());
      assertTrue(file5.exists());
      assertEquals(18L, file5.length());
      assertTrue(file5.isFile());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertNotSame(file5, file3);
      assertSame(file5, file0);
      assertNotSame(file5, file4);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file3);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file4));
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isHidden());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isHidden());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file5));
      assertFalse(file3.equals((Object)file4));
      assertNull(archive_Entry0);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.canWrite());
      assertTrue(file3.isFile());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isHidden());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.canRead());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(file3, file5);
      assertNotSame(file3, file4);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean1 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertTrue(explodedArchive0.filtered);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(boolean1 == boolean0);
      assertNotNull(list0);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(uRL1, uRL0);
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertNotNull(explodedArchive_FileEntry1);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry1.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertTrue(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file3));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("jars", file0.getName());
      assertTrue(file0.canExecute());
      assertEquals(18L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertNotSame(file0, file3);
      assertNotSame(file0, file1);
      assertSame(file0, file5);
      assertNotSame(file0, file2);
      assertNotSame(file0, file4);
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertTrue(explodedArchive0.filtered);
      
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(manifest0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(collection0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive0.MANIFEST_ENTRY_NAME).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotNull(explodedArchive1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      assertTrue(explodedArchive1.filtered);
      
      boolean boolean3 = true;
      boolean boolean4 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3, boolean4).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean4);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertNotNull(list0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes0);
      assertEquals(20, asciiBytes0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertFalse(explodedArchive0.filtered);
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(string2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", string2);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNull(manifest1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryFilter archive_EntryFilter1 = null;
      // Undeclared exception!
      try { 
        explodedArchive1.getNestedArchives(archive_EntryFilter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(explodedArchive0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(uRL0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, mockFile0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.filtered);
      
      File file0 = explodedArchive_FileEntry0.getFile();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(file0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals("", file0.getName());
      assertTrue(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("", file0.toString());
      assertNull(file0.getParent());
      assertFalse(file0.isHidden());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertFalse(explodedArchive0.filtered);
      
      URLConnection uRLConnection0 = explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(uRLConnection0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive_FileEntry0.getName();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(asciiBytes0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(20, asciiBytes0.length());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNull(manifest0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(collection0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      File file1 = explodedArchive_FileEntry0.getFile();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(file1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("", file1.toString());
      assertFalse(file1.isFile());
      assertFalse(file1.canRead());
      assertEquals("", file1.getName());
      assertNull(file1.getParent());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertSame(file1, file0);
      assertSame(file1, mockFile0);
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry0.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotNull(explodedArchive1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(explodedArchive1, explodedArchive0);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertFalse(explodedArchive0.filtered);
      
      boolean boolean3 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean3).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(list0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes1 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(20, asciiBytes1.length());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertSame(asciiBytes1, asciiBytes0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes2 = explodedArchive_FileEntry0.getName();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes2);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(20, asciiBytes2.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(asciiBytes2, asciiBytes0);
      assertSame(asciiBytes2, asciiBytes1);
      assertFalse(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive0.filtered);
      
      String string2 = explodedArchive_FileNotFoundURLConnection0.getname();
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", string2);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", explodedArchive_FileNotFoundURLConnection0.getname());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(explodedArchive0.filtered);
      
      MockFile mockFile1 = (MockFile)explodedArchive_FileEntry0.getFile();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(mockFile1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.isAbsolute());
      assertEquals("", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.exists());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(mockFile0, mockFile1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(mockFile1, mockFile0);
      assertSame(mockFile1, file1);
      assertSame(mockFile1, file0);
      assertFalse(explodedArchive0.filtered);
      
      boolean boolean4 = explodedArchive_FileEntry0.isDirectory();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(mockFile0, mockFile1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNull(manifest1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(mockFile0, mockFile1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      Manifest manifest0 = new Manifest();
      assertNotNull(manifest0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "";
      Attributes attributes0 = manifest0.getAttributes(string0);
      assertNull(attributes0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, hashMap0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertNull(manifest1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      File file0 = null;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file0, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      URL uRL0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes");
      String string0 = "fw&bHgD9RE ";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile9();
      assertNotNull(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertNotNull(explodedArchive_FileEntry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertNotNull(uRL1);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("", uRL1.getHost());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertTrue(explodedArchive0.filtered);
      
      URL uRL2 = explodedArchive0.getUrl();
      assertTrue(uRL2.equals((Object)uRL1));
      assertNotNull(uRL2);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("file", uRL2.getProtocol());
      assertNull(uRL2.getRef());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.getQuery());
      assertEquals("", uRL2.getHost());
      assertEquals("", uRL2.getAuthority());
      assertNotSame(uRL2, uRL1);
      assertTrue(explodedArchive0.filtered);
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertNull(archive_Entry0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean1 = false;
      explodedArchive0.buildEntries(file0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertNotNull(asciiBytes0);
      assertEquals(20, asciiBytes0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(12L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile9();
      assertNotNull(file0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, file0);
      assertNotNull(explodedArchive_FileEntry0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile16();
      assertFalse(file1.equals((Object)file0));
      assertNotNull(file1);
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isAbsolute());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file1.getParent());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canWrite());
      assertNotSame(file1, file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(uRL0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      Archive.Entry archive_Entry0 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, explodedArchive_FileEntry0);
      assertFalse(file0.equals((Object)file1));
      assertNull(archive_Entry0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      boolean boolean1 = false;
      explodedArchive0.buildEntries(file0, boolean1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(asciiBytes0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(20, asciiBytes0.length());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertFalse(file0.equals((Object)file1));
      assertNotNull(manifest0);
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(file0, file1);
      assertTrue(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      
      boolean boolean1 = mockFile0.setReadable(boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertFalse(explodedArchive0.filtered);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = explodedArchive0.new FileEntry(explodedArchive0.MANIFEST_ENTRY_NAME, mockFile0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive_FileEntry0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest0 = new Manifest();
      assertNotNull(manifest0);
      
      explodedArchive0.manifest = manifest0;
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      
      File file0 = explodedArchive_FileEntry0.getFile();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(file0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals("", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      assertFalse(explodedArchive0.filtered);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive.FilteredURLStreamHandler explodedArchive_FilteredURLStreamHandler0 = explodedArchive0.new FilteredURLStreamHandler();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive_FilteredURLStreamHandler0);
      assertFalse(explodedArchive0.filtered);
      
      URLConnection uRLConnection0 = explodedArchive_FilteredURLStreamHandler0.openConnection(uRL0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(uRLConnection0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(manifest1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertSame(mockFile0, file0);
      assertSame(manifest1, manifest0);
      assertFalse(explodedArchive0.filtered);
      
      Collection<Archive.Entry> collection0 = explodedArchive0.getEntries();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(collection0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertSame(mockFile0, file0);
      assertFalse(explodedArchive0.filtered);
      
      File file1 = explodedArchive_FileEntry0.getFile();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(file1);
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertFalse(file1.isFile());
      assertNull(file1.getParent());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isDirectory());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertFalse(file1.isAbsolute());
      assertEquals("", file1.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertSame(file1, file0);
      assertSame(file1, mockFile0);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertFalse(explodedArchive0.filtered);
      
      Archive.EntryRenameFilter archive_EntryRenameFilter0 = mock(Archive.EntryRenameFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntry0.name).when(archive_EntryRenameFilter0).apply(any(org.springframework.boot.loader.util.AsciiBytes.class) , any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getFilteredArchive(archive_EntryRenameFilter0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotNull(explodedArchive1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(explodedArchive1.filtered);
      assertFalse(explodedArchive0.filtered);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      
      AsciiBytes asciiBytes0 = explodedArchive0.getMANIFEST_ENTRY_NAME();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(20, asciiBytes0.length());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      AsciiBytes asciiBytes1 = explodedArchive_FileEntry0.getName();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(asciiBytes1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertEquals(20, asciiBytes1.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(asciiBytes1, asciiBytes0);
      assertFalse(explodedArchive0.filtered);
      
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      String string2 = URLConnection.guessContentTypeFromName(string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(string2);
      assertNotSame(string1, string0);
      
      MockFile mockFile1 = (MockFile)explodedArchive_FileEntry0.getFile();
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(mockFile1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertEquals("", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertEquals("", mockFile1.toString());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertNotSame(string0, string1);
      assertSame(mockFile0, mockFile1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(mockFile1, file1);
      assertSame(mockFile1, mockFile0);
      assertSame(mockFile1, file0);
      assertFalse(explodedArchive0.filtered);
      
      boolean boolean3 = explodedArchive_FileEntry0.isDirectory();
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotSame(string0, string1);
      assertSame(mockFile0, mockFile1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.filtered);
      
      Manifest manifest2 = explodedArchive0.getManifest();
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean3);
      assertTrue(boolean2 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertNotNull(manifest2);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.toString());
      assertNotSame(string0, string1);
      assertSame(mockFile0, mockFile1);
      assertSame(mockFile0, file0);
      assertSame(mockFile0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertSame(manifest2, manifest1);
      assertSame(manifest2, manifest0);
      assertFalse(explodedArchive0.filtered);
      
      try { 
        explodedArchive1.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      File file0 = null;
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      File file1 = explodedArchive0.getroot();
      assertNull(file1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(explodedArchive0.filtered);
      
      long long0 = (-354L);
      System.setCurrentTimeMillis(long0);
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      
      String string0 = "output-test-dest";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string0);
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file://some/fake/but/wellformed/url", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertEquals("output-test-dest", explodedArchive_FileNotFoundURLConnection0.getname());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      
      SerializedObjectSupporter serializedObjectSupporter0 = explodedArchive_FileNotFoundURLConnection0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter0);
      
      explodedArchive0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file://some/fake/but/wellformed/url", explodedArchive_FileNotFoundURLConnection0.toString());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertEquals("output-test-dest", explodedArchive_FileNotFoundURLConnection0.getname());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        explodedArchive0.buildEntries(file1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      File file0 = null;
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, hashMap0);
      assertNotNull(explodedArchive0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(explodedArchive0.filtered);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertNotNull(explodedArchive0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(explodedArchive0.filtered);
      
      boolean boolean1 = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744");
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      // Undeclared exception!
      explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "org.springframework.boot.loader";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      
      String string1 = "";
      ExplodedArchive.FileNotFoundURLConnection explodedArchive_FileNotFoundURLConnection0 = new ExplodedArchive.FileNotFoundURLConnection(uRL0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(explodedArchive_FileNotFoundURLConnection0);
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultUseCaches());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getConnectTimeout());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDoOutput());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getDefaultAllowUserInteraction());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileNotFoundURLConnection:file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/org.springframework.boot.loader", explodedArchive_FileNotFoundURLConnection0.toString());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getAllowUserInteraction());
      assertFalse(explodedArchive_FileNotFoundURLConnection0.getUseCaches());
      assertTrue(explodedArchive_FileNotFoundURLConnection0.getDoInput());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentType());
      assertEquals("", explodedArchive_FileNotFoundURLConnection0.getname());
      assertNull(explodedArchive_FileNotFoundURLConnection0.getContentEncoding());
      assertEquals(0L, explodedArchive_FileNotFoundURLConnection0.getIfModifiedSince());
      assertEquals((-1), explodedArchive_FileNotFoundURLConnection0.getContentLength());
      assertEquals(0, explodedArchive_FileNotFoundURLConnection0.getReadTimeout());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertEquals("org.springframework.boot.loader", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("org.springframework.boot.loader", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNotSame(string0, string1);
      
      MockFile mockFile1 = new MockFile(explodedArchive_FileNotFoundURLConnection0.name, explodedArchive_FileNotFoundURLConnection0.name);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile1);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
  }
}
