/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 05:04:36 GMT 2021
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.archive.ExplodedArchiveTests;
import org.springframework.boot.loader.archive.JarFileArchive;
import org.springframework.boot.loader.jar.Handler;
import org.springframework.boot.loader.util.AsciiBytes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchiveTests_ESTest extends ExplodedArchiveTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-15);
      byteArray0[2] = byte0;
      byte byte1 = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-15), (byte)0}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.close();
      try { 
        explodedArchiveTests0.copy(byteArrayInputStream0, pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchiveTests0.rootFolder, hashMap0);
      assertTrue(explodedArchive0.filtered);
      assertNotNull(explodedArchive0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, Archive.Entry> map0 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
      assertTrue(explodedArchive0.filtered);
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(explodedArchiveTests0.rootFolder);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = null;
      explodedArchiveTests0.setarchive(explodedArchive0);
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte0, byte0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      explodedArchiveTests0.copy(byteArrayInputStream0, pipedOutputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte1 = (byte)24;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-105);
      explodedArchiveTests0.setrootFolder(file0);
      String string0 = "";
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HashMap<String, Archive.Entry> hashMap0 = new HashMap<String, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = "Gy36^f";
      ZipEntry zipEntry0 = new ZipEntry(string0);
      assertNotNull(zipEntry0);
      assertNull(zipEntry0.getComment());
      assertEquals((-1L), zipEntry0.getCrc());
      assertEquals((-1L), zipEntry0.getCompressedSize());
      assertEquals("Gy36^f", zipEntry0.getName());
      assertEquals((-1L), zipEntry0.getSize());
      assertEquals((-1), zipEntry0.getMethod());
      assertFalse(zipEntry0.isDirectory());
      assertEquals("Gy36^f", zipEntry0.toString());
      
      byte byte0 = (byte) (-53);
      byte byte1 = (byte) (-72);
      byte byte2 = (byte)0;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      String string1 = "=";
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.rootFolder;
      assertNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.getarchive();
      assertNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = 1138;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchiveTests0.rootFolder, hashMap0);
      assertTrue(explodedArchive0.filtered);
      assertNotNull(explodedArchive0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Archive.Entry archive_Entry0 = null;
      Archive.Entry archive_Entry1 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, archive_Entry0);
      assertTrue(explodedArchive0.filtered);
      assertNull(archive_Entry1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      try { 
        explodedArchiveTests0.createArchive();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.getarchive();
      assertNull(explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.filtered);
      assertNotNull(explodedArchive0);
      
      explodedArchiveTests0.setarchive(explodedArchive0);
      assertFalse(explodedArchive0.filtered);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.temporaryFolder;
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchiveTests0.archive);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.rootFolder;
      assertNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
      explodedArchiveTests0.setrootFolder(file0);
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.temporaryFolder;
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.temporaryFolder = temporaryFolder0;
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      byteArrayOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      explodedArchiveTests0.copy(dataInputStream0, byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      String string0 = "";
      try { 
        explodedArchiveTests0.createArchive(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      explodedArchiveTests0.temporaryFolder = temporaryFolder0;
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = (-2965);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      String string0 = ">`RQ,vMOJRwwh86y";
      try { 
        explodedArchiveTests0.createArchive(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive";
      String string1 = "'\"A&3]";
      File file0 = MockFile.createTempFile(string0, string1);
      assertNotNull(file0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/org.springframework.boot.loader.archive.ExplodedArchive0'\"A&3]", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive0'\"A&3]", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      
      explodedArchiveTests0.setrootFolder(file0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/org.springframework.boot.loader.archive.ExplodedArchive0'\"A&3]", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive0'\"A&3]", file0.getName());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.getarchive();
      assertNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = new TemporaryFolder(explodedArchiveTests0.rootFolder);
      assertNotNull(temporaryFolder0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string0);
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.rootFolder = (File) mockFile0;
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchiveTests0.rootFolder.canRead());
      assertTrue(explodedArchiveTests0.rootFolder.isDirectory());
      assertTrue(explodedArchiveTests0.rootFolder.exists());
      assertFalse(explodedArchiveTests0.rootFolder.isFile());
      assertTrue(explodedArchiveTests0.rootFolder.canWrite());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertTrue(explodedArchiveTests0.rootFolder.canExecute());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertEquals(0L, explodedArchiveTests0.rootFolder.length());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertFalse(explodedArchiveTests0.rootFolder.isAbsolute());
      assertEquals("", explodedArchiveTests0.rootFolder.getName());
      assertNull(explodedArchiveTests0.rootFolder.getParent());
      assertEquals("", explodedArchiveTests0.rootFolder.toString());
      assertEquals(1392409281320L, explodedArchiveTests0.rootFolder.lastModified());
      
      explodedArchiveTests0.temporaryFolder = temporaryFolder0;
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNotNull(file0);
      assertSame(file0, mockFile0);
      assertTrue(file0.exists());
      assertEquals("", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertEquals("", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isFile());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(explodedArchiveTests0.rootFolder, boolean0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "o;z";
      String string1 = "java.protocol.handler.pkgs";
      File file0 = MockFile.createTempFile(string1, string1, explodedArchiveTests0.rootFolder);
      assertNotNull(file0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/java.protocol.handler.pkgs0java.protocol.handler.pkgs", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("java.protocol.handler.pkgs0java.protocol.handler.pkgs", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      
      explodedArchiveTests0.rootFolder = file0;
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/java.protocol.handler.pkgs0java.protocol.handler.pkgs", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertEquals("java.protocol.handler.pkgs0java.protocol.handler.pkgs", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertEquals("/tmp", explodedArchiveTests0.rootFolder.getParent());
      assertTrue(explodedArchiveTests0.rootFolder.canWrite());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      assertTrue(explodedArchiveTests0.rootFolder.isFile());
      assertTrue(explodedArchiveTests0.rootFolder.canRead());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertTrue(explodedArchiveTests0.rootFolder.exists());
      assertTrue(explodedArchiveTests0.rootFolder.canExecute());
      assertEquals("/tmp/java.protocol.handler.pkgs0java.protocol.handler.pkgs", explodedArchiveTests0.rootFolder.toString());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertEquals(1392409281320L, explodedArchiveTests0.rootFolder.lastModified());
      assertTrue(explodedArchiveTests0.rootFolder.isAbsolute());
      assertFalse(explodedArchiveTests0.rootFolder.isDirectory());
      assertEquals("java.protocol.handler.pkgs0java.protocol.handler.pkgs", explodedArchiveTests0.rootFolder.getName());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertEquals(0L, explodedArchiveTests0.rootFolder.length());
      
      File file1 = MockFile.createTempFile(string0, string0);
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(file1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(file1.equals((Object)file0));
      assertEquals("/tmp/o;z1o;z", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals("/tmp", file1.getParent());
      assertEquals("o;z1o;z", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      
      explodedArchiveTests0.setrootFolder(file1);
      assertNotSame(string0, string1);
      assertNotSame(file1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(file1.equals((Object)file0));
      assertEquals("/tmp/o;z1o;z", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals("/tmp", file1.getParent());
      assertEquals("o;z1o;z", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      
      TemporaryFolder temporaryFolder0 = null;
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      try { 
        explodedArchiveTests0.createArchive(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = null;
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      String string0 = "file:////";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.setrootFolder(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("file:", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals("file:", mockFile0.getName());
      
      TemporaryFolder temporaryFolder1 = explodedArchiveTests0.gettemporaryFolder();
      assertNull(temporaryFolder1);
      
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-34);
      byteArray0[0] = byte0;
      explodedArchiveTests0.archive = explodedArchive0;
      byte byte1 = (byte) (-15);
      byteArray0[1] = byte1;
      byte byte2 = (byte)58;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-15), (byte)58, (byte)0}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        explodedArchiveTests0.copy(byteArrayInputStream0, pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      InputStream inputStream0 = null;
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        explodedArchiveTests0.copy(inputStream0, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "rc(Nw0d*$2-EFH37S}";
      MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.createNewFile();
      assertTrue(boolean0);
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      String string1 = "";
      URI uRI0 = mockFile0.toURI();
      assertNotNull(uRI0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S%7D", uRI0.toString());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S%7D", uRI0.getRawPath());
      
      MockFile mockFile1 = new MockFile(string0, string1);
      assertNotNull(mockFile1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean1 = mockFile1.mkdirs();
      assertFalse(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6", mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S}", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      
      explodedArchiveTests0.rootFolder = (File) mockFile1;
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6", mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S}", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", explodedArchiveTests0.rootFolder.getName());
      assertTrue(explodedArchiveTests0.rootFolder.isFile());
      assertFalse(explodedArchiveTests0.rootFolder.isDirectory());
      assertTrue(explodedArchiveTests0.rootFolder.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S}", explodedArchiveTests0.rootFolder.toString());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertEquals(1392409281320L, explodedArchiveTests0.rootFolder.lastModified());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertTrue(explodedArchiveTests0.rootFolder.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6", explodedArchiveTests0.rootFolder.getParent());
      assertEquals(0L, explodedArchiveTests0.rootFolder.length());
      assertTrue(explodedArchiveTests0.rootFolder.isAbsolute());
      assertTrue(explodedArchiveTests0.rootFolder.canExecute());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertTrue(explodedArchiveTests0.rootFolder.canWrite());
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      Path path1 = mockFile1.toPath();
      assertNotNull(path1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(path1, path0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(path1.equals((Object)path0));
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6", mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S}", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      
      boolean boolean2 = mockFile0.renameTo(explodedArchiveTests0.rootFolder);
      assertFalse(boolean2);
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, mockFile1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      
      explodedArchiveTests0.rootFolder = (File) mockFile0;
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6", mockFile1.getParent());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", mockFile1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/rc(Nw0d*$2-EFH37S}", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      assertFalse(explodedArchiveTests0.rootFolder.isAbsolute());
      assertEquals("rc(Nw0d*$2-EFH37S}", explodedArchiveTests0.rootFolder.getName());
      assertTrue(explodedArchiveTests0.rootFolder.isFile());
      assertFalse(explodedArchiveTests0.rootFolder.isDirectory());
      assertTrue(explodedArchiveTests0.rootFolder.canRead());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertEquals(1392409281320L, explodedArchiveTests0.rootFolder.lastModified());
      assertEquals("rc(Nw0d*$2-EFH37S}", explodedArchiveTests0.rootFolder.toString());
      assertNull(explodedArchiveTests0.rootFolder.getParent());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertTrue(explodedArchiveTests0.rootFolder.exists());
      assertEquals(0L, explodedArchiveTests0.rootFolder.length());
      assertTrue(explodedArchiveTests0.rootFolder.canExecute());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertTrue(explodedArchiveTests0.rootFolder.canWrite());
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNotNull(file0);
      assertSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertTrue(file0.equals((Object)mockFile1));
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", file0.toString());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertNull(file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("rc(Nw0d*$2-EFH37S}", file0.getName());
      
      try { 
        explodedArchiveTests0.createArchive(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.filtered);
      assertNotNull(explodedArchive0);
      
      boolean boolean0 = false;
      explodedArchive0.filtered = boolean0;
      String string0 = explodedArchive0.toString();
      assertFalse(explodedArchive0.filtered);
      assertEquals("archive", string0);
      assertNotNull(string0);
      
      explodedArchiveTests0.setarchive(explodedArchive0);
      assertFalse(explodedArchive0.filtered);
      
      ExplodedArchive explodedArchive1 = explodedArchiveTests0.getarchive();
      assertFalse(explodedArchive1.filtered);
      assertNotNull(explodedArchive1);
      assertSame(explodedArchive1, explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      byte[] byteArray0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 1138;
      Archive.Entry archive_Entry0 = null;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchiveTests0.rootFolder, hashMap0);
      assertTrue(explodedArchive0.filtered);
      assertNotNull(explodedArchive0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, Archive.Entry> map0 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
      assertTrue(explodedArchive0.filtered);
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string0 = null;
      try { 
        explodedArchiveTests0.createArchive(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = ",5w2l8Rzav";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)12;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-92);
      byteArray0[1] = byte1;
      byte byte2 = (byte)3;
      byteArray0[2] = byte2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte1, byte0);
      assertNotNull(byteArrayInputStream0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-92), (byte)3}, byteArray0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-92), (byte)3}, byteArray0);
      
      String string1 = "nested.jar!/";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      assertNotNull(mockPrintStream0);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.copy(dataInputStream0, mockPrintStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "nested.jar";
      String string1 = "jar:";
      String string2 = "36M@bD";
      MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string2);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("nested.jar0jar:", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(mockFile0, file0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      Path path0 = file0.toPath();
      assertNotNull(path0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("nested.jar0jar:", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      explodedArchiveTests0.setrootFolder(file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("nested.jar0jar:", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertNotNull(file1);
      assertNotSame(file1, mockFile0);
      assertSame(file1, file0);
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals("nested.jar0jar:", file1.getName());
      assertTrue(file1.exists());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      HashMap<AsciiBytes, Archive.Entry> hashMap0 = new HashMap<AsciiBytes, Archive.Entry>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      byte[] byteArray0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 1138;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchiveTests0.rootFolder, hashMap0);
      assertTrue(explodedArchive0.filtered);
      assertNotNull(explodedArchive0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Archive.Entry archive_Entry0 = null;
      Archive.Entry archive_Entry1 = hashMap0.put(explodedArchive0.MANIFEST_ENTRY_NAME, archive_Entry0);
      assertTrue(explodedArchive0.filtered);
      assertNull(archive_Entry1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)102;
      byteArray0[0] = byte0;
      byte byte1 = (byte)10;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)12;
      byteArray0[3] = byte3;
      byte byte4 = (byte)112;
      byteArray0[4] = byte4;
      byte byte5 = (byte)87;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-68);
      byteArray0[7] = byte7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)10, (byte)0, (byte)12, (byte)112, (byte)87, (byte)1, (byte) (-68)}, byteArray0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, byteArray0[1]);
      assertNotNull(bufferedInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)10, (byte)0, (byte)12, (byte)112, (byte)87, (byte)1, (byte) (-68)}, byteArray0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(byte0);
      assertNotNull(byteArrayOutputStream0);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte7);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte3);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      explodedArchiveTests0.copy(bufferedInputStream0, byteArrayOutputStream0);
      assertFalse(byte0 == byte4);
      assertFalse(byte0 == byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte7);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("f\n\u0000\fpW\u0001\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)10, (byte)0, (byte)12, (byte)112, (byte)87, (byte)1, (byte) (-68)}, byteArray0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "nested.jar";
      String string1 = "jar:";
      String string2 = "36M@bD";
      MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string2);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      assertNotNull(file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("nested.jar0jar:", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      boolean boolean0 = mockFile0.mkdirs();
      assertFalse(boolean0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      boolean boolean1 = true;
      boolean boolean2 = file0.setReadable(boolean0, boolean1);
      assertTrue(boolean2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("nested.jar0jar:", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      Path path0 = file0.toPath();
      assertNotNull(path0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("nested.jar0jar:", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      explodedArchiveTests0.setrootFolder(file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("nested.jar0jar:", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertNotNull(file1);
      assertSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertEquals("nested.jar0jar:", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertFalse(file1.canRead());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      ExplodedArchive explodedArchive0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-34);
      byteArray0[2] = byte0;
      byte byte1 = (byte) (-15);
      byteArray0[1] = byte1;
      byte byte2 = (byte)58;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-15), (byte)58, (byte)0}, byteArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "CL+^";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.rootFolder = (File) mockFile0;
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/CL+^", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/CL+^/CL+^", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("CL+^", mockFile0.getName());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertEquals(0L, explodedArchiveTests0.rootFolder.length());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertFalse(explodedArchiveTests0.rootFolder.exists());
      assertTrue(explodedArchiveTests0.rootFolder.isAbsolute());
      assertFalse(explodedArchiveTests0.rootFolder.canRead());
      assertFalse(explodedArchiveTests0.rootFolder.canExecute());
      assertEquals(0L, explodedArchiveTests0.rootFolder.lastModified());
      assertTrue(explodedArchiveTests0.rootFolder.isFile());
      assertEquals("CL+^", explodedArchiveTests0.rootFolder.getName());
      assertFalse(explodedArchiveTests0.rootFolder.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/CL+^", explodedArchiveTests0.rootFolder.getParent());
      assertFalse(explodedArchiveTests0.rootFolder.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/CL+^/CL+^", explodedArchiveTests0.rootFolder.toString());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNotNull(file0);
      assertSame(file0, mockFile0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("CL+^", file0.getName());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/CL+^/CL+^", file0.toString());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/CL+^", file0.getParent());
  }
}
