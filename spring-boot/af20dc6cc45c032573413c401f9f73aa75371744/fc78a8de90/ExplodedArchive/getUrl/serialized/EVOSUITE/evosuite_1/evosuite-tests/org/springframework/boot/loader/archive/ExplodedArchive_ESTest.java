/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 12:01:47 GMT 2021
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.jar.Manifest;
import java.util.zip.ZipEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.archive.SerializedObjectSupporter;
import org.springframework.boot.loader.jar.JarFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive2();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string0 = "OdhYn4";
      File file0 = MockFile.createTempFile(string0, string0, explodedArchive0.root);
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/OdhYn40OdhYn4", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("OdhYn40OdhYn4", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.root, explodedArchive0.recursive);
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.EntryFilter archive_EntryFilter0 = null;
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive11();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(set0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.manifestFile, explodedArchive0.recursive);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.setcurrent(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.current.isFile());
      assertTrue(explodedArchive_FileEntryIterator0.current.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertEquals(1392409281320L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertEquals("", explodedArchive_FileEntryIterator0.current.getName());
      assertNull(explodedArchive_FileEntryIterator0.current.getParent());
      assertTrue(explodedArchive_FileEntryIterator0.current.exists());
      assertTrue(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertEquals("/", explodedArchive_FileEntryIterator0.current.toString());
      assertTrue(explodedArchive_FileEntryIterator0.current.canExecute());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      assertTrue(explodedArchive_FileEntryIterator0.current.canWrite());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.current.isAbsolute());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "Unable to open fallback handler";
      String string1 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile16();
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string0, string1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isFile());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertFalse(file1.isHidden());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      boolean boolean1 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, boolean1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive0.recursive, boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(boolean0 == boolean1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(file0, file1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive4();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      boolean boolean0 = explodedArchive0.getrecursive();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean0);
      
      String string0 = explodedArchive0.toString();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string0);
      assertEquals("file:/tmp/junit322166554403479484/spaces in the name", string0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("file:/tmp/junit322166554403479484/spaces in the name", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "exploded archW~ive";
      File file0 = MockFile.createTempFile(string0, string0);
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("exploded archW~ive0exploded archW~ive", file0.getName());
      assertEquals("/tmp/exploded archW~ive0exploded archW~ive", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/exploded archW~ive0exploded archW~ive
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive8();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getroot();
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(explodedArchive0.getrecursive());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      String string0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-125);
      byte byte1 = (byte)103;
      byteArray0[1] = byte1;
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      byteArray0[2] = byteArray0[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      assertTrue(boolean1 == boolean0);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean1);
      
      File file1 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile15();
      assertFalse(file1.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertFalse(file1.exists());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("target/exploded-war/WEB-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canRead());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("classes", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file1.toString());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest0);
      
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(file0.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Deque<Iterator<File>> deque0 = explodedArchive_FileEntryIterator0.getstack();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(file0.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1, deque0.size());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(deque0);
      assertNotSame(file0, file1);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest1);
      assertSame(manifest1, manifest0);
      
      File file2 = explodedArchive_FileEntryIterator0.getcurrent();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file2.canRead());
      assertTrue(file2.canExecute());
      assertTrue(file2.canWrite());
      assertFalse(file2.isHidden());
      assertTrue(file2.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file2.toString());
      assertTrue(file2.isDirectory());
      assertEquals("META-INF", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file2.getParent());
      assertTrue(file2.exists());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file2);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNull(string1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("META-INF/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file0 = explodedArchive_FileEntryIterator0.poll();
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("/tmp", file0.toString());
      assertEquals("tmp", file0.getName());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      File file1 = explodedArchive_FileEntryIterator0.getcurrent();
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home", file1.getName());
      assertEquals("/", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home", file1.toString());
      assertTrue(file1.isDirectory());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile4();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file1 = explodedArchive_FileEntryIterator0.getroot();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(file1.canRead());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      assertSame(file0, file1);
      assertSame(file1, file0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "4&G>`zosL<@P]r9";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("4&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9/4&G>`zosL<@P]r9", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("4&G>`zosL<@P]r9", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("4&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9/4&G>`zosL<@P]r9", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.getrecursive();
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("4&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9/4&G>`zosL<@P]r9", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(boolean1);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/4&G>`zosL<@P]r9/4&G>`zosL<@P]r9
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator0.getentryComparator();
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(file0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(comparator0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.manifestFile, explodedArchive0.recursive);
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file0 = explodedArchive_FileEntryIterator0.getroot();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "\\g";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/\\g", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/\\g/\\g", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals("\\g", mockFile0.getName());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "";
      String string1 = "\">l4LB&fM*}]";
      String string2 = "";
      MockFile mockFile0 = new MockFile(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, string1, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile2();
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertEquals("src/test/resources/root/META-INF", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("src/test/resources/root/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive2();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive1.iterator();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile9();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.canRead());
      assertFalse(file1.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file1.toString());
      assertFalse(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("classes", file1.getName());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertFalse(file1.exists());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      File file2 = explodedArchive1.getManifestFile(file1);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(file1.canRead());
      assertFalse(file1.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file1.toString());
      assertFalse(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("classes", file1.getName());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertFalse(file1.exists());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file2.toString());
      assertEquals(0L, file2.lastModified());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file2.getParent());
      assertFalse(file2.exists());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.canRead());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.length());
      assertFalse(file2.canWrite());
      assertTrue(file2.isFile());
      assertFalse(file2.canExecute());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(file2);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(file1, file2);
      assertNotSame(file1, file0);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      String string0 = explodedArchive1.toString();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(string0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertEquals("file:/tmp/junit3853753617501372040/junit897402010941125298", string0);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(set0.contains(string0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      boolean boolean0 = explodedArchive1.getrecursive();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertTrue(boolean0);
      
      File file3 = serializedObjectSupporter0.deserializeObjectFile5();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.exists());
      assertFalse(file3.canRead());
      assertFalse(file3.canExecute());
      assertTrue(file3.isFile());
      assertFalse(file3.isHidden());
      assertEquals("spaces in the name", file3.getName());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name", file3.toString());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals("/tmp/junit322166554403479484", file3.getParent());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.isDirectory());
      assertNotNull(file3);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      
      Iterator<Archive.Entry> iterator1 = explodedArchive1.iterator();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(iterator1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(iterator1, iterator0);
      
      boolean boolean1 = explodedArchive1.getrecursive();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(boolean1 == boolean0);
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.manifestFile, explodedArchive0.recursive);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile5();
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals("/tmp/junit322166554403479484/spaces in the name", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("spaces in the name", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("/tmp/junit322166554403479484", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile4();
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file1, boolean0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntryIterator0.root, boolean0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator1.equals((Object)explodedArchive_FileEntryIterator0));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator1.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator1.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive_FileEntryIterator1.recursive);
      assertNotNull(explodedArchive_FileEntryIterator1);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Manifest manifest0 = serializedObjectSupporter0.deserializeObjectManifest1();
      assertNotNull(manifest0);
      
      String string0 = explodedArchive0.toString();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string0);
      assertEquals("file:/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", string0);
      
      File file2 = explodedArchive_FileEntryIterator0.getroot();
      assertFalse(file1.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(file2.equals((Object)file0));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.getTotalSpace());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file2.toString());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canWrite());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file2.getParent());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file2);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertSame(file2, file1);
      assertNotSame(file2, file0);
      
      Deque<Iterator<File>> deque0 = explodedArchive_FileEntryIterator1.getstack();
      assertFalse(file1.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(explodedArchive_FileEntryIterator1.equals((Object)explodedArchive_FileEntryIterator0));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator1.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator1.hasNext());
      assertEquals(0, deque0.size());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive_FileEntryIterator1.recursive);
      assertNotNull(deque0);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertNotSame(explodedArchive_FileEntryIterator1, explodedArchive_FileEntryIterator0);
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive0.root);
      assertFalse(file1.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      
      File file3 = explodedArchive0.getManifestFile(explodedArchive_FileEntryIterator0.current);
      assertFalse(file1.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(file3.isFile());
      assertTrue(file3.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/META-INF/MANIFEST.MF", file3.toString());
      assertEquals("MANIFEST.MF", file3.getName());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.canRead());
      assertFalse(file3.canWrite());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/META-INF", file3.getParent());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.exists());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file3);
      assertNotSame(file1, file3);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertNotSame(file3, file1);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
      
      String string1 = explodedArchive0.toString();
      assertTrue(string1.equals((Object)string0));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("file:/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", string1);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(file1.equals((Object)file3));
      assertFalse(file1.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertTrue(boolean1 == boolean0);
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(file1, file3);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertFalse(boolean1);
      
      File file4 = explodedArchive0.getroot();
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file2));
      assertEquals(0L, file4.getUsableSpace());
      assertTrue(file4.isFile());
      assertEquals(0L, file4.lastModified());
      assertFalse(file4.exists());
      assertTrue(file4.isAbsolute());
      assertEquals("classes", file4.getName());
      assertFalse(file4.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file4.getParent());
      assertEquals(0L, file4.getFreeSpace());
      assertFalse(file4.canRead());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.length());
      assertFalse(file4.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file4.toString());
      assertFalse(file4.canExecute());
      assertEquals(0L, file4.getTotalSpace());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file4);
      assertNotSame(file4, file0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file3);
      assertNotSame(file4, file2);
      
      File file5 = explodedArchive_FileEntryIterator1.getroot();
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file0));
      assertFalse(file5.equals((Object)file3));
      assertFalse(file1.equals((Object)file3));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)file4));
      assertTrue(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(explodedArchive_FileEntryIterator1.equals((Object)explodedArchive_FileEntryIterator0));
      assertEquals(0L, file5.getFreeSpace());
      assertEquals(0L, file5.length());
      assertFalse(file5.exists());
      assertFalse(file5.isDirectory());
      assertFalse(file5.canExecute());
      assertFalse(file5.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file5.getParent());
      assertEquals(0L, file5.getTotalSpace());
      assertEquals(0L, file5.lastModified());
      assertEquals("MANIFEST.MF", file5.getName());
      assertTrue(file5.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file5.toString());
      assertFalse(file5.canRead());
      assertTrue(file5.isAbsolute());
      assertEquals(0L, file5.getUsableSpace());
      assertFalse(file5.isHidden());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator1.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator1.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive_FileEntryIterator1.recursive);
      assertNotNull(file5);
      assertSame(file5, file1);
      assertNotSame(file5, file4);
      assertNotSame(file5, file0);
      assertSame(file5, file2);
      assertNotSame(file5, file3);
      assertNotSame(file1, file3);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertSame(file1, file5);
      assertNotSame(file1, file4);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertNotSame(explodedArchive_FileEntryIterator1, explodedArchive_FileEntryIterator0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive9();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string0 = "=qU";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.root);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("=qU", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile3();
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("junit897402010941125298", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      String string0 = "nT!.vm,\\^(zt";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertFalse(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("junit897402010941125298", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("nT!.vm,\\^(zt", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/nT!.vm,\\^(zt", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("junit897402010941125298", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("nT!.vm,\\^(zt", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/nT!.vm,\\^(zt", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(boolean1);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("junit897402010941125298", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("nT!.vm,\\^(zt", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("junit897402010941125298", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("nT!.vm,\\^(zt", explodedArchive_FileEntry0.getName());
      assertNotSame(file0, mockFile0);
      assertFalse(boolean2);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean1);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertFalse(explodedArchive_FileEntryIterator1.equals((Object)explodedArchive_FileEntryIterator0));
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals("junit897402010941125298", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/junit3853753617501372040", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("nT!.vm,\\^(zt", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/nT!.vm,\\^(zt", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator1.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator1.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive_FileEntryIterator1.recursive);
      assertNotNull(explodedArchive_FileEntryIterator1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertFalse(file0.isAbsolute());
      assertEquals("src/test/resources", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertFalse(file0.isAbsolute());
      assertEquals("src/test/resources", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator0.getentryComparator();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertFalse(file0.isAbsolute());
      assertEquals("src/test/resources", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(comparator0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive8();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      String string0 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive1.root);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      // Undeclared exception!
      try { 
        explodedArchive1.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive8();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getroot();
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(explodedArchive0.getrecursive());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      String string0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertFalse(boolean0);
      
      File file1 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile15();
      assertFalse(file1.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals("target/exploded-war/WEB-INF", file1.getParent());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file1.toString());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("classes", file1.getName());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertSame(explodedArchive_FileEntry0.serializedObjectSupporter, serializedObjectSupporter0);
      assertNotSame(file1, file0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest0);
      
      File file2 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file2.getParent());
      assertEquals(0L, file2.lastModified());
      assertTrue(file2.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file2.toString());
      assertFalse(file2.exists());
      assertFalse(file2.isHidden());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canExecute());
      assertFalse(file2.canRead());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.length());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      boolean boolean1 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file2));
      assertTrue(boolean1 == boolean0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Deque<Iterator<File>> deque0 = explodedArchive_FileEntryIterator0.getstack();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file2));
      assertTrue(boolean1 == boolean0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals(0, deque0.size());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(deque0);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest1);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "remove";
      String string1 = "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator";
      MockFile mockFile0 = new MockFile(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator/com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("remove", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(explodedArchive_FileEntry0);
      
      String string2 = explodedArchive_FileEntry0.getName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator/com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("remove", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("remove", string2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile10();
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile12();
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile13();
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars", file0.toString());
      assertFalse(file0.exists());
      assertEquals("nested-jars", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "&G>`zosL<@P]r9";
      String string1 = "faQ`5rjNJdqni;0S]";
      MockFile mockFile0 = new MockFile(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("&G>`zosL<@P]r9", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      File file0 = explodedArchive_FileEntry0.getFile();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("&G>`zosL<@P]r9", explodedArchive_FileEntry0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9", file0.toString());
      assertEquals("&G>`zosL<@P]r9", file0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(mockFile0, file0);
      assertSame(file0, mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file1 = explodedArchive_FileEntryIterator0.poll();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(mockFile0, file0);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.getrecursive();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("&G>`zosL<@P]r9", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(mockFile0, file0);
      assertTrue(boolean1);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/faQ`5rjNJdqni;0S]/&G>`zosL<@P]r9
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("root", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertNotNull(file0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("root", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("root", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.setcurrent(explodedArchive_FileEntry0.file);
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("root", file0.getName());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive14();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile15();
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canWrite());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      String string0 = "n>Q2jHAXRVV2@pQ}";
      String string1 = "Vch?BI";
      File file1 = MockFile.createTempFile(string0, string1, explodedArchive_FileEntryIterator0.current);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canWrite());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(file1.isDirectory());
      assertEquals("/tmp/n>Q2jHAXRVV2@pQ}0Vch?BI", file1.toString());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("n>Q2jHAXRVV2@pQ}0Vch?BI", file1.getName());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file1, file0);
      
      explodedArchive_FileEntryIterator0.setcurrent(file1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canWrite());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(file1.isDirectory());
      assertEquals("/tmp/n>Q2jHAXRVV2@pQ}0Vch?BI", file1.toString());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isFile());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canExecute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("n>Q2jHAXRVV2@pQ}0Vch?BI", file1.getName());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(file0, file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file1, file0);
      
      File file2 = serializedObjectSupporter0.deserializeObjectFile4();
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file2.getParent());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.lastModified());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertTrue(file2.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file2.toString());
      assertNotNull(file2);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, file2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file2.getParent());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.lastModified());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertTrue(file2.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file2.toString());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("Vch?BI", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      String string2 = explodedArchive_FileEntry0.getName();
      assertFalse(string1.equals((Object)string0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file2.getParent());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.lastModified());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertTrue(file2.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file2.toString());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("Vch?BI", explodedArchive_FileEntry0.getName());
      assertNotNull(string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("Vch?BI", string2);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF", file0.getParent());
      assertFalse(file0.canWrite());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertTrue(boolean1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      boolean boolean0 = explodedArchive0.getrecursive();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean0);
      
      boolean boolean1 = mockFile0.mkdir();
      assertFalse(boolean1 == boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertFalse(boolean1);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.manifestFile, boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      mockFile0.deleteOnExit();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      explodedArchive_FileEntryIterator0.current = explodedArchive0.root;
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.current.canExecute());
      assertTrue(explodedArchive_FileEntryIterator0.current.canRead());
      assertTrue(explodedArchive_FileEntryIterator0.current.exists());
      assertTrue(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertFalse(explodedArchive_FileEntryIterator0.current.isAbsolute());
      assertEquals("", explodedArchive_FileEntryIterator0.current.getName());
      assertNull(explodedArchive_FileEntryIterator0.current.getParent());
      assertEquals("", explodedArchive_FileEntryIterator0.current.toString());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertEquals(1392409281320L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      assertTrue(explodedArchive_FileEntryIterator0.current.canWrite());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertFalse(explodedArchive_FileEntryIterator0.current.isFile());
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator0.getentryComparator();
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(comparator0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator1);
      assertNotSame(iterator1, iterator0);
      
      boolean boolean2 = explodedArchive0.getrecursive();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean2);
      
      boolean boolean3 = explodedArchive_FileEntryIterator0.hasNext();
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(boolean3);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertFalse(explodedArchive_FileEntryIterator_EntryComparator0.equals((Object)comparator0));
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.naturalOrder();
      assertNotNull(comparator1);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest0);
      
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive_FileEntryIterator0.root, explodedArchive_FileEntryIterator0.current);
      assertFalse(explodedArchive_FileEntryIterator_EntryComparator0.equals((Object)comparator0));
      assertTrue(boolean0 == boolean3);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(explodedArchive_FileEntryIterator_EntryComparator0, comparator0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertEquals(21, int0);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest1);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(set0.contains(string0));
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator";
      String string1 = "org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile7();
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string1, string0, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      File file2 = explodedArchive_FileEntry0.getFile();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertTrue(file2.isFile());
      assertTrue(file2.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file2.toString());
      assertTrue(file2.canExecute());
      assertTrue(file2.canRead());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getTotalSpace());
      assertTrue(file2.exists());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file2.getName());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.isDirectory());
      assertTrue(file2.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file2.getParent());
      assertNotNull(file2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(file2, file0);
      assertSame(file2, file1);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive5();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive12();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.getrecursive());
      assertFalse(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = explodedArchive_FileEntryIterator_EntryComparator0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter1);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter1;
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      
      String string2 = explodedArchive2.toString();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(explodedArchive2.getrecursive());
      assertFalse(explodedArchive2.recursive);
      assertNotNull(string2);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("file:/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", string2);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.getrecursive());
      assertFalse(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive1.serializedObjectSupporter;
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      
      boolean boolean0 = explodedArchive0.getrecursive();
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(boolean0);
      
      String string3 = explodedArchive_FileEntry0.getName();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      assertNotNull(string3);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", string3);
      
      String string4 = explodedArchive1.toString();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotNull(string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertEquals("file:/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars", string4);
      
      boolean boolean1 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive1.root, boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive1.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Iterator<File> iterator1 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive1.manifestFile);
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive1.recursive);
      assertNotNull(iterator1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive1.recursive);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      explodedArchive_FileEntryIterator0.setcurrent(explodedArchive_FileEntry0.file);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("d", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file0.getParent());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d/org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter0org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file1.getParent());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive1.recursive);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertSame(file1, file2);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      boolean boolean2 = explodedArchive_FileEntryIterator0.getrecursive();
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive1.recursive);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertTrue(boolean2);
      
      Iterator<Archive.Entry> iterator2 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(iterator2.equals((Object)iterator0));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator2);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(iterator2, iterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile4();
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertNotNull(file0);
      
      boolean boolean0 = false;
      File file1 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("src/test/resources", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.isAbsolute());
      assertEquals("root", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("src/test/resources/root", file1.toString());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertFalse(file0.equals((Object)file1));
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(file0.equals((Object)file1));
      assertTrue(boolean1 == boolean0);
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(file0, file1);
      assertFalse(boolean1);
      
      explodedArchive_FileEntryIterator0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive2();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive1();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      String string0 = "P_2q,qTyl6SO5ahrhh~";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("src/test/resources", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.isAbsolute());
      assertEquals("root", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("src/test/resources/root", file1.toString());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("P_2q,qTyl6SO5ahrhh~", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(explodedArchive_FileEntry0);
      
      File file2 = explodedArchive0.getManifestFile(explodedArchive1.manifestFile);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive1.getrecursive());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.length());
      assertFalse(file2.canRead());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isHidden());
      assertTrue(file2.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/src/test/resources/root/META-INF/MANIFEST.MF/META-INF", file2.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/src/test/resources/root/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF", file2.toString());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.exists());
      assertEquals("MANIFEST.MF", file2.getName());
      assertTrue(file2.isFile());
      assertFalse(file2.canExecute());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive1.recursive);
      assertNotNull(file2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)file2));
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("src/test/resources", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.isAbsolute());
      assertEquals("root", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("src/test/resources/root", file1.toString());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("P_2q,qTyl6SO5ahrhh~", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(string1);
      assertNotSame(file1, file0);
      assertNotSame(file1, file2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("P_2q,qTyl6SO5ahrhh~", string1);
      
      File file3 = explodedArchive_FileEntryIterator0.getcurrent();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertTrue(boolean0 == boolean1);
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNull(file3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      
      String string2 = explodedArchive_FileEntry0.getName();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)file2));
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("src/test/resources", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.isAbsolute());
      assertEquals("root", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("src/test/resources/root", file1.toString());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("P_2q,qTyl6SO5ahrhh~", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(string2);
      assertNotSame(file1, file0);
      assertNotSame(file1, file2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("P_2q,qTyl6SO5ahrhh~", string2);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      explodedArchive0.serializedObjectSupporter = serializedObjectSupporter1;
      assertTrue(explodedArchive0.getrecursive());
      
      String string3 = explodedArchive1.toString();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotNull(string3);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/src/test/resources/root", string3);
      
      boolean boolean2 = explodedArchive1.getrecursive();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(boolean2);
      
      File file4 = explodedArchive1.getroot();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file1));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertEquals("src/test/resources", file4.getParent());
      assertFalse(file4.canRead());
      assertEquals("root", file4.getName());
      assertFalse(file4.canExecute());
      assertFalse(file4.isAbsolute());
      assertFalse(file4.canWrite());
      assertEquals(0L, file4.getFreeSpace());
      assertTrue(file4.isFile());
      assertEquals("src/test/resources/root", file4.toString());
      assertFalse(file4.isHidden());
      assertFalse(file4.exists());
      assertEquals(0L, file4.getUsableSpace());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.lastModified());
      assertEquals(0L, file4.length());
      assertEquals(0L, file4.getTotalSpace());
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotNull(file4);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(file4, file0);
      assertNotSame(file4, file2);
      assertNotSame(file4, file1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(explodedArchive0, explodedArchive1);
      
      File file5 = explodedArchive0.getroot();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(file5.exists());
      assertFalse(file5.isDirectory());
      assertEquals("/tmp/junit3853753617501372040", file5.getParent());
      assertEquals(0L, file5.length());
      assertFalse(file5.canExecute());
      assertEquals("junit897402010941125298", file5.getName());
      assertEquals(0L, file5.getTotalSpace());
      assertFalse(file5.canWrite());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298", file5.toString());
      assertTrue(file5.isAbsolute());
      assertTrue(file5.isFile());
      assertFalse(file5.canRead());
      assertEquals(0L, file5.lastModified());
      assertEquals(0L, file5.getUsableSpace());
      assertEquals(0L, file5.getFreeSpace());
      assertFalse(file5.isHidden());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file5);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertNotSame(file5, file4);
      assertNotSame(file5, file0);
      assertNotSame(explodedArchive0, explodedArchive1);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.recursive);
      assertNotNull(manifest0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "Unable to open fallback handler";
      String string1 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile16();
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string0, string1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, boolean0);
      assertFalse(file0.equals((Object)file1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0 (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive5();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile12();
      assertFalse(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile13();
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals("nested-jars", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/nested-jars", file1.toString());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file1.getParent());
      assertTrue(file1.isFile());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("d", file2.getName());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033", file2.getParent());
      assertEquals("/tmp/junit1069761328127692012/junit891059030562649033/d", file2.toString());
      assertFalse(file2.canWrite());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isDirectory());
      assertTrue(file2.isFile());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.canRead());
      assertFalse(file2.canExecute());
      assertFalse(file2.exists());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      String string0 = explodedArchive0.toString();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string0);
      assertEquals("file:/tmp/junit1069761328127692012/junit891059030562649033/d", string0);
      
      JarFile jarFile0 = null;
      try {
        jarFile0 = new JarFile(file1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "exploded archive";
      String string1 = "META-INF";
      File file0 = MockFile.createTempFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("exploded archive0META-INF", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/exploded archive0META-INF", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertNotNull(file0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/exploded archive0META-INF
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("root", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertTrue(file1.isFile());
      assertFalse(file1.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isAbsolute());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive explodedArchive3 = serializedObjectSupporter0.deserializeObjectExplodedArchive6();
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive3.forEach(consumer0);
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      
      explodedArchive3.manifest = explodedArchive0.manifest;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive3.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      explodedArchive1.manifestFile = explodedArchive0.manifestFile;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.manifestFile.isAbsolute());
      assertEquals(0L, explodedArchive1.manifestFile.getUsableSpace());
      assertEquals(0L, explodedArchive1.manifestFile.lastModified());
      assertFalse(explodedArchive1.manifestFile.canExecute());
      assertEquals("MANIFEST.MF", explodedArchive1.manifestFile.getName());
      assertFalse(explodedArchive1.manifestFile.canWrite());
      assertEquals(0L, explodedArchive1.manifestFile.getFreeSpace());
      assertFalse(explodedArchive1.manifestFile.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", explodedArchive1.manifestFile.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", explodedArchive1.manifestFile.toString());
      assertFalse(explodedArchive1.manifestFile.isHidden());
      assertEquals(0L, explodedArchive1.manifestFile.length());
      assertEquals(0L, explodedArchive1.manifestFile.getTotalSpace());
      assertFalse(explodedArchive1.manifestFile.canRead());
      assertTrue(explodedArchive1.manifestFile.isFile());
      assertFalse(explodedArchive1.manifestFile.exists());
      
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertTrue(list1.equals((Object)list0));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(list1, list0);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertTrue(file2.isFile());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertTrue(file2.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertEquals("jars", file2.getName());
      assertFalse(file2.canRead());
      assertFalse(file2.exists());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canExecute());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.length());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      explodedArchive2.manifest = explodedArchive1.manifest;
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter2 = null;
      List<Archive> list2 = explodedArchive1.getNestedArchives(archive_EntryFilter2);
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(explodedArchive1.getrecursive());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(list2);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canRead());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertEquals("root", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive3();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1);
      assertNotNull(mockFile0);
      
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/META-INF", file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      boolean boolean0 = explodedArchive0.getrecursive();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("root", file0.getName());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("src/test/resources/root", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertEquals(0L, file1.length());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertEquals("MANIFEST.MF", file1.getName());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive explodedArchive3 = serializedObjectSupporter0.deserializeObjectExplodedArchive6();
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive3.forEach(consumer0);
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      
      explodedArchive3.manifest = explodedArchive0.manifest;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive3.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      explodedArchive1.manifestFile = explodedArchive0.manifestFile;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertEquals(0L, explodedArchive1.manifestFile.getFreeSpace());
      assertEquals(0L, explodedArchive1.manifestFile.getTotalSpace());
      assertEquals(0L, explodedArchive1.manifestFile.length());
      assertTrue(explodedArchive1.manifestFile.isAbsolute());
      assertTrue(explodedArchive1.manifestFile.isFile());
      assertFalse(explodedArchive1.manifestFile.exists());
      assertFalse(explodedArchive1.manifestFile.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", explodedArchive1.manifestFile.toString());
      assertFalse(explodedArchive1.manifestFile.canRead());
      assertEquals(0L, explodedArchive1.manifestFile.getUsableSpace());
      assertFalse(explodedArchive1.manifestFile.canWrite());
      assertFalse(explodedArchive1.manifestFile.canExecute());
      assertEquals(0L, explodedArchive1.manifestFile.lastModified());
      assertFalse(explodedArchive1.manifestFile.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", explodedArchive1.manifestFile.getParent());
      assertEquals("MANIFEST.MF", explodedArchive1.manifestFile.getName());
      
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertTrue(list1.equals((Object)list0));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(list1, list0);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.exists());
      assertEquals("jars", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canRead());
      assertFalse(file2.canExecute());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.length());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      String string0 = "OdhYn4";
      File file3 = MockFile.createTempFile(string0, string0, explodedArchive1.root);
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/OdhYn40OdhYn4", file3.toString());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.getFreeSpace());
      assertTrue(file3.canWrite());
      assertEquals("OdhYn40OdhYn4", file3.getName());
      assertFalse(file3.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes", file3.getParent());
      assertTrue(file3.canExecute());
      assertTrue(file3.canRead());
      assertTrue(file3.isAbsolute());
      assertTrue(file3.isFile());
      assertEquals(1392409281320L, file3.lastModified());
      assertEquals(0L, file3.length());
      assertTrue(file3.exists());
      assertEquals(0L, file3.getTotalSpace());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(file3);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      
      explodedArchive2.manifest = explodedArchive1.manifest;
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(set0.contains(string0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      
      Archive.EntryFilter archive_EntryFilter2 = null;
      // Undeclared exception!
      try { 
        explodedArchive1.getNestedArchives(archive_EntryFilter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive5();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Archive.Entry archive_Entry0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.setcurrent(mockFile0);
      assertTrue(boolean0 == boolean1);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertTrue(explodedArchive_FileEntryIterator0.current.exists());
      assertTrue(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertEquals("", explodedArchive_FileEntryIterator0.current.getName());
      assertNull(explodedArchive_FileEntryIterator0.current.getParent());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.current.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.current.canExecute());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.current.isFile());
      assertTrue(explodedArchive_FileEntryIterator0.current.canWrite());
      assertEquals(1392409281320L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      assertEquals("", explodedArchive_FileEntryIterator0.current.toString());
      assertFalse(explodedArchive_FileEntryIterator0.current.isAbsolute());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("root", file0.getName());
      assertFalse(file0.canWrite());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.exists());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertFalse(file1.canWrite());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(file1.canRead());
      assertEquals("MANIFEST.MF", file1.getName());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive explodedArchive3 = serializedObjectSupporter0.deserializeObjectExplodedArchive6();
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive3.forEach(consumer0);
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      
      explodedArchive3.manifest = explodedArchive0.manifest;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive3.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      explodedArchive1.manifestFile = explodedArchive0.manifestFile;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", explodedArchive1.manifestFile.getParent());
      assertEquals("MANIFEST.MF", explodedArchive1.manifestFile.getName());
      assertEquals(0L, explodedArchive1.manifestFile.length());
      assertFalse(explodedArchive1.manifestFile.canWrite());
      assertFalse(explodedArchive1.manifestFile.isHidden());
      assertEquals(0L, explodedArchive1.manifestFile.getTotalSpace());
      assertFalse(explodedArchive1.manifestFile.canRead());
      assertFalse(explodedArchive1.manifestFile.canExecute());
      assertEquals(0L, explodedArchive1.manifestFile.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", explodedArchive1.manifestFile.toString());
      assertFalse(explodedArchive1.manifestFile.exists());
      assertTrue(explodedArchive1.manifestFile.isAbsolute());
      assertFalse(explodedArchive1.manifestFile.isDirectory());
      assertTrue(explodedArchive1.manifestFile.isFile());
      assertEquals(0L, explodedArchive1.manifestFile.getFreeSpace());
      assertEquals(0L, explodedArchive1.manifestFile.getUsableSpace());
      
      File file2 = explodedArchive2.getManifestFile(explodedArchive1.root);
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive3));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF", file2.getParent());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file2.toString());
      assertFalse(file2.canWrite());
      assertTrue(file2.isFile());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canExecute());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertEquals("MANIFEST.MF", file2.getName());
      assertTrue(explodedArchive1.recursive);
      assertTrue(explodedArchive2.recursive);
      assertNotNull(file2);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive3);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      File file3 = explodedArchive0.getroot();
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file3.getParent());
      assertEquals("jars", file3.getName());
      assertFalse(file3.canWrite());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.isHidden());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file3.toString());
      assertFalse(file3.exists());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertTrue(file3.isFile());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file3);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      String string0 = "OdhYn4";
      File file4 = MockFile.createTempFile(string0, string0, explodedArchive1.root);
      assertFalse(file4.equals((Object)file3));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes", file4.getParent());
      assertTrue(file4.isAbsolute());
      assertEquals(1392409281320L, file4.lastModified());
      assertTrue(file4.canExecute());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals("OdhYn40OdhYn4", file4.getName());
      assertTrue(file4.isFile());
      assertTrue(file4.exists());
      assertTrue(file4.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/OdhYn40OdhYn4", file4.toString());
      assertFalse(file4.isHidden());
      assertEquals(0L, file4.getUsableSpace());
      assertTrue(file4.canWrite());
      assertEquals(0L, file4.length());
      assertEquals(0L, file4.getFreeSpace());
      assertFalse(file4.isDirectory());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(file4);
      assertNotSame(file4, file3);
      assertNotSame(file4, file1);
      assertNotSame(file4, file2);
      assertNotSame(file4, file0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      explodedArchive2.manifest = explodedArchive1.manifest;
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/exploded-war/WEB-INF/classes");
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(set0.contains(string0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      boolean boolean1 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive1.root, boolean1);
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive1.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file5 = explodedArchive_FileEntryIterator0.poll();
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive1.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNull(file5);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      
      Archive.EntryFilter archive_EntryFilter2 = null;
      Manifest manifest1 = explodedArchive2.getManifest();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive3));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNull(manifest1);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive3);
      
      // Undeclared exception!
      try { 
        explodedArchive1.getNestedArchives(archive_EntryFilter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("src/test/resources/root", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("root", file0.getName());
      assertFalse(file0.canWrite());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive0);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertFalse(file1.exists());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.canExecute());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive explodedArchive3 = serializedObjectSupporter0.deserializeObjectExplodedArchive6();
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive3.forEach(consumer0);
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      
      explodedArchive3.manifest = explodedArchive0.manifest;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive3.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      explodedArchive1.manifestFile = explodedArchive0.manifestFile;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.manifestFile.exists());
      assertTrue(explodedArchive1.manifestFile.isFile());
      assertEquals(0L, explodedArchive1.manifestFile.getFreeSpace());
      assertTrue(explodedArchive1.manifestFile.isAbsolute());
      assertFalse(explodedArchive1.manifestFile.canExecute());
      assertEquals(0L, explodedArchive1.manifestFile.lastModified());
      assertEquals(0L, explodedArchive1.manifestFile.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", explodedArchive1.manifestFile.toString());
      assertFalse(explodedArchive1.manifestFile.canRead());
      assertFalse(explodedArchive1.manifestFile.canWrite());
      assertEquals("MANIFEST.MF", explodedArchive1.manifestFile.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", explodedArchive1.manifestFile.getParent());
      assertFalse(explodedArchive1.manifestFile.isHidden());
      assertEquals(0L, explodedArchive1.manifestFile.length());
      assertFalse(explodedArchive1.manifestFile.isDirectory());
      assertEquals(0L, explodedArchive1.manifestFile.getUsableSpace());
      
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertTrue(list1.equals((Object)list0));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(list1, list0);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.exists());
      assertFalse(file2.canRead());
      assertTrue(file2.isFile());
      assertEquals(0L, file2.lastModified());
      assertFalse(file2.isHidden());
      assertEquals("jars", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertEquals(0L, file2.length());
      assertFalse(file2.canWrite());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      String string0 = "OdhYn4";
      File file3 = MockFile.createTempFile(string0, string0, explodedArchive1.root);
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/OdhYn40OdhYn4", file3.toString());
      assertTrue(file3.exists());
      assertTrue(file3.isFile());
      assertTrue(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(1392409281320L, file3.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes", file3.getParent());
      assertTrue(file3.canExecute());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.isHidden());
      assertTrue(file3.canWrite());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isDirectory());
      assertEquals("OdhYn40OdhYn4", file3.getName());
      assertTrue(file3.isAbsolute());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(file3);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive3);
      
      explodedArchive2.manifest = explodedArchive1.manifest;
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      try { 
        explodedArchive1.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Set<String> set0 = explodedArchive0.getSKIPPED_NAMES();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(set0);
      
      String string0 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.root);
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean1 = explodedArchive0.getrecursive();
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive3();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.setcurrent(mockFile0);
      assertFalse(boolean0 == boolean1);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.current.canExecute());
      assertFalse(explodedArchive_FileEntryIterator0.current.isFile());
      assertTrue(explodedArchive_FileEntryIterator0.current.canWrite());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertTrue(explodedArchive_FileEntryIterator0.current.exists());
      assertTrue(explodedArchive_FileEntryIterator0.current.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertNull(explodedArchive_FileEntryIterator0.current.getParent());
      assertEquals("", explodedArchive_FileEntryIterator0.current.getName());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertEquals(1392409281320L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertTrue(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      assertFalse(explodedArchive_FileEntryIterator0.current.isAbsolute());
      assertEquals("", explodedArchive_FileEntryIterator0.current.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
      assertFalse(boolean0 == boolean1);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals("root", file0.getName());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("src/test/resources/root", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isFile());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive2.forEach(consumer0);
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertTrue(list1.equals((Object)list0));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(list1, list0);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file2.toString());
      assertFalse(file2.isHidden());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canRead());
      assertFalse(file2.canWrite());
      assertEquals(0L, file2.length());
      assertFalse(file2.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file2.getParent());
      assertTrue(file2.isFile());
      assertFalse(file2.canExecute());
      assertEquals("jars", file2.getName());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      String string0 = "OdhYn4";
      File file3 = MockFile.createTempFile(string0, string0, explodedArchive1.root);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(file3.equals((Object)file2));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(file3.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes", file3.getParent());
      assertTrue(file3.isFile());
      assertTrue(file3.canRead());
      assertTrue(file3.canWrite());
      assertTrue(file3.exists());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals(1392409281320L, file3.lastModified());
      assertEquals(0L, file3.length());
      assertTrue(file3.canExecute());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.isDirectory());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/OdhYn40OdhYn4", file3.toString());
      assertEquals("OdhYn40OdhYn4", file3.getName());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(file3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(set0.contains(string0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      boolean boolean1 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.root, boolean1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("META-INF/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("root", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isAbsolute());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive explodedArchive3 = serializedObjectSupporter0.deserializeObjectExplodedArchive6();
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive3.forEach(consumer0);
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      assertNotSame(explodedArchive3, explodedArchive1);
      
      explodedArchive3.manifest = explodedArchive0.manifest;
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive3.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      explodedArchive1.manifestFile = explodedArchive0.manifestFile;
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(explodedArchive1.manifestFile.isAbsolute());
      assertEquals(0L, explodedArchive1.manifestFile.lastModified());
      assertFalse(explodedArchive1.manifestFile.canExecute());
      assertFalse(explodedArchive1.manifestFile.exists());
      assertTrue(explodedArchive1.manifestFile.isFile());
      assertFalse(explodedArchive1.manifestFile.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", explodedArchive1.manifestFile.getParent());
      assertEquals("MANIFEST.MF", explodedArchive1.manifestFile.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", explodedArchive1.manifestFile.toString());
      assertFalse(explodedArchive1.manifestFile.isDirectory());
      assertEquals(0L, explodedArchive1.manifestFile.getUsableSpace());
      assertFalse(explodedArchive1.manifestFile.isHidden());
      assertEquals(0L, explodedArchive1.manifestFile.getFreeSpace());
      assertEquals(0L, explodedArchive1.manifestFile.length());
      assertFalse(explodedArchive1.manifestFile.canRead());
      assertEquals(0L, explodedArchive1.manifestFile.getTotalSpace());
      
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertTrue(list1.equals((Object)list0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(list1, list0);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(file2.exists());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.length());
      assertTrue(file2.isFile());
      assertEquals("target/exploded-war/WEB-INF", file2.getParent());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canRead());
      assertFalse(file2.canExecute());
      assertFalse(file2.canWrite());
      assertFalse(file2.isAbsolute());
      assertEquals(0L, file2.lastModified());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals("target/exploded-war/WEB-INF/classes", file2.toString());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("classes", file2.getName());
      assertFalse(file2.isHidden());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      explodedArchive2.manifest = explodedArchive1.manifest;
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter2 = null;
      List<Archive> list2 = explodedArchive1.getNestedArchives(archive_EntryFilter2);
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(list2);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file2));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals("root", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "Unable to open fallback handler";
      String string1 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile16();
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string0, string1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, boolean0);
      assertFalse(file0.equals((Object)file1));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isFile());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.canExecute());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0 (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.setcurrent(mockFile0);
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("", explodedArchive_FileEntryIterator0.current.getName());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertNull(explodedArchive_FileEntryIterator0.current.getParent());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      assertTrue(explodedArchive_FileEntryIterator0.current.exists());
      assertTrue(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertEquals(1392409281320L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.current.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.current.isAbsolute());
      assertTrue(explodedArchive_FileEntryIterator0.current.canWrite());
      assertEquals("", explodedArchive_FileEntryIterator0.current.toString());
      assertTrue(explodedArchive_FileEntryIterator0.current.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.current.canExecute());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      assertFalse(boolean0 == boolean1);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(iterator0);
      
      long long0 = (-367L);
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "Unable to open fallback handler";
      String string1 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile16();
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string0, string1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.exists());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertEquals(0L, file1.getUsableSpace());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, boolean0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertFalse(file0.equals((Object)file1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertNotSame(file0, file1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/", string2);
      
      boolean boolean1 = false;
      boolean boolean2 = explodedArchive0.getrecursive();
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotSame(file0, file1);
      assertTrue(boolean2);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file1));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(file2.equals((Object)file1));
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertFalse(file0.isAbsolute());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("MANIFEST.MF", file2.getName());
      assertTrue(file2.canWrite());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file2.getParent());
      assertTrue(file2.canRead());
      assertTrue(file2.canExecute());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertFalse(file2.isFile());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertTrue(file2.exists());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file2.toString());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertSame(file0, file2);
      assertNotSame(file0, file1);
      assertSame(file2, file0);
      assertNotSame(file2, file1);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "Unable to open fallback handler";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      String string1 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile16();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string0, string1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertFalse(file1.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertFalse(file1.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, boolean1);
      assertFalse(file0.equals((Object)file1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertFalse(file1.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      MockFile mockFile0 = (MockFile)explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isDirectory());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertFalse(file1.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0/META-INF", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0/META-INF/MANIFEST.MF", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("MANIFEST.MF", mockFile0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      
      String string2 = explodedArchive0.toString();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/", string2);
      
      boolean boolean2 = false;
      boolean boolean3 = explodedArchive0.getrecursive();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotSame(file0, file1);
      assertNotSame(file0, mockFile0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertTrue(boolean3);
      
      MockFile mockFile1 = (MockFile)explodedArchive0.getroot();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean3);
      assertFalse(boolean1 == boolean2);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canWrite());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isFile());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(mockFile1.isFile());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", mockFile1.toString());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", mockFile1.getParent());
      assertTrue(mockFile1.canWrite());
      assertEquals("MANIFEST.MF", mockFile1.getName());
      assertTrue(mockFile1.isDirectory());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(mockFile1);
      assertNotSame(file0, file1);
      assertSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockFile1, file0);
      assertNotSame(mockFile1, file1);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive10();
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile1();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("src/test/resources/root", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertEquals("root", file0.getName());
      assertEquals("src/test/resources", file0.getParent());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF");
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      ExplodedArchive explodedArchive1 = serializedObjectSupporter0.deserializeObjectExplodedArchive16();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive explodedArchive2 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      Spliterator<Archive.Entry> spliterator0 = explodedArchive2.spliterator();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNotNull(spliterator0);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile10();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file1.getParent());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file1.toString());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      ExplodedArchive explodedArchive3 = serializedObjectSupporter0.deserializeObjectExplodedArchive6();
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive3.forEach(consumer0);
      assertFalse(explodedArchive3.equals((Object)explodedArchive1));
      assertFalse(explodedArchive3.equals((Object)explodedArchive0));
      assertFalse(explodedArchive3.equals((Object)explodedArchive2));
      assertTrue(explodedArchive3.getrecursive());
      assertTrue(explodedArchive3.recursive);
      assertNotSame(explodedArchive3, explodedArchive1);
      assertNotSame(explodedArchive3, explodedArchive0);
      assertNotSame(explodedArchive3, explodedArchive2);
      
      explodedArchive3.manifest = explodedArchive0.manifest;
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive3.getrecursive());
      
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      explodedArchive1.manifestFile = explodedArchive0.manifestFile;
      assertEquals(0L, explodedArchive1.manifestFile.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF/MANIFEST.MF", explodedArchive1.manifestFile.toString());
      assertTrue(explodedArchive1.manifestFile.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars/META-INF", explodedArchive1.manifestFile.getParent());
      assertFalse(explodedArchive1.manifestFile.isDirectory());
      assertFalse(explodedArchive1.manifestFile.canWrite());
      assertEquals(0L, explodedArchive1.manifestFile.getFreeSpace());
      assertEquals(0L, explodedArchive1.manifestFile.length());
      assertFalse(explodedArchive1.manifestFile.canRead());
      assertEquals(0L, explodedArchive1.manifestFile.getUsableSpace());
      assertEquals(0L, explodedArchive1.manifestFile.lastModified());
      assertFalse(explodedArchive1.manifestFile.canExecute());
      assertEquals("MANIFEST.MF", explodedArchive1.manifestFile.getName());
      assertFalse(explodedArchive1.manifestFile.exists());
      assertTrue(explodedArchive1.manifestFile.isFile());
      assertFalse(explodedArchive1.manifestFile.isHidden());
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      
      File file2 = explodedArchive2.getManifestFile(explodedArchive1.root);
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive3));
      assertTrue(file2.isFile());
      assertTrue(file2.canRead());
      assertTrue(file2.canWrite());
      assertTrue(file2.canExecute());
      assertEquals(0L, file2.getUsableSpace());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isHidden());
      assertEquals("MANIFEST.MF", file2.getName());
      assertEquals(0L, file2.getFreeSpace());
      assertFalse(file2.isDirectory());
      assertTrue(file2.exists());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF", file2.getParent());
      assertEquals(73L, file2.length());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file2.toString());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertTrue(explodedArchive2.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive3);
      
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertTrue(list1.equals((Object)list0));
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(list1, list0);
      
      File file3 = explodedArchive0.getroot();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(0L, file3.getUsableSpace());
      assertFalse(file3.isHidden());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources", file3.getParent());
      assertFalse(file3.exists());
      assertFalse(file3.canExecute());
      assertFalse(file3.canRead());
      assertEquals("jars", file3.getName());
      assertEquals(0L, file3.getTotalSpace());
      assertFalse(file3.isDirectory());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.canWrite());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertEquals(0L, file3.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/src/test/resources/jars", file3.toString());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file3);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      
      String string1 = "OdhYn4";
      File file4 = MockFile.createTempFile(string1, string1, explodedArchive1.root);
      assertFalse(string1.equals((Object)string0));
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(file4.exists());
      assertFalse(file4.isDirectory());
      assertEquals(0L, file4.getFreeSpace());
      assertEquals("OdhYn40OdhYn4", file4.getName());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals(1392409281320L, file4.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes", file4.getParent());
      assertTrue(file4.canExecute());
      assertEquals(0L, file4.length());
      assertTrue(file4.canWrite());
      assertFalse(file4.isHidden());
      assertEquals(0L, file4.getUsableSpace());
      assertTrue(file4.isFile());
      assertTrue(file4.canRead());
      assertTrue(file4.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/OdhYn40OdhYn4", file4.toString());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(file4);
      assertNotSame(string1, string0);
      assertNotSame(file4, file1);
      assertNotSame(file4, file2);
      assertNotSame(file4, file0);
      assertNotSame(file4, file3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      explodedArchive2.manifest = explodedArchive1.manifest;
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive2.getrecursive());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(explodedArchive0.equals((Object)explodedArchive2));
      assertFalse(explodedArchive0.equals((Object)explodedArchive3));
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive0, explodedArchive2);
      assertNotSame(explodedArchive0, explodedArchive3);
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("target/exploded-war/WEB-INF/classes");
      byte[] byteArray0 = null;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      assertFalse(evoSuiteFile1.equals((Object)evoSuiteFile0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(evoSuiteFile1, evoSuiteFile0);
      assertFalse(boolean1);
      
      Manifest manifest0 = explodedArchive1.getManifest();
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive1.recursive);
      assertNull(manifest0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      Set<String> set0 = explodedArchive1.getSKIPPED_NAMES();
      assertFalse(set0.contains(string0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(explodedArchive1.getrecursive());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(explodedArchive1.recursive);
      assertNotNull(set0);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive2);
      
      boolean boolean2 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive1.root, boolean2);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive1.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file5 = explodedArchive_FileEntryIterator0.poll();
      assertTrue(file5.equals((Object)file4));
      assertFalse(file5.equals((Object)file0));
      assertFalse(file5.equals((Object)file2));
      assertFalse(file5.equals((Object)file1));
      assertFalse(file5.equals((Object)file3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertFalse(explodedArchive1.equals((Object)explodedArchive3));
      assertFalse(explodedArchive1.equals((Object)explodedArchive2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertEquals(1392409281320L, file5.lastModified());
      assertTrue(file5.exists());
      assertEquals("OdhYn40OdhYn4", file5.getName());
      assertEquals(0L, file5.getTotalSpace());
      assertTrue(file5.canExecute());
      assertTrue(file5.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes", file5.getParent());
      assertTrue(file5.canWrite());
      assertEquals(0L, file5.getFreeSpace());
      assertEquals(0L, file5.length());
      assertFalse(file5.isDirectory());
      assertEquals(0L, file5.getUsableSpace());
      assertFalse(file5.isHidden());
      assertTrue(file5.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/OdhYn40OdhYn4", file5.toString());
      assertTrue(file5.canRead());
      assertTrue(explodedArchive1.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive1.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file5);
      assertNotSame(file5, file0);
      assertNotSame(file5, file2);
      assertNotSame(file5, file1);
      assertNotSame(file5, file4);
      assertNotSame(file5, file3);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertNotSame(explodedArchive1, explodedArchive3);
      assertNotSame(explodedArchive1, explodedArchive2);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      
      Archive.EntryFilter archive_EntryFilter2 = null;
      Manifest manifest1 = explodedArchive2.getManifest();
      assertFalse(explodedArchive2.equals((Object)explodedArchive0));
      assertFalse(explodedArchive2.equals((Object)explodedArchive1));
      assertFalse(explodedArchive2.equals((Object)explodedArchive3));
      assertTrue(explodedArchive2.getrecursive());
      assertTrue(explodedArchive2.recursive);
      assertNull(manifest1);
      assertNotSame(explodedArchive2, explodedArchive0);
      assertNotSame(explodedArchive2, explodedArchive1);
      assertNotSame(explodedArchive2, explodedArchive3);
      
      // Undeclared exception!
      try { 
        explodedArchive1.getNestedArchives(archive_EntryFilter2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive8();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getroot();
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      String string0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("classes", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-125);
      byteArray0[0] = byte0;
      byte byte1 = (byte)103;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)103, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      assertTrue(boolean1 == boolean0);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean1);
      
      File file1 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile15();
      assertFalse(file1.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertFalse(file1.exists());
      assertEquals("classes", file1.getName());
      assertFalse(file1.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("target/exploded-war/WEB-INF", file1.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      assertNotSame(file1, file0);
      assertNotSame(file0, file1);
      
      File file2 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(3L, file2.length());
      assertFalse(file2.isDirectory());
      assertTrue(file2.canWrite());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file2.getParent());
      assertEquals("MANIFEST.MF", file2.getName());
      assertTrue(file2.canExecute());
      assertTrue(file2.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file2.toString());
      assertTrue(file2.canRead());
      assertTrue(file2.exists());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest0);
      
      File file3 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file3.equals((Object)file1));
      assertTrue(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file3.getTotalSpace());
      assertTrue(file3.canExecute());
      assertEquals("MANIFEST.MF", file3.getName());
      assertEquals(1392409281320L, file3.lastModified());
      assertTrue(file3.exists());
      assertTrue(file3.canRead());
      assertTrue(file3.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file3.toString());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals(3L, file3.length());
      assertFalse(file3.isDirectory());
      assertFalse(file3.isHidden());
      assertTrue(file3.isAbsolute());
      assertEquals(0L, file3.getFreeSpace());
      assertTrue(file3.canWrite());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file3);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      assertNotSame(file3, file1);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean2);
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Deque<Iterator<File>> deque0 = explodedArchive_FileEntryIterator0.getstack();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertEquals(1, deque0.size());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(deque0);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file3);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest1);
      assertSame(manifest1, manifest0);
      
      File file4 = explodedArchive_FileEntryIterator0.getcurrent();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(file4.equals((Object)file1));
      assertFalse(file4.equals((Object)file0));
      assertFalse(file4.equals((Object)file2));
      assertFalse(file4.equals((Object)file3));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(file4.isFile());
      assertTrue(file4.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file4.toString());
      assertEquals(0L, file4.length());
      assertTrue(file4.exists());
      assertTrue(file4.canRead());
      assertTrue(file4.canExecute());
      assertEquals(1392409281320L, file4.lastModified());
      assertEquals(0L, file4.getTotalSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file4.getParent());
      assertEquals(0L, file4.getFreeSpace());
      assertTrue(file4.canWrite());
      assertEquals("META-INF", file4.getName());
      assertEquals(0L, file4.getUsableSpace());
      assertTrue(file4.isDirectory());
      assertFalse(file4.isHidden());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file4);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file3);
      assertNotSame(file4, file1);
      assertNotSame(file4, file0);
      assertNotSame(file4, file2);
      assertNotSame(file4, file3);
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNull(string1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file3);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertFalse(file0.equals((Object)file2));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file4));
      assertFalse(file0.equals((Object)file3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertEquals("classes", file0.getName());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("META-INF/", archive_Entry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file4);
      assertNotSame(file0, file3);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      
      URL uRL1 = explodedArchive0.getUrl();
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(explodedArchive0.getrecursive());
      assertNull(uRL1.getQuery());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertEquals("", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive8();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getroot();
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(explodedArchive0.getrecursive());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      String string0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("classes", file0.getName());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-125);
      byteArray0[0] = byte0;
      byte byte1 = (byte)103;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)103, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("classes", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("classes", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("classes", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean2);
      
      File file1 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile15();
      assertFalse(file1.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("classes", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertFalse(file1.canWrite());
      assertFalse(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertTrue(file1.isFile());
      assertEquals("target/exploded-war/WEB-INF", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.exists());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("classes", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes", file1.toString());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      File file2 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isFile());
      assertEquals("classes", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file2.getParent());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file2.toString());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isDirectory());
      assertTrue(file2.canWrite());
      assertTrue(file2.canExecute());
      assertEquals(3L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.exists());
      assertTrue(file2.isAbsolute());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getTotalSpace());
      assertTrue(file2.canRead());
      assertTrue(file2.isFile());
      assertEquals("MANIFEST.MF", file2.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file0, file2);
      assertNotSame(file0, file1);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "Unable to open fallback handler";
      String string1 = "";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile16();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertNotNull(file0);
      
      File file1 = MockFile.createTempFile(string0, string1, file0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertNotNull(file1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      
      file0.deleteOnExit();
      assertFalse(file0.equals((Object)file1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertNotSame(file0, file1);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean1 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(file0, boolean1);
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(explodedArchive0.getrecursive());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(list0);
      assertNotSame(file0, file1);
      
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(explodedArchive1.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(explodedArchive1, explodedArchive0);
      
      MockFile mockFile0 = (MockFile)explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0", file1.toString());
      assertTrue(file1.isDirectory());
      assertFalse(file1.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file1.getParent());
      assertFalse(file1.isFile());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("Unable to open fallback handler0", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("Unable to open fallback handler", explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.getrecursive());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0/META-INF/MANIFEST.MF", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("MANIFEST.MF", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/Unable to open fallback handler0/META-INF", mockFile0.getParent());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      
      String string2 = explodedArchive0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertEquals("file:/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_1/target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF/", string2);
      
      boolean boolean3 = false;
      boolean boolean4 = explodedArchive0.getrecursive();
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertFalse(boolean4);
      
      MockFile mockFile1 = (MockFile)explodedArchive0.getroot();
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)file1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1 == boolean4);
      assertFalse(explodedArchive0.equals((Object)explodedArchive1));
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canRead());
      assertEquals("MANIFEST.MF", mockFile1.getName());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.isAbsolute());
      assertTrue(mockFile1.isDirectory());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertFalse(mockFile1.isFile());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", mockFile1.getParent());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", mockFile1.toString());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF", file0.getParent());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isAbsolute());
      assertEquals("target/exploded-war/WEB-INF/classes/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isFile());
      assertFalse(explodedArchive0.getrecursive());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file1);
      assertSame(mockFile1, file0);
      assertNotSame(file0, mockFile0);
      assertSame(file0, mockFile1);
      assertNotSame(file0, file1);
      assertNotSame(explodedArchive0, explodedArchive1);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive8();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getroot();
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
      
      String string0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file0.exists());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-125);
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      byte byte1 = (byte) (-1);
      byteArray0[2] = byte1;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      explodedArchive_FileEntry0.serializedObjectSupporter = explodedArchive0.serializedObjectSupporter;
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      
      explodedArchive_FileEntry0.serializedObjectSupporter = serializedObjectSupporter0;
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertTrue(boolean2);
      
      File file1 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile15();
      assertFalse(file1.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertFalse(file1.isDirectory());
      assertEquals("target/exploded-war/WEB-INF/classes", file1.toString());
      assertFalse(file1.canRead());
      assertEquals("classes", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertTrue(file1.isFile());
      assertEquals("target/exploded-war/WEB-INF", file1.getParent());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isAbsolute());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      assertNotSame(file1, file0);
      assertNotSame(file0, file1);
      
      File file2 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file0.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("MANIFEST.MF", file2.getName());
      assertTrue(file2.canWrite());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertTrue(file2.canExecute());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF", file2.getParent());
      assertTrue(file2.isDirectory());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.isFile());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes/META-INF/MANIFEST.MF", file2.toString());
      assertTrue(file2.exists());
      assertTrue(file2.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      
      File file3 = explodedArchive_FileEntry0.serializedObjectSupporter.deserializeObjectFile6();
      assertFalse(file0.equals((Object)file1));
      assertFalse(file0.equals((Object)file2));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file1));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals("classes", file0.getName());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file3.canExecute());
      assertEquals(0L, file3.length());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getFreeSpace());
      assertFalse(file3.canWrite());
      assertTrue(file3.isFile());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF/MANIFEST.MF", file3.toString());
      assertEquals(0L, file3.getTotalSpace());
      assertEquals("MANIFEST.MF", file3.getName());
      assertEquals(0L, file3.lastModified());
      assertFalse(file3.exists());
      assertFalse(file3.isDirectory());
      assertTrue(file3.isAbsolute());
      assertFalse(file3.isHidden());
      assertEquals("/tmp/junit322166554403479484/spaces in the name/META-INF", file3.getParent());
      assertEquals(0L, file3.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file3);
      assertNotSame(file0, file1);
      assertNotSame(file0, file2);
      assertNotSame(file0, file3);
      assertNotSame(file3, file2);
      assertNotSame(file3, file0);
      assertNotSame(file3, file1);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      File file0 = serializedObjectSupporter0.deserializeObjectFile5();
      assertEquals("spaces in the name", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/junit322166554403479484/spaces in the name", file0.toString());
      assertFalse(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/tmp/junit322166554403479484", file0.getParent());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertNotNull(file0);
      
      File file1 = serializedObjectSupporter0.deserializeObjectFile4();
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertNotNull(file1);
      assertNotSame(file1, file0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file1, boolean0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-49);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-69);
      byteArray0[1] = byte1;
      byte byte2 = (byte)64;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-59);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-93);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-9);
      byteArray0[5] = byte5;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-69), (byte)64, (byte) (-59), (byte) (-93), (byte) (-9)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntryIterator0.root, boolean0);
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator1.equals((Object)explodedArchive_FileEntryIterator0));
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator1.hasNext());
      assertFalse(explodedArchive_FileEntryIterator1.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator1.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator1);
      
      ExplodedArchive explodedArchive0 = serializedObjectSupporter0.deserializeObjectExplodedArchive15();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      boolean boolean2 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(evoSuiteFile1.equals((Object)evoSuiteFile0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(evoSuiteFile1, evoSuiteFile0);
      assertTrue(boolean2);
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive0.root);
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertTrue(explodedArchive0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      assertNotSame(file1, file0);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      
      String string0 = explodedArchive0.toString();
      assertTrue(explodedArchive0.getrecursive());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string0);
      assertEquals("file:/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", string0);
      
      boolean boolean3 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotSame(file1, file0);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertFalse(boolean3);
      
      File file2 = explodedArchive0.getroot();
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertTrue(explodedArchive0.getrecursive());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertTrue(file2.isFile());
      assertTrue(file2.canRead());
      assertTrue(file2.isAbsolute());
      assertTrue(file2.canWrite());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target/classes", file2.toString());
      assertEquals("classes", file2.getName());
      assertEquals("/home/CIN/jaam/projects/spring-boot/spring-boot-tools/spring-boot-loader/target", file2.getParent());
      assertEquals(1392409281320L, file2.lastModified());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.isDirectory());
      assertTrue(file2.exists());
      assertEquals(6L, file2.length());
      assertTrue(file2.canExecute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      
      File file3 = explodedArchive_FileEntryIterator1.getroot();
      assertFalse(file1.equals((Object)file2));
      assertFalse(file1.equals((Object)file0));
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator1.equals((Object)explodedArchive_FileEntryIterator0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)explodedArchive_FileEntryIterator1));
      assertFalse(file3.equals((Object)file0));
      assertFalse(file3.equals((Object)file2));
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file1.getParent());
      assertTrue(file1.isFile());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator1.hasNext());
      assertFalse(explodedArchive_FileEntryIterator1.getrecursive());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.getrecursive());
      assertEquals(0L, file3.getUsableSpace());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF/MANIFEST.MF", file3.toString());
      assertFalse(file3.isHidden());
      assertFalse(file3.exists());
      assertEquals("MANIFEST.MF", file3.getName());
      assertFalse(file3.canRead());
      assertEquals(0L, file3.getTotalSpace());
      assertTrue(file3.isFile());
      assertFalse(file3.canExecute());
      assertTrue(file3.isAbsolute());
      assertEquals(0L, file3.lastModified());
      assertEquals(0L, file3.getFreeSpace());
      assertEquals(0L, file3.length());
      assertFalse(file3.isDirectory());
      assertEquals("/tmp/junit3853753617501372040/junit897402010941125298/META-INF", file3.getParent());
      assertFalse(file3.canWrite());
      assertFalse(explodedArchive_FileEntryIterator1.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file3);
      assertNotSame(file1, file2);
      assertNotSame(file1, file0);
      assertSame(file1, file3);
      assertNotSame(explodedArchive_FileEntryIterator1, explodedArchive_FileEntryIterator0);
      assertNotSame(explodedArchive_FileEntryIterator0, explodedArchive_FileEntryIterator1);
      assertSame(file3, file1);
      assertNotSame(file3, file0);
      assertNotSame(file3, file2);
  }
}
