/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 21:40:32 GMT 2021
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToIntFunction;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      boolean boolean0 = false;
      explodedArchive0.recursive = boolean0;
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      File file0 = MockFile.createTempFile(((ExplodedArchive.FileEntry) archive_Entry0).name, string0, explodedArchive_FileEntryIterator0.root);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/home", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/0", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("0", file0.getName());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertNotSame(file0, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file0);
      
      boolean boolean1 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, explodedArchive_FileEntryIterator0.recursive, explodedArchive_FileEntryIterator0.recursive, boolean0, explodedArchive0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string1);
      
      File file1 = explodedArchive_FileEntryIterator0.poll();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("/tmp", file1.toString());
      assertEquals("tmp", file1.getName());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isHidden());
      assertFalse(file1.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertTrue(file1.exists());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertFalse(explodedArchive0.recursive);
      assertNull(manifest0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.achive.ExplodedArchiv$FileEntry";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder org.springframework.boot.loader.achive.ExplodedArchiv$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "\"nUi%";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\"nUi%", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"nUi%", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("\"nUi%", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNotNull(explodedArchive_FileEntry0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string0 = explodedArchive0.toString();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string0);
      assertEquals("exploded archive", string0);
      
      String string1 = "X<4nZreN=\"eid@_";
      File file0 = MockFile.createTempFile(string1, string1, explodedArchive0.root);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("X<4nZreN=\"eid@_0X<4nZreN=\"eid@_", file0.getName());
      assertEquals("/tmp/X<4nZreN=\"eid@_0X<4nZreN=\"eid@_", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
      
      File file1 = explodedArchive0.getManifestFile(file0);
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals("X<4nZreN=\"eid@_0X<4nZreN=\"eid@_", file0.getName());
      assertEquals("/tmp/X<4nZreN=\"eid@_0X<4nZreN=\"eid@_", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertEquals("/tmp/X<4nZreN=\"eid@_0X<4nZreN=\"eid@_/META-INF", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.isFile());
      assertFalse(file1.canExecute());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canWrite());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/tmp/X<4nZreN=\"eid@_0X<4nZreN=\"eid@_/META-INF/MANIFEST.MF", file1.toString());
      assertTrue(file1.isAbsolute());
      assertFalse(string1.equals((Object)string0));
      assertFalse(file1.equals((Object)file0));
      assertNotSame(string1, string0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file1);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.listFiles(explodedArchive0.root);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "5Ygte)OQTM_#iq_";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/5Ygte)OQTM_#iq_", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("5Ygte)OQTM_#iq_", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/5Ygte)OQTM_#iq_/5Ygte)OQTM_#iq_", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "EHo>(q7";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      String string1 = ".";
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile1);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/EHo>(q7", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("EHo>(q7", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/EHo>(q7", mockFile1.getParent());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/EHo>(q7/.", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals(".", mockFile1.getName());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/EHo>(q7/.", file0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/EHo>(q7/./EHo>(q70EHo>(q7", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("EHo>(q70EHo>(q7", file0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotNull(file0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/EHo>(q7", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("EHo>(q7", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(explodedArchive0.recursive);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/META-INF/MANIFEST.MF");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest0);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertSame(manifest1, manifest0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(manifest1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "71<@";
      File file0 = MockFile.createTempFile(string0, string0);
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/71<@071<@", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("71<@071<@", file0.getName());
      assertNotNull(file0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/71<@071<@
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = null;
      try {
        explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      String string1 = "remove";
      File file0 = MockFile.createTempFile(string0, string1);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry0remove", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/org.springframework.boot.loader.archive.ExplodedArchive$FileEntry0remove", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(file0);
      
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry0remove", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertEquals("/tmp/org.springframework.boot.loader.archive.ExplodedArchive$FileEntry0remove", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntryIterator0.root, string0);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string0 = "D_BB/m'cQLH3wpG";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      assertEquals("D_BB/m'cQLH3wpG", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.name = string0;
      assertEquals("D_BB/m'cQLH3wpG", explodedArchive_FileEntry0.getName());
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Archive.Entry archive_Entry0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "jVGAq*CqPVQsokN_";
      String string1 = null;
      String string2 = "";
      MockFile mockFile0 = new MockFile(string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", file0.toString());
      assertEquals("jVGAq*CqPVQsokN_0.tmp", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", string3);
      
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(mockFile0, file0);
      assertTrue(boolean1);
      
      MockFile mockFile1 = new MockFile(file0, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)file0));
      assertNotNull(mockFile1);
      
      MockFile mockFile2 = new MockFile(string3, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(mockFile2.equals((Object)file0));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertNotNull(mockFile2);
      
      boolean boolean2 = mockFile1.renameTo(mockFile2);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", file0.toString());
      assertEquals("jVGAq*CqPVQsokN_0.tmp", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("jVGAq*CqPVQsokN_", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp/jVGAq*CqPVQsokN_", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertEquals("evosuite_5", mockFile2.getName());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertEquals(0L, mockFile2.lastModified());
      assertFalse(mockFile2.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile2.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744", mockFile2.getParent());
      assertTrue(mockFile2.isAbsolute());
      assertFalse(mockFile2.isDirectory());
      assertFalse(mockFile2.isHidden());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertFalse(mockFile2.canWrite());
      assertEquals(0L, mockFile2.length());
      assertFalse(mockFile2.canRead());
      assertTrue(mockFile2.isFile());
      assertFalse(mockFile2.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile2.equals((Object)file0));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(file0, mockFile2);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile2, file0);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, mockFile1);
      assertFalse(boolean2);
      
      boolean boolean3 = false;
      boolean boolean4 = mockFile1.setWritable(boolean3, boolean3);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", file0.toString());
      assertEquals("jVGAq*CqPVQsokN_0.tmp", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("jVGAq*CqPVQsokN_", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp/jVGAq*CqPVQsokN_", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(file0, mockFile2);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, mockFile2);
      assertNotSame(mockFile1, file0);
      assertFalse(boolean4);
      
      boolean boolean5 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile1, boolean5);
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", file0.toString());
      assertEquals("jVGAq*CqPVQsokN_0.tmp", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("jVGAq*CqPVQsokN_", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp/jVGAq*CqPVQsokN_", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/jVGAq*CqPVQsokN_0.tmp", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertTrue(mockFile1.isFile());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertFalse(mockFile1.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile2));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockFile1.equals((Object)mockFile2));
      assertFalse(mockFile1.equals((Object)file0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile2, boolean4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "";
      String string1 = "{or[%,m.^eA7";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare((File) mockFile0, (File) mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals("{or[%,m.^eA7", mockFile0.getName());
      assertEquals("/{or[%,m.^eA7", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string0 = "MANIFEST.MF";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntryIterator0.root, string0);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(mockFile0);
      
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("MANIFEST.MF", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("MANIFEST.MF", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/MANIFEST.MF/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/MANIFEST.MF/META-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "META-INF";
      String string1 = "A!4/|-hk8bA.`=";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("|-hk8bA.`=", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/A!4/|-hk8bA.`=", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/A!4", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("|-hk8bA.`=", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/A!4/|-hk8bA.`=", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/A!4", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(boolean1);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "Invalid source folder ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = mockFile0.setReadable(boolean0, boolean0);
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = "";
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      String string2 = mockFile1.getAbsolutePath();
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", mockFile1.toString());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("Invalid source folder ", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", string2);
      
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare((File) mockFile1, (File) mockFile1);
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", mockFile1.toString());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("Invalid source folder ", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, int0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getManifestFile(mockFile1);
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", mockFile1.toString());
      assertFalse(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals("Invalid source folder ", mockFile1.getName());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canRead());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(file0.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder /META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder /META-INF", file0.getParent());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdir();
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "%";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder %
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      File file0 = explodedArchive_FileEntryIterator0.poll();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNull(file0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(iterator0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "5;qFF@7[ACl|T";
      File file0 = MockFile.createTempFile(string0, string0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/5;qFF@7[ACl|T05;qFF@7[ACl|T
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = ".b#jVB*ID";
      File file0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertEquals(".b#jVB*ID", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      File file1 = explodedArchive_FileEntry0.getFile();
      assertEquals(".b#jVB*ID", explodedArchive_FileEntry0.getName());
      assertNull(file1);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "<${{I{4(:8%{&4;";
      File file0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      assertEquals("<${{I{4(:8%{&4;", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      boolean boolean0 = explodedArchive_FileEntryIterator0.hasNext();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertFalse(boolean0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "%DbP";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive_FileEntryIterator0.current, (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "Kmv=1$y";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      String string2 = "";
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ExplodedArchive> comparator0 = Comparator.comparingInt((ToIntFunction<? super ExplodedArchive>) toIntFunction0);
      assertNotNull(comparator0);
      
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare((File) mockFile0, (File) mockFile1);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("Kmv=1$y", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Kmv=1$y", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("Kmv=1$y", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertFalse(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Kmv=1$y", mockFile1.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.canRead());
      assertFalse(mockFile1.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertFalse(mockFile1.canWrite());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Kmv=1$y
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.jar.JarURLConnection";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("org.springframework.boot.loader.jar.JarURLConnection", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("org.springframework.boot.loader.jar.JarURLConnection", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals("org.springframework.boot.loader.jar.JarURLConnection", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      String string2 = ",lF{lOA";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/,lF{lOA", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(",lF{lOA", mockFile0.getName());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(explodedArchive_FileEntry0);
      
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertEquals("/,lF{lOA", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(",lF{lOA", mockFile0.getName());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      String string0 = ".";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntryIterator0.root, string0);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(mockFile0);
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(".", mockFile0.toString());
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(".", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(iterator0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      String string0 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string0);
      
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "CN!l $uz;O";
      String string1 = "MANIFEST.MF";
      MockFile mockFile0 = new MockFile(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("MANIFEST.MF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/CN!l $uz;O", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/CN!l $uz;O/MANIFEST.MF", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("MANIFEST.MF", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/CN!l $uz;O", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/CN!l $uz;O/MANIFEST.MF", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      URI uRI0 = mockFile0.toURI();
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNotNull(uRI0);
      
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setReadable(boolean0, boolean1);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntryIterator0.root = explodedArchive0.root;
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.getFreeSpace());
      assertNull(explodedArchive_FileEntryIterator0.root.getParent());
      assertEquals("", explodedArchive_FileEntryIterator0.root.getName());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.getTotalSpace());
      assertTrue(explodedArchive_FileEntryIterator0.root.canExecute());
      assertEquals(1392409281320L, explodedArchive_FileEntryIterator0.root.lastModified());
      assertFalse(explodedArchive_FileEntryIterator0.root.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.root.exists());
      assertFalse(explodedArchive_FileEntryIterator0.root.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.root.isFile());
      assertTrue(explodedArchive_FileEntryIterator0.root.canWrite());
      assertEquals("", explodedArchive_FileEntryIterator0.root.toString());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.root.isAbsolute());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.length());
      assertTrue(explodedArchive_FileEntryIterator0.root.isDirectory());
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertFalse(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertEquals("", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertFalse(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertEquals("", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertTrue(file0.isAbsolute());
      assertEquals("MANIFEST.MF", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertFalse(file0.canRead());
      assertFalse(file0.exists());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      String string0 = "";
      explodedArchive_FileEntry0.name = string0;
      assertEquals("", explodedArchive_FileEntry0.getName());
      
      explodedArchive_FileEntry0.name = string0;
      assertEquals("", explodedArchive_FileEntry0.getName());
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      String string1 = "Ov$Z\\oVn";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntry0.name, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("/Ov$Z\\oVn", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Ov$Z\\oVn", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("/", explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertFalse(explodedArchive_FileEntry0.file.canRead());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertTrue(explodedArchive_FileEntry0.file.isFile());
      assertFalse(explodedArchive_FileEntry0.file.exists());
      assertEquals("Ov$Z\\oVn", explodedArchive_FileEntry0.file.getName());
      assertEquals("/Ov$Z\\oVn", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.file.isDirectory());
      assertFalse(explodedArchive_FileEntry0.file.canExecute());
      assertEquals(0L, explodedArchive_FileEntry0.file.lastModified());
      assertFalse(explodedArchive_FileEntry0.file.canWrite());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator0.entryComparator;
      assertNotNull(comparator0);
      
      String string2 = mockFile0.getAbsolutePath();
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("/Ov$Z\\oVn", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Ov$Z\\oVn", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals("/Ov$Z\\oVn", string2);
      
      explodedArchive_FileEntryIterator0.entryComparator = comparator0;
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      
      explodedArchive_FileEntryIterator0.current = explodedArchive_FileEntry0.file;
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.current.canWrite());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertEquals("/Ov$Z\\oVn", explodedArchive_FileEntryIterator0.current.toString());
      assertTrue(explodedArchive_FileEntryIterator0.current.isAbsolute());
      assertTrue(explodedArchive_FileEntryIterator0.current.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertEquals("Ov$Z\\oVn", explodedArchive_FileEntryIterator0.current.getName());
      assertFalse(explodedArchive_FileEntryIterator0.current.exists());
      assertFalse(explodedArchive_FileEntryIterator0.current.canExecute());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertFalse(explodedArchive_FileEntryIterator0.current.canRead());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertEquals("/", explodedArchive_FileEntryIterator0.current.getParent());
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive_FileEntry0.file);
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(iterator0);
      
      explodedArchive_FileEntryIterator0.root = (File) mockFile0;
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertEquals("/Ov$Z\\oVn", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Ov$Z\\oVn", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(explodedArchive_FileEntryIterator0.root.isFile());
      assertEquals("/", explodedArchive_FileEntryIterator0.root.getParent());
      assertEquals("Ov$Z\\oVn", explodedArchive_FileEntryIterator0.root.getName());
      assertFalse(explodedArchive_FileEntryIterator0.root.canExecute());
      assertTrue(explodedArchive_FileEntryIterator0.root.isAbsolute());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.lastModified());
      assertFalse(explodedArchive_FileEntryIterator0.root.canWrite());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.root.isDirectory());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.length());
      assertFalse(explodedArchive_FileEntryIterator0.root.isHidden());
      assertEquals(0L, explodedArchive_FileEntryIterator0.root.getTotalSpace());
      assertEquals("/Ov$Z\\oVn", explodedArchive_FileEntryIterator0.root.toString());
      assertFalse(explodedArchive_FileEntryIterator0.root.canRead());
      assertFalse(explodedArchive_FileEntryIterator0.root.exists());
      
      boolean boolean0 = explodedArchive_FileEntryIterator0.hasNext();
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.archive.ExplodedArchive";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.delete();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean1);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(boolean1 == boolean0);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(boolean1 == boolean0);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(iterator0);
      
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", explodedArchive_FileEntryIterator0.current.getName());
      assertFalse(explodedArchive_FileEntryIterator0.current.canRead());
      assertNull(explodedArchive_FileEntryIterator0.current.getParent());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getUsableSpace());
      assertFalse(explodedArchive_FileEntryIterator0.current.isHidden());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", explodedArchive_FileEntryIterator0.current.toString());
      assertTrue(explodedArchive_FileEntryIterator0.current.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.current.isDirectory());
      assertFalse(explodedArchive_FileEntryIterator0.current.exists());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.lastModified());
      assertFalse(explodedArchive_FileEntryIterator0.current.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.current.canExecute());
      assertFalse(explodedArchive_FileEntryIterator0.current.canWrite());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntryIterator0.current.length());
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("", archive_Entry0.getName());
      assertFalse(archive_Entry0.isDirectory());
      assertFalse(boolean1 == boolean0);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      File file0 = explodedArchive_FileEntryIterator0.poll();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(boolean1 == boolean0);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNull(file0);
      
      File file1 = explodedArchive_FileEntryIterator0.poll();
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("org.springframework.boot.loader.archive.ExplodedArchive", mockFile0.toString());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(boolean1 == boolean0);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNull(file1);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder org.springframework.boot.loader.archive.ExplodedArchive
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-22);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)111;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-95);
      byteArray0[3] = byte3;
      byte byte4 = (byte)2;
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-22), (byte)0, (byte)111, (byte) (-95), (byte)2}, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean1 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      assertFalse(file0.isHidden());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("", mockFile0.getName());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(file0, mockFile0);
      assertNotSame(mockFile0, file0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertFalse(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertEquals("", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF", file0.getParent());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotNull(string3);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", string3);
      
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF", file1.getParent());
      assertFalse(file1.exists());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      assertNotNull(comparator1);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertEquals("", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.getName());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string4, string3);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertFalse(file0.exists());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      explodedArchive_FileEntryIterator0.entryComparator = comparator0;
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertFalse(file1.canWrite());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/META-INF", file1.getParent());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("MANIFEST.MF", file1.getName());
      assertTrue(file1.isFile());
      assertFalse(file1.exists());
      assertEquals("/META-INF/MANIFEST.MF", file1.toString());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      assertNotNull(comparator1);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string4);
      
      File file2 = explodedArchive_FileEntryIterator0.poll();
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("/tmp", file2.toString());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("tmp", file2.getName());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.canWrite());
      assertTrue(file2.canRead());
      assertTrue(file2.canExecute());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/", file2.getParent());
      assertEquals(1392409281320L, file2.lastModified());
      assertFalse(file2.isFile());
      assertTrue(file2.exists());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)mockFile0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file2);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file2, file1);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file2);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      File file0 = null;
      String string0 = "\"U*`i%";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      String string1 = mockFile0.getCanonicalPath();
      assertEquals("\"U*`i%", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/\"U*`i%", string1);
      
      boolean boolean1 = mockFile0.mkdirs();
      assertEquals("\"U*`i%", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertTrue(boolean1);
      
      Path path0 = mockFile0.toPath();
      assertEquals("\"U*`i%", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(path0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertEquals("\"U*`i%", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      assertEquals("\"U*`i%", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = "MANIFEST.MF";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, mockFile0);
      assertEquals("\"U*`i%", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("MANIFEST.MF", explodedArchive_FileEntry0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(explodedArchive_FileEntry0);
      
      ExplodedArchive explodedArchive1 = (ExplodedArchive)explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      assertEquals("\"U*`i%", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("MANIFEST.MF", explodedArchive_FileEntry0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(explodedArchive1.equals((Object)explodedArchive0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(explodedArchive0, explodedArchive1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      explodedArchive_FileEntryIterator0.entryComparator = comparator0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertTrue(file1.isAbsolute());
      assertFalse(file1.canWrite());
      assertTrue(file1.isFile());
      assertFalse(file1.canRead());
      assertEquals(0L, file1.lastModified());
      assertEquals("/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.exists());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/META-INF/MANIFEST.MF", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      assertNotNull(comparator1);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, explodedArchive_FileEntryIterator0.recursive, boolean1, boolean2, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string4);
      
      File file2 = explodedArchive_FileEntryIterator0.poll();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.isFile());
      assertTrue(file2.canExecute());
      assertTrue(file2.canRead());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(file2.canWrite());
      assertEquals("/", file2.getParent());
      assertEquals(0L, file2.length());
      assertEquals("/tmp", file2.toString());
      assertEquals("tmp", file2.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertTrue(file2.exists());
      assertFalse(file2.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file2.equals((Object)mockFile0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file2);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Invalid source folder /META-INF/MANIFEST.MF");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      String string0 = "Invalid source folder ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setExecutable(boolean1);
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = mockFile0.setReadable(boolean1, boolean1);
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string1 = "";
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      String string2 = mockFile1.getAbsolutePath();
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("Invalid source folder ", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertFalse(string0.equals((Object)string1));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", string2);
      
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare((File) mockFile1, (File) mockFile1);
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("Invalid source folder ", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(mockFile1, mockFile0);
      assertEquals(0, int0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      File file0 = explodedArchive0.getManifestFile(mockFile1);
      assertEquals("Invalid source folder ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("Invalid source folder ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("Invalid source folder ", mockFile1.getName());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder ", mockFile1.toString());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5", mockFile1.getParent());
      assertTrue(mockFile1.exists());
      assertTrue(mockFile1.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder /META-INF", file0.getParent());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/Invalid source folder /META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.length());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.exists());
      assertTrue(file0.isFile());
      assertFalse(file0.canRead());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      explodedArchive_FileEntryIterator0.entryComparator = comparator0;
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      Iterator<Archive.Entry> iterator0 = new ExplodedArchive.FileEntryIterator();
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      MockFile mockFile1 = new MockFile(string2);
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(explodedArchive0.recursive);
      assertNotNull(mockFile1);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      assertNotNull(comparator1);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, explodedArchive_FileEntryIterator0.recursive, boolean1, boolean2, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest");
      boolean boolean3 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(boolean0 == boolean3);
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean2 == boolean3);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive0.toString();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string4);
      assertEquals("file:/", string4);
      
      File file1 = explodedArchive_FileEntryIterator0.poll();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("/tmp", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isFile());
      assertEquals("tmp", file1.getName());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertTrue(file1.canRead());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals("/", file1.getParent());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile1));
      assertFalse(file1.equals((Object)mockFile0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile1);
      assertNotSame(file1, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      
      URL uRL0 = explodedArchive0.getUrl();
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("", uRL0.getHost());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(uRL0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.canRead());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/META-INF/MANIFEST.MF", file1.toString());
      assertTrue(file1.isFile());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertFalse(file1.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      assertNotNull(comparator1);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntryIterator0.recursive, boolean0, boolean1, boolean1, explodedArchive0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string4);
      
      File file2 = explodedArchive_FileEntryIterator0.poll();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("/", file2.getParent());
      assertEquals("tmp", file2.getName());
      assertFalse(file2.isHidden());
      assertTrue(file2.exists());
      assertTrue(file2.canRead());
      assertFalse(file2.isFile());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals("/tmp", file2.toString());
      assertTrue(file2.canWrite());
      assertTrue(file2.canExecute());
      assertTrue(file2.isAbsolute());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)mockFile0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file2, file0);
      assertNotSame(file2, file1);
      assertNotSame(file2, mockFile0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file2);
      
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file0);
      assertNotSame(iterator1, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator1);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("exploded archive", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(file0.isFile());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canRead());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(file0, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      explodedArchive_FileEntryIterator0.entryComparator = comparator0;
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      MockFile mockFile1 = new MockFile(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(explodedArchive0.recursive);
      assertNotNull(mockFile1);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      assertNotNull(explodedArchive_FileEntryIterator_EntryComparator0);
      
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      assertNotNull(comparator0);
      
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      explodedArchive_FileEntryIterator0.entryComparator = comparator0;
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canRead());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canWrite());
      assertEquals("MANIFEST.MF", file0.getName());
      assertTrue(file0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(file0.equals((Object)mockFile1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(file0, mockFile1);
      assertNotSame(file0, mockFile0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      Comparator<Comparable<Object>> comparator1 = Comparator.reverseOrder();
      assertNotNull(comparator1);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntryIterator0.recursive, explodedArchive_FileEntryIterator0.recursive, boolean0, boolean1, explodedArchive0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(9, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      explodedArchive_FileEntry0.file = file0;
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals("/META-INF/MANIFEST.MF", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertEquals("/META-INF", explodedArchive_FileEntry0.file.getParent());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertFalse(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.file.canRead());
      assertFalse(explodedArchive_FileEntry0.file.canExecute());
      assertEquals(0L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("MANIFEST.MF", explodedArchive_FileEntry0.file.getName());
      assertTrue(explodedArchive_FileEntry0.file.isFile());
      assertFalse(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string4);
      
      File file1 = explodedArchive_FileEntryIterator0.poll();
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(file1.exists());
      assertEquals("/tmp", file1.toString());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(1392409281320L, file1.lastModified());
      assertFalse(file1.isFile());
      assertEquals("tmp", file1.getName());
      assertTrue(file1.canWrite());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.length());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, explodedArchive_FileEntryIterator0.recursive, boolean2, explodedArchive0.recursive);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.isHidden());
      assertEquals("MANIFEST.MF", file1.getName());
      assertFalse(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.canRead());
      assertEquals("/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.exists());
      assertEquals("/META-INF", file1.getParent());
      assertFalse(file1.canExecute());
      assertTrue(file1.isFile());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      assertNotNull(comparator0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, explodedArchive_FileEntryIterator0.recursive, boolean1, boolean0, boolean2).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(boolean2 == boolean0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string4);
      
      File file2 = explodedArchive_FileEntryIterator0.poll();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(file2.isFile());
      assertTrue(file2.isAbsolute());
      assertTrue(file2.canExecute());
      assertEquals(1392409281320L, file2.lastModified());
      assertTrue(file2.isDirectory());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals("/tmp", file2.toString());
      assertTrue(file2.canWrite());
      assertEquals("/", file2.getParent());
      assertEquals(0L, file2.getUsableSpace());
      assertEquals("tmp", file2.getName());
      assertFalse(file2.isHidden());
      assertTrue(file2.exists());
      assertTrue(file2.canRead());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)mockFile0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file2, file1);
      assertNotSame(file2, file0);
      assertNotSame(file2, mockFile0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file2);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file1));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertTrue(explodedArchive0.recursive);
      assertNull(manifest0);
      
      explodedArchive0.manifestFile = ((ExplodedArchive.FileEntry) archive_Entry0).file;
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive0.manifestFile.isFile());
      assertTrue(explodedArchive0.manifestFile.canWrite());
      assertEquals("/", explodedArchive0.manifestFile.getParent());
      assertEquals(0L, explodedArchive0.manifestFile.getUsableSpace());
      assertTrue(explodedArchive0.manifestFile.canRead());
      assertTrue(explodedArchive0.manifestFile.isAbsolute());
      assertTrue(explodedArchive0.manifestFile.canExecute());
      assertTrue(explodedArchive0.manifestFile.isDirectory());
      assertEquals("home", explodedArchive0.manifestFile.getName());
      assertEquals(0L, explodedArchive0.manifestFile.getTotalSpace());
      assertEquals(0L, explodedArchive0.manifestFile.getFreeSpace());
      assertEquals(0L, explodedArchive0.manifestFile.length());
      assertEquals("/home", explodedArchive0.manifestFile.toString());
      assertFalse(explodedArchive0.manifestFile.isHidden());
      assertEquals(1392409281320L, explodedArchive0.manifestFile.lastModified());
      assertTrue(explodedArchive0.manifestFile.exists());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744");
      String string5 = "cg5}lDo Z&";
      boolean boolean3 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertFalse(boolean3);
      
      String string6 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string6);
      assertEquals("file:/", string6);
      
      String string7 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)file2));
      assertFalse(mockFile0.equals((Object)file1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string7);
      assertEquals("file:/", string7);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.lastModified());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      String string3 = ">wU%^Lg4)jhH>E\\:H!h";
      File file1 = MockFile.createTempFile(string3, string2, explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(file1.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, file1.length());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/", file1.getParent());
      assertEquals(">wU%^Lg4)jhH>E\\:H!h0file:", file1.getName());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertTrue(file1.isAbsolute());
      assertEquals("/>wU%^Lg4)jhH>E\\:H!h0file:", file1.toString());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string4 = mockFile0.getAbsolutePath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotNull(string4);
      assertEquals("/", string4);
      
      File file2 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertFalse(file2.canWrite());
      assertFalse(file2.canRead());
      assertTrue(file2.isAbsolute());
      assertEquals("/META-INF/MANIFEST.MF", file2.toString());
      assertEquals(0L, file2.lastModified());
      assertEquals("MANIFEST.MF", file2.getName());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isDirectory());
      assertFalse(file2.exists());
      assertEquals(0L, file2.length());
      assertTrue(file2.isFile());
      assertEquals("/META-INF", file2.getParent());
      assertFalse(file2.canExecute());
      assertEquals(0L, file2.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(file2.equals((Object)mockFile0));
      assertTrue(file2.equals((Object)file0));
      assertFalse(file2.equals((Object)file1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(file2, file0);
      assertNotSame(file2, mockFile0);
      assertNotSame(file2, file1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file2);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file2);
      
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      assertNotNull(comparator0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // />wU%^Lg4)jhH>E\\:H!h0file: (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      File file0 = null;
      String string0 = "\"U*`i%";
      MockFile mockFile0 = new MockFile(file0, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      String string1 = mockFile0.getCanonicalPath();
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/\"U*`i%", string1);
      
      boolean boolean1 = mockFile0.mkdirs();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(string0, string1);
      assertTrue(boolean1);
      
      Path path0 = mockFile0.toPath();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(path0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = "MANIFPEST.MF";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("MANIFPEST.MF", explodedArchive_FileEntry0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(explodedArchive_FileEntry0);
      
      String string3 = null;
      File file1 = MockFile.createTempFile(explodedArchive_FileEntry0.name, string3);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertEquals("MANIFPEST.MF", explodedArchive_FileEntry0.getName());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/MANIFPEST.MF0.tmp", file1.toString());
      assertTrue(file1.isFile());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("MANIFPEST.MF0.tmp", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(file1.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(file1, mockFile0);
      assertNotNull(file1);
      
      explodedArchive_FileEntry0.file = file1;
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\"U*`i%", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("\"U*`i%", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("MANIFPEST.MF", explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file1.exists());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertEquals("/tmp/MANIFPEST.MF0.tmp", file1.toString());
      assertTrue(file1.isFile());
      assertEquals("/tmp", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.canExecute());
      assertTrue(file1.canRead());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("MANIFPEST.MF0.tmp", file1.getName());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.canWrite());
      assertFalse(file1.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertEquals("/tmp/MANIFPEST.MF0.tmp", explodedArchive_FileEntry0.file.toString());
      assertTrue(explodedArchive_FileEntry0.file.isFile());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals("MANIFPEST.MF0.tmp", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertEquals("/tmp", explodedArchive_FileEntry0.file.getParent());
      
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /tmp/MANIFPEST.MF0.tmp (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)66;
      byteArray0[0] = byte0;
      byte byte1 = (byte)2;
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)2}, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/META-INF", file0.getParent());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertEquals(2L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertEquals("META-INF/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertTrue(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals("/META-INF", file1.getParent());
      assertTrue(file1.exists());
      assertTrue(file1.isAbsolute());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals("MANIFEST.MF", file1.getName());
      assertEquals("/META-INF/MANIFEST.MF", file1.toString());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isDirectory());
      assertEquals(2L, file1.length());
      assertTrue(file1.canWrite());
      assertTrue(file1.canExecute());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(file1.equals((Object)mockFile0));
      assertTrue(file1.equals((Object)file0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(file1);
      
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      assertNotNull(comparator0);
      
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = false;
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(spliterator0);
      
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, explodedArchive_FileEntryIterator0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /META-INF/MANIFEST.MF (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      boolean boolean0 = false;
      explodedArchive0.recursive = boolean0;
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canRead());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertFalse(file0.exists());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntry0.file = file0;
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.lastModified());
      assertFalse(explodedArchive_FileEntry0.file.canExecute());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.isFile());
      assertFalse(explodedArchive_FileEntry0.file.canRead());
      assertEquals("/META-INF/MANIFEST.MF", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals("/META-INF", explodedArchive_FileEntry0.file.getParent());
      assertFalse(explodedArchive_FileEntry0.file.canWrite());
      assertEquals("MANIFEST.MF", explodedArchive_FileEntry0.file.getName());
      assertFalse(explodedArchive_FileEntry0.file.isDirectory());
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      assertNotNull(comparator0);
      
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, explodedArchive_FileEntryIterator0.recursive, boolean2).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean2 == boolean1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean3 == boolean1);
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string4);
      
      File file1 = explodedArchive_FileEntryIterator0.poll();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file1.exists());
      assertEquals(0L, file1.getFreeSpace());
      assertEquals("/tmp", file1.toString());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("/", file1.getParent());
      assertEquals(0L, file1.length());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertTrue(file1.isDirectory());
      assertEquals("tmp", file1.getName());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isFile());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file1.equals((Object)file0));
      assertFalse(file1.equals((Object)mockFile0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file1, file0);
      assertNotSame(file1, mockFile0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file1);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertFalse(explodedArchive0.recursive);
      assertNull(manifest0);
      
      explodedArchive0.manifestFile = ((ExplodedArchive.FileEntry) archive_Entry0).file;
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive0.manifestFile.isFile());
      assertEquals("/", explodedArchive0.manifestFile.getParent());
      assertEquals(0L, explodedArchive0.manifestFile.getUsableSpace());
      assertEquals("home", explodedArchive0.manifestFile.getName());
      assertTrue(explodedArchive0.manifestFile.canWrite());
      assertTrue(explodedArchive0.manifestFile.isAbsolute());
      assertEquals(0L, explodedArchive0.manifestFile.getTotalSpace());
      assertEquals(0L, explodedArchive0.manifestFile.getFreeSpace());
      assertEquals(0L, explodedArchive0.manifestFile.length());
      assertTrue(explodedArchive0.manifestFile.isDirectory());
      assertEquals("/home", explodedArchive0.manifestFile.toString());
      assertEquals(1392409281320L, explodedArchive0.manifestFile.lastModified());
      assertTrue(explodedArchive0.manifestFile.exists());
      assertTrue(explodedArchive0.manifestFile.canExecute());
      assertTrue(explodedArchive0.manifestFile.canRead());
      assertFalse(explodedArchive0.manifestFile.isHidden());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertTrue(archive_Entry0.isDirectory());
      assertEquals("home/", archive_Entry0.getName());
      
      String string5 = "cg5}lDo Z&";
      String string6 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string6);
      assertEquals("file:/", string6);
      
      String string7 = explodedArchive0.toString();
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/", mockFile0.toString());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)file1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotSame(string0, string7);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, file1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string7);
      assertEquals("file:/", string7);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      
      String string1 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(string1);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string2 = explodedArchive0.toString();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string2);
      assertEquals("file:/", string2);
      
      boolean boolean0 = false;
      explodedArchive0.recursive = boolean0;
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/META-INF", file0.getParent());
      assertFalse(file0.canExecute());
      assertEquals("MANIFEST.MF", file0.getName());
      assertFalse(file0.exists());
      assertEquals("/META-INF/MANIFEST.MF", file0.toString());
      assertFalse(file0.canRead());
      assertFalse(string0.equals((Object)string2));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(file0);
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      explodedArchive_FileEntry0.file = file0;
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals("/META-INF/MANIFEST.MF", explodedArchive_FileEntry0.file.toString());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      assertFalse(explodedArchive_FileEntry0.file.exists());
      assertTrue(explodedArchive_FileEntry0.file.isFile());
      assertEquals("MANIFEST.MF", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertFalse(explodedArchive_FileEntry0.file.canRead());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertFalse(explodedArchive_FileEntry0.file.isDirectory());
      assertFalse(explodedArchive_FileEntry0.file.canExecute());
      assertEquals(0L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("/META-INF", explodedArchive_FileEntry0.file.getParent());
      assertFalse(explodedArchive_FileEntry0.file.canWrite());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = (ExplodedArchive.FileEntry)explodedArchive_FileEntryIterator0.next();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", explodedArchive_FileEntry1.getName());
      assertTrue(explodedArchive_FileEntry1.isDirectory());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntry1);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, file0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile(explodedArchive_FileEntry1.name, string0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", explodedArchive_FileEntry1.getName());
      assertTrue(explodedArchive_FileEntry1.isDirectory());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/tmp/home", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals("0", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("/tmp/home/0", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)explodedArchive_FileEntry1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertFalse(explodedArchive_FileEntry1.equals((Object)explodedArchive_FileEntry0));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertNotSame(explodedArchive_FileEntry1, explodedArchive_FileEntry0);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(mockFile1);
      
      explodedArchive_FileEntry1.file = (File) mockFile1;
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertEquals("home/", explodedArchive_FileEntry1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/tmp/home", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.exists());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertEquals("0", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("/tmp/home/0", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("0", explodedArchive_FileEntry1.file.getName());
      assertEquals(0L, explodedArchive_FileEntry1.file.getUsableSpace());
      assertEquals(1392409281320L, explodedArchive_FileEntry1.file.lastModified());
      assertTrue(explodedArchive_FileEntry1.file.canRead());
      assertFalse(explodedArchive_FileEntry1.file.isHidden());
      assertTrue(explodedArchive_FileEntry1.file.isFile());
      assertTrue(explodedArchive_FileEntry1.file.exists());
      assertTrue(explodedArchive_FileEntry1.file.canExecute());
      assertFalse(explodedArchive_FileEntry1.file.isDirectory());
      assertEquals("/tmp/home", explodedArchive_FileEntry1.file.getParent());
      assertTrue(explodedArchive_FileEntry1.file.canWrite());
      assertEquals(0L, explodedArchive_FileEntry1.file.getTotalSpace());
      assertTrue(explodedArchive_FileEntry1.file.isAbsolute());
      assertEquals(0L, explodedArchive_FileEntry1.file.getFreeSpace());
      assertEquals("/tmp/home/0", explodedArchive_FileEntry1.file.toString());
      assertEquals(0L, explodedArchive_FileEntry1.file.length());
      
      String string3 = mockFile0.getAbsolutePath();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotNull(string3);
      assertEquals("/", string3);
      
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      assertNotNull(comparator0);
      
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, explodedArchive_FileEntryIterator0.recursive, boolean2, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(boolean1 == boolean3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(explodedArchive_FileEntry0.equals((Object)explodedArchive_FileEntry1));
      assertFalse(boolean2 == boolean1);
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string4 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.equals((Object)explodedArchive_FileEntry1));
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertNull(string4);
      
      MockFile mockFile2 = (MockFile)explodedArchive_FileEntryIterator0.poll();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(mockFile2.isHidden());
      assertTrue(mockFile2.canWrite());
      assertTrue(mockFile2.canRead());
      assertEquals(0L, mockFile2.getTotalSpace());
      assertTrue(mockFile2.canExecute());
      assertEquals("/", mockFile2.getParent());
      assertTrue(mockFile2.exists());
      assertEquals(0L, mockFile2.length());
      assertEquals("/tmp", mockFile2.toString());
      assertEquals(1392409281320L, mockFile2.lastModified());
      assertEquals(0L, mockFile2.getFreeSpace());
      assertFalse(mockFile2.isFile());
      assertEquals("tmp", mockFile2.getName());
      assertTrue(mockFile2.isAbsolute());
      assertTrue(mockFile2.isDirectory());
      assertEquals(0L, mockFile2.getUsableSpace());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)explodedArchive_FileEntry1));
      assertFalse(mockFile2.equals((Object)mockFile0));
      assertFalse(mockFile2.equals((Object)file0));
      assertFalse(mockFile2.equals((Object)mockFile1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertNotSame(mockFile2, mockFile0);
      assertNotSame(mockFile2, file0);
      assertNotSame(mockFile2, mockFile1);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(mockFile2);
      
      Manifest manifest0 = explodedArchive0.getManifest();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertFalse(explodedArchive0.recursive);
      assertNull(manifest0);
      
      explodedArchive0.manifestFile = explodedArchive_FileEntry1.file;
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertEquals(0L, explodedArchive0.manifestFile.getFreeSpace());
      assertTrue(explodedArchive0.manifestFile.exists());
      assertEquals("/tmp/home/0", explodedArchive0.manifestFile.toString());
      assertEquals("/tmp/home", explodedArchive0.manifestFile.getParent());
      assertEquals(0L, explodedArchive0.manifestFile.length());
      assertTrue(explodedArchive0.manifestFile.isAbsolute());
      assertTrue(explodedArchive0.manifestFile.canExecute());
      assertTrue(explodedArchive0.manifestFile.canWrite());
      assertEquals(0L, explodedArchive0.manifestFile.getTotalSpace());
      assertEquals(0L, explodedArchive0.manifestFile.getUsableSpace());
      assertEquals("0", explodedArchive0.manifestFile.getName());
      assertTrue(explodedArchive0.manifestFile.isFile());
      assertFalse(explodedArchive0.manifestFile.isDirectory());
      assertTrue(explodedArchive0.manifestFile.canRead());
      assertFalse(explodedArchive0.manifestFile.isHidden());
      assertEquals(1392409281320L, explodedArchive0.manifestFile.lastModified());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntry1.isDirectory());
      assertEquals("home/", explodedArchive_FileEntry1.getName());
      
      String string5 = "cg5}lDo Z&";
      String string6 = explodedArchive0.toString();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string6);
      assertEquals("file:/", string6);
      
      Manifest manifest1 = explodedArchive0.getManifest();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(manifest1);
      
      String string7 = explodedArchive0.toString();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string7);
      assertEquals("file:/", string7);
      
      Manifest manifest2 = explodedArchive0.getManifest();
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertSame(manifest2, manifest1);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(manifest2);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry2 = (ExplodedArchive.FileEntry)explodedArchive_FileEntryIterator0.next();
      assertEquals("home/CIN/", explodedArchive_FileEntry2.getName());
      assertTrue(explodedArchive_FileEntry2.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertNull(explodedArchive_FileEntry0.getName());
      assertFalse(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(explodedArchive_FileEntry2.equals((Object)explodedArchive_FileEntry1));
      assertFalse(explodedArchive_FileEntry2.equals((Object)explodedArchive_FileEntry0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(mockFile0.equals((Object)mockFile2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(explodedArchive_FileEntry0.equals((Object)explodedArchive_FileEntry1));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(explodedArchive_FileEntry2, explodedArchive_FileEntry1);
      assertNotSame(explodedArchive_FileEntry2, explodedArchive_FileEntry0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(mockFile0, mockFile2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry1);
      assertNotSame(explodedArchive_FileEntry0, explodedArchive_FileEntry2);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntry2);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      assertNull(explodedArchive_FileEntry0.getName());
      assertNotNull(explodedArchive_FileEntry0);
      
      explodedArchive_FileEntry0.file = (File) mockFile0;
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertNull(explodedArchive_FileEntry0.file.getParent());
      assertEquals(0L, explodedArchive_FileEntry0.file.getTotalSpace());
      assertEquals(1392409281320L, explodedArchive_FileEntry0.file.lastModified());
      assertEquals("", explodedArchive_FileEntry0.file.getName());
      assertEquals(0L, explodedArchive_FileEntry0.file.getFreeSpace());
      assertTrue(explodedArchive_FileEntry0.file.isDirectory());
      assertEquals(0L, explodedArchive_FileEntry0.file.length());
      assertTrue(explodedArchive_FileEntry0.file.canExecute());
      assertTrue(explodedArchive_FileEntry0.file.isAbsolute());
      assertTrue(explodedArchive_FileEntry0.file.canWrite());
      assertFalse(explodedArchive_FileEntry0.file.isFile());
      assertEquals(0L, explodedArchive_FileEntry0.file.getUsableSpace());
      assertTrue(explodedArchive_FileEntry0.file.exists());
      assertEquals("/", explodedArchive_FileEntry0.file.toString());
      assertTrue(explodedArchive_FileEntry0.file.canRead());
      assertFalse(explodedArchive_FileEntry0.file.isHidden());
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      String string1 = explodedArchive0.toString();
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(explodedArchive0.recursive);
      assertNotNull(string1);
      assertEquals("file:/", string1);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      explodedArchive0.recursive = boolean0;
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive0.recursive);
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertEquals("home/", archive_Entry0.getName());
      assertTrue(archive_Entry0.isDirectory());
      assertFalse(string0.equals((Object)string1));
      assertFalse(archive_Entry0.equals((Object)explodedArchive_FileEntry0));
      assertNotSame(string0, string1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(archive_Entry0, explodedArchive_FileEntry0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(archive_Entry0);
      
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(iterator0);
      
      boolean boolean2 = true;
      boolean boolean3 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, explodedArchive_FileEntryIterator0.recursive, explodedArchive_FileEntryIterator0.recursive, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-116);
      byteArray0[0] = byte0;
      boolean boolean4 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertTrue(boolean4);
      assertEquals(1, byteArray0.length);
      
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean4);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean0);
      assertNotSame(string0, string1);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(list0);
      
      String string2 = explodedArchive_FileEntry0.getName();
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNull(string2);
      
      File file0 = explodedArchive_FileEntryIterator0.poll();
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("/", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(explodedArchive_FileEntry0.getName());
      assertTrue(explodedArchive_FileEntry0.isDirectory());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("tmp", file0.getName());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/", file0.getParent());
      assertTrue(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(explodedArchive_FileEntry0.equals((Object)archive_Entry0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(explodedArchive_FileEntryIterator0.equals((Object)iterator0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(explodedArchive_FileEntry0, archive_Entry0);
      assertNotSame(file0, mockFile0);
      assertNotSame(explodedArchive_FileEntryIterator0, iterator0);
      assertFalse(explodedArchive0.recursive);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(file0);
      
      try { 
        explodedArchive0.getManifest();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "EHo>(q7";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = ".";
      String string2 = ".";
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      Path path0 = mockFile1.toPath();
      assertFalse(mockFile0.isHidden());
      assertEquals("EHo>(q7", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("EHo>(q7", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/.", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertFalse(mockFile1.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.lastModified());
      assertFalse(mockFile1.isDirectory());
      assertEquals(".", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.exists());
      assertTrue(mockFile1.isHidden());
      assertFalse(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(mockFile1, mockFile0);
      assertNotNull(path0);
      
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile1);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("EHo>(q7", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("EHo>(q7", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/.", mockFile1.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(".", mockFile1.getName());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile1.isFile());
      assertTrue(mockFile1.isHidden());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("EHo>(q70.", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/.", file0.getParent());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/EHo>(q7/./EHo>(q70.", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockFile1, file0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      assertNotNull(file0);
      
      boolean boolean1 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean1);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("EHo>(q7", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("EHo>(q7", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(explodedArchive_FileEntryIterator0.hasNext());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      assertFalse(explodedArchive_FileEntryIterator0.recursive);
      assertNotNull(explodedArchive_FileEntryIterator0);
      
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.current, explodedArchive_FileEntryIterator0.recursive);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }
}
