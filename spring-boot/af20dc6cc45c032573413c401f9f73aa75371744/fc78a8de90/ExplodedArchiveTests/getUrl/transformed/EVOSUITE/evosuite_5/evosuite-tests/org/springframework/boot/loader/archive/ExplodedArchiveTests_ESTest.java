/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 04:58:28 GMT 2021
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.net.URL;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarEntry;
import java.util.zip.ZipEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.archive.ExplodedArchiveTests;
import org.springframework.boot.loader.jar.JarFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchiveTests_ESTest extends ExplodedArchiveTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      String string0 = "ZESTED_DIREKTORY";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      explodedArchiveTests0.copy(byteArrayInputStream0, mockPrintStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "/";
      MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.setReadOnly();
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(boolean0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      Map<String, Archive.Entry> map0 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(map0.isEmpty());
      assertEquals(10, map0.size());
      assertTrue(explodedArchive0.recursive);
      assertNotNull(map0);
      
      explodedArchiveTests0.setrootFolder(explodedArchive0.root);
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(explodedArchive0.recursive);
      
      ExplodedArchive explodedArchive1 = explodedArchiveTests0.getarchive();
      assertNull(explodedArchive1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      explodedArchiveTests0.setarchive(explodedArchiveTests0.archive);
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      explodedArchiveTests0.settemporaryFolder(explodedArchiveTests0.temporaryFolder);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.getarchive();
      assertNull(explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.archive;
      assertNull(explodedArchive0);
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertNull(file1);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = null;
      explodedArchiveTests0.setrootFolder(file0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = new TemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.archive;
      assertNull(explodedArchive0);
      
      explodedArchiveTests0.setarchive(explodedArchive0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.rootFolder;
      assertNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertNull(file1);
      
      Archive archive0 = null;
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(archive0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "ocF<iboeQ@D";
      File file0 = MockFile.createTempFile(string0, string0, explodedArchiveTests0.rootFolder);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("ocF<iboeQ@D0ocF<iboeQ@D", file0.getName());
      assertEquals("/tmp/ocF<iboeQ@D0ocF<iboeQ@D", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertNotNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("ocF<iboeQ@D0ocF<iboeQ@D", file0.getName());
      assertEquals("/tmp/ocF<iboeQ@D0ocF<iboeQ@D", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      int int0 = 10;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      String string0 = "nested.jar";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      try { 
        explodedArchiveTests0.copy(pipedInputStream0, mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      byte[] byteArray0 = new byte[1];
      ExplodedArchive explodedArchive0 = null;
      explodedArchiveTests0.setarchive(explodedArchive0);
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      String string0 = "8L[~&:r1+'/d'|-";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      explodedArchiveTests0.copy(pushbackInputStream0, mockFileOutputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.temporaryFolder;
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.temporaryFolder = temporaryFolder0;
      String string1 = "jU;t\"@&r+SQC";
      // Undeclared exception!
      try { 
        temporaryFolder0.newFolder();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.archive;
      assertNull(explodedArchive0);
      
      explodedArchiveTests0.archive = explodedArchive0;
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
      assertNotNull(temporaryFolder0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      assertFalse(explodedArchive0.recursive);
      assertNotNull(explodedArchive0);
      
      explodedArchiveTests0.setarchive(explodedArchive0);
      assertFalse(explodedArchive0.recursive);
      
      explodedArchiveTests0.setrootFolder(file0);
      explodedArchive0.root = explodedArchiveTests0.rootFolder;
      ExplodedArchive explodedArchive1 = explodedArchiveTests0.getarchive();
      assertSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive1.recursive);
      assertNotNull(explodedArchive1);
      
      String string0 = explodedArchive0.toString();
      assertSame(explodedArchive0, explodedArchive1);
      assertEquals("exploded archive", string0);
      assertFalse(explodedArchive0.recursive);
      assertNotNull(string0);
      
      File file1 = explodedArchiveTests0.rootFolder;
      assertNull(file1);
      
      File file2 = explodedArchive1.getManifestFile(file1);
      assertEquals(0L, file2.getFreeSpace());
      assertEquals(0L, file2.length());
      assertEquals(0L, file2.getTotalSpace());
      assertFalse(file2.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF/MANIFEST.MF", file2.toString());
      assertTrue(file2.isAbsolute());
      assertFalse(file2.canWrite());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/META-INF", file2.getParent());
      assertFalse(file2.isDirectory());
      assertEquals(0L, file2.getUsableSpace());
      assertFalse(file2.isHidden());
      assertEquals(0L, file2.lastModified());
      assertEquals("MANIFEST.MF", file2.getName());
      assertFalse(file2.exists());
      assertTrue(file2.isFile());
      assertFalse(file2.canExecute());
      assertSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive1.recursive);
      assertNotNull(file2);
      
      File file3 = explodedArchiveTests0.getrootFolder();
      assertNull(file3);
      
      File file4 = explodedArchiveTests0.getrootFolder();
      assertNull(file4);
      
      explodedArchiveTests0.setarchive(explodedArchive1);
      assertSame(explodedArchive1, explodedArchive0);
      assertFalse(explodedArchive1.recursive);
      
      explodedArchiveTests0.setarchive(explodedArchive0);
      assertSame(explodedArchive0, explodedArchive1);
      assertFalse(explodedArchive0.recursive);
      
      ExplodedArchive explodedArchive2 = explodedArchiveTests0.getarchive();
      assertSame(explodedArchive2, explodedArchive1);
      assertSame(explodedArchive2, explodedArchive0);
      assertFalse(explodedArchive2.recursive);
      assertNotNull(explodedArchive2);
      
      ExplodedArchive explodedArchive3 = explodedArchiveTests0.getarchive();
      assertSame(explodedArchive3, explodedArchive1);
      assertSame(explodedArchive3, explodedArchive0);
      assertSame(explodedArchive3, explodedArchive2);
      assertFalse(explodedArchive3.recursive);
      assertNotNull(explodedArchive3);
      
      explodedArchiveTests0.setarchive(explodedArchive3);
      assertSame(explodedArchive3, explodedArchive1);
      assertSame(explodedArchive3, explodedArchive0);
      assertSame(explodedArchive3, explodedArchive2);
      assertFalse(explodedArchive3.recursive);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      // Undeclared exception!
      try { 
        explodedArchiveTests0.getEntriesMap(explodedArchive2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = null;
      String string0 = " t;0iiz9\\5:T{@H5";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.rootFolder = (File) mockFile0;
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" t;0iiz9\\5:T{@H5", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertFalse(explodedArchiveTests0.rootFolder.exists());
      assertTrue(explodedArchiveTests0.rootFolder.isFile());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", explodedArchiveTests0.rootFolder.getName());
      assertFalse(explodedArchiveTests0.rootFolder.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", explodedArchiveTests0.rootFolder.toString());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      assertFalse(explodedArchiveTests0.rootFolder.canExecute());
      assertFalse(explodedArchiveTests0.rootFolder.isDirectory());
      assertTrue(explodedArchiveTests0.rootFolder.isAbsolute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", explodedArchiveTests0.rootFolder.getParent());
      assertEquals(0L, explodedArchiveTests0.rootFolder.lastModified());
      assertFalse(explodedArchiveTests0.rootFolder.canWrite());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertEquals(0L, explodedArchiveTests0.rootFolder.length());
      
      explodedArchiveTests0.setarchive(explodedArchive0);
      File file0 = explodedArchiveTests0.getrootFolder();
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertSame(file0, mockFile0);
      assertNotNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertSame(file0, mockFile0);
      
      TemporaryFolder temporaryFolder0 = new TemporaryFolder(file0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals(0L, file0.lastModified());
      assertTrue(file0.isFile());
      assertFalse(file0.canWrite());
      assertFalse(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertSame(file0, mockFile0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertTrue(file0.equals((Object)mockFile0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/", file0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertFalse(file0.isFile());
      assertEquals("", file0.getName());
      assertNull(file0.getParent());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      
      long long0 = 0L;
      boolean boolean0 = mockFile0.setLastModified(long0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(mockFile0, file0);
      assertTrue(boolean0);
      
      explodedArchiveTests0.setrootFolder(mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(mockFile0, file0);
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertTrue(file1.equals((Object)file0));
      assertEquals(0L, file1.length());
      assertEquals("/", file1.toString());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.exists());
      assertTrue(file1.canRead());
      assertTrue(file1.canExecute());
      assertFalse(file1.isFile());
      assertTrue(file1.isDirectory());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertEquals("", file1.getName());
      assertNull(file1.getParent());
      assertTrue(file1.canWrite());
      assertEquals(0L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertTrue(file1.isAbsolute());
      assertSame(file1, mockFile0);
      assertNotSame(file1, file0);
      assertNotNull(file1);
      
      ExplodedArchive explodedArchive0 = explodedArchiveTests0.getarchive();
      assertNull(explodedArchive0);
      
      TemporaryFolder temporaryFolder0 = new TemporaryFolder(mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(temporaryFolder0);
      
      // Undeclared exception!
      try { 
        temporaryFolder0.getRoot();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // the temporary folder has not yet been created
         //
         verifyException("org.junit.rules.TemporaryFolder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
          assertNotNull(explodedArchiveTests0);
          
          String string0 = "/";
          MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string0);
          assertNotNull(mockFile0);
          
          boolean boolean0 = mockFile0.setReadOnly();
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertTrue(boolean0);
          
          boolean boolean1 = true;
          ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
          assertTrue(boolean1 == boolean0);
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertTrue(explodedArchive0.recursive);
          assertNotNull(explodedArchive0);
          
          explodedArchive0.root = explodedArchiveTests0.rootFolder;
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          
          String string1 = "T:(K_41YA";
          MockFile mockFile1 = new MockFile(string1);
          assertFalse(string1.equals((Object)string0));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          File file0 = mockFile0.getAbsoluteFile();
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(file0.equals((Object)mockFile0));
          assertFalse(file0.equals((Object)mockFile1));
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.canExecute());
          assertEquals("", file0.getName());
          assertEquals("/", file0.toString());
          assertEquals(0L, file0.getTotalSpace());
          assertNull(file0.getParent());
          assertTrue(file0.isDirectory());
          assertEquals(1392409281320L, file0.lastModified());
          assertFalse(file0.canWrite());
          assertFalse(file0.isFile());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, file0);
          assertNotSame(file0, mockFile1);
          assertNotSame(file0, mockFile0);
          assertNotNull(file0);
          
          explodedArchive0.root = (File) mockFile1;
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals(0L, explodedArchive0.root.length());
          assertFalse(explodedArchive0.root.isHidden());
          assertNull(explodedArchive0.root.getParent());
          assertEquals(0L, explodedArchive0.root.getTotalSpace());
          assertEquals("T:(K_41YA", explodedArchive0.root.toString());
          assertFalse(explodedArchive0.root.canExecute());
          assertFalse(explodedArchive0.root.isAbsolute());
          assertTrue(explodedArchive0.root.isFile());
          assertFalse(explodedArchive0.root.canRead());
          assertEquals(0L, explodedArchive0.root.getUsableSpace());
          assertFalse(explodedArchive0.root.exists());
          assertFalse(explodedArchive0.root.isDirectory());
          assertEquals("T:(K_41YA", explodedArchive0.root.getName());
          assertFalse(explodedArchive0.root.canWrite());
          assertEquals(0L, explodedArchive0.root.getFreeSpace());
          assertEquals(0L, explodedArchive0.root.lastModified());
          
          boolean boolean2 = mockFile0.mkdir();
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertFalse(boolean2 == boolean1);
          assertFalse(boolean2 == boolean0);
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, file0);
          assertFalse(boolean2);
          
          URL uRL0 = explodedArchive0.getUrl();
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals("", uRL0.getAuthority());
          assertNull(uRL0.getQuery());
          assertEquals("", uRL0.getHost());
          assertNull(uRL0.getUserInfo());
          assertEquals((-1), uRL0.getPort());
          assertEquals((-1), uRL0.getDefaultPort());
          assertEquals("file", uRL0.getProtocol());
          assertNull(uRL0.getRef());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, file0);
          assertTrue(explodedArchive0.recursive);
          assertNotNull(uRL0);
          
          Map<String, Archive.Entry> map0 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertTrue(map0.isEmpty());
          assertEquals(0, map0.size());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, file0);
          assertTrue(explodedArchive0.recursive);
          assertNotNull(map0);
          
          explodedArchiveTests0.setrootFolder(explodedArchive0.root);
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, file0);
          assertTrue(explodedArchive0.recursive);
          
          Map<String, Archive.Entry> map1 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertTrue(map1.equals((Object)map0));
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          assertEquals(0, map1.size());
          assertTrue(map1.isEmpty());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(mockFile0, file0);
          assertNotSame(map1, map0);
          assertTrue(explodedArchive0.recursive);
          assertNotNull(map1);
          
          ExplodedArchive explodedArchive1 = explodedArchiveTests0.getarchive();
          assertNull(explodedArchive1);
          
          TemporaryFolder temporaryFolder0 = explodedArchiveTests0.gettemporaryFolder();
          assertNotNull(temporaryFolder0);
          
          explodedArchiveTests0.archive = explodedArchive0;
          assertFalse(mockFile0.canExecute());
          assertFalse(mockFile0.isFile());
          assertEquals("", mockFile0.getName());
          assertTrue(mockFile0.isDirectory());
          assertTrue(mockFile0.isAbsolute());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertEquals("/", mockFile0.toString());
          assertTrue(mockFile0.exists());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertFalse(mockFile0.isHidden());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals(0L, mockFile0.length());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertFalse(mockFile0.canWrite());
          
          // Undeclared exception!
          try { 
            temporaryFolder0.create();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
             verifyException("java.io.File", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      int int0 = (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, byteArray0[0]);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        explodedArchiveTests0.copy(byteArrayInputStream0, outputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = true;
      InputStream inputStream0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      // Undeclared exception!
      try { 
        explodedArchiveTests0.copy(inputStream0, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchiveTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      boolean boolean0 = false;
      TemporaryFolder temporaryFolder0 = null;
      explodedArchiveTests0.temporaryFolder = temporaryFolder0;
      explodedArchiveTests0.setarchive(explodedArchiveTests0.archive);
      TemporaryFolder temporaryFolder1 = explodedArchiveTests0.gettemporaryFolder();
      assertNull(temporaryFolder1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      String string0 = "vF>V=Fm/ic3a~K(3n";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.setrootFolder(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.exists());
      assertEquals("vF>V=Fm/ic3a~K(3n", mockFile0.toString());
      assertEquals("vF>V=Fm", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("ic3a~K(3n", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertEquals("ic3a~K(3n", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals("vF>V=Fm/ic3a~K(3n", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isAbsolute());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertFalse(file0.canExecute());
      assertEquals("vF>V=Fm", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.canWrite());
      assertSame(file0, mockFile0);
      assertNotNull(file0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertNull(file0);
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertNull(file1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int0 = 127;
      int int1 = 25;
      pipedInputStream0.mark(int1);
      assertFalse(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedOutputStream0.write(int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      explodedArchiveTests0.copy(pipedInputStream0, pipedOutputStream0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5");
      String string0 = "D@o}o|x=S-|UPU4DZ";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      ExplodedArchive explodedArchive0 = null;
      String string1 = " t;0iiz9\\5:T{@H5";
      MockFile mockFile0 = new MockFile(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.rootFolder = (File) mockFile0;
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(18L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" t;0iiz9\\5:T{@H5", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getFreeSpace());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getTotalSpace());
      assertTrue(explodedArchiveTests0.rootFolder.isAbsolute());
      assertTrue(explodedArchiveTests0.rootFolder.exists());
      assertTrue(explodedArchiveTests0.rootFolder.isFile());
      assertTrue(explodedArchiveTests0.rootFolder.canRead());
      assertFalse(explodedArchiveTests0.rootFolder.isHidden());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", explodedArchiveTests0.rootFolder.toString());
      assertTrue(explodedArchiveTests0.rootFolder.canExecute());
      assertEquals(18L, explodedArchiveTests0.rootFolder.length());
      assertEquals(0L, explodedArchiveTests0.rootFolder.getUsableSpace());
      assertTrue(explodedArchiveTests0.rootFolder.canWrite());
      assertEquals(" t;0iiz9\\5:T{@H5", explodedArchiveTests0.rootFolder.getName());
      assertEquals(1392409281320L, explodedArchiveTests0.rootFolder.lastModified());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", explodedArchiveTests0.rootFolder.getParent());
      assertFalse(explodedArchiveTests0.rootFolder.isDirectory());
      
      explodedArchiveTests0.setarchive(explodedArchive0);
      File file0 = explodedArchiveTests0.getrootFolder();
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertEquals(18L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertSame(file0, mockFile0);
      assertNotNull(file0);
      
      explodedArchiveTests0.setrootFolder(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertEquals(18L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertSame(file0, mockFile0);
      
      TemporaryFolder temporaryFolder0 = new TemporaryFolder(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertEquals(18L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(temporaryFolder0);
      
      explodedArchiveTests0.settemporaryFolder(temporaryFolder0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5/ t;0iiz9\\5:T{@H5", file0.toString());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/ t;0iiz9\\5:T{@H5", file0.getParent());
      assertEquals(18L, file0.length());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(" t;0iiz9\\5:T{@H5", file0.getName());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertSame(file0, mockFile0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
          assertNotNull(explodedArchiveTests0);
          
          String string0 = "/";
          MockFile mockFile0 = new MockFile(explodedArchiveTests0.rootFolder, string0);
          assertNotNull(mockFile0);
          
          boolean boolean0 = mockFile0.setReadOnly();
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertTrue(boolean0);
          
          boolean boolean1 = true;
          ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
          assertTrue(boolean1 == boolean0);
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertTrue(explodedArchive0.recursive);
          assertNotNull(explodedArchive0);
          
          explodedArchive0.root = explodedArchiveTests0.rootFolder;
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          
          String string1 = "T:(K_41YA";
          MockFile mockFile1 = new MockFile(string1);
          assertFalse(string1.equals((Object)string0));
          assertFalse(mockFile1.equals((Object)mockFile0));
          assertNotNull(mockFile1);
          
          File file0 = mockFile0.getAbsoluteFile();
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(file0.equals((Object)mockFile0));
          assertFalse(file0.equals((Object)mockFile1));
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertFalse(file0.isHidden());
          assertEquals(0L, file0.getUsableSpace());
          assertTrue(file0.isAbsolute());
          assertFalse(file0.canWrite());
          assertEquals(0L, file0.length());
          assertEquals(0L, file0.getFreeSpace());
          assertEquals("", file0.getName());
          assertEquals("/", file0.toString());
          assertEquals(0L, file0.getTotalSpace());
          assertTrue(file0.isDirectory());
          assertFalse(file0.canExecute());
          assertEquals(1392409281320L, file0.lastModified());
          assertFalse(file0.isFile());
          assertNull(file0.getParent());
          assertTrue(file0.canRead());
          assertTrue(file0.exists());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, file0);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(file0, mockFile0);
          assertNotSame(file0, mockFile1);
          assertNotNull(file0);
          
          explodedArchive0.root = (File) mockFile0;
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertEquals(1392409281320L, explodedArchive0.root.lastModified());
          assertNull(explodedArchive0.root.getParent());
          assertEquals(0L, explodedArchive0.root.getTotalSpace());
          assertEquals("", explodedArchive0.root.getName());
          assertTrue(explodedArchive0.root.isDirectory());
          assertEquals(0L, explodedArchive0.root.getFreeSpace());
          assertEquals(0L, explodedArchive0.root.length());
          assertFalse(explodedArchive0.root.canWrite());
          assertFalse(explodedArchive0.root.canExecute());
          assertTrue(explodedArchive0.root.isAbsolute());
          assertFalse(explodedArchive0.root.isFile());
          assertEquals(0L, explodedArchive0.root.getUsableSpace());
          assertTrue(explodedArchive0.root.exists());
          assertTrue(explodedArchive0.root.canRead());
          assertEquals("/", explodedArchive0.root.toString());
          assertFalse(explodedArchive0.root.isHidden());
          
          boolean boolean2 = mockFile0.mkdir();
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertFalse(boolean2 == boolean1);
          assertFalse(boolean2 == boolean0);
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, file0);
          assertNotSame(mockFile0, mockFile1);
          assertFalse(boolean2);
          
          URL uRL0 = explodedArchive0.getUrl();
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertEquals((-1), uRL0.getPort());
          assertNull(uRL0.getQuery());
          assertEquals("", uRL0.getHost());
          assertEquals("file", uRL0.getProtocol());
          assertNull(uRL0.getRef());
          assertEquals((-1), uRL0.getDefaultPort());
          assertNull(uRL0.getUserInfo());
          assertEquals("", uRL0.getAuthority());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, file0);
          assertNotSame(mockFile0, mockFile1);
          assertTrue(explodedArchive0.recursive);
          assertNotNull(uRL0);
          
          Map<String, Archive.Entry> map0 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertEquals(10, map0.size());
          assertFalse(map0.isEmpty());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, file0);
          assertNotSame(mockFile0, mockFile1);
          assertTrue(explodedArchive0.recursive);
          assertNotNull(map0);
          
          explodedArchiveTests0.setrootFolder(explodedArchive0.root);
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, file0);
          assertNotSame(mockFile0, mockFile1);
          assertTrue(explodedArchive0.recursive);
          
          Map<String, Archive.Entry> map1 = explodedArchiveTests0.getEntriesMap(explodedArchive0);
          assertFalse(string0.equals((Object)string1));
          assertFalse(mockFile0.equals((Object)mockFile1));
          assertTrue(mockFile0.equals((Object)file0));
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1 == boolean2);
          assertFalse(map1.equals((Object)map0));
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          assertEquals(10, map1.size());
          assertFalse(map1.isEmpty());
          assertNotSame(string0, string1);
          assertNotSame(mockFile0, file0);
          assertNotSame(mockFile0, mockFile1);
          assertNotSame(map1, map0);
          assertTrue(explodedArchive0.recursive);
          assertNotNull(map1);
          
          ExplodedArchive explodedArchive1 = explodedArchiveTests0.getarchive();
          assertNull(explodedArchive1);
          
          explodedArchiveTests0.archive = explodedArchive0;
          assertTrue(mockFile0.isAbsolute());
          assertFalse(mockFile0.canWrite());
          assertTrue(mockFile0.canRead());
          assertEquals(0L, mockFile0.getTotalSpace());
          assertEquals(1392409281320L, mockFile0.lastModified());
          assertFalse(mockFile0.canExecute());
          assertEquals(0L, mockFile0.length());
          assertTrue(mockFile0.exists());
          assertEquals(0L, mockFile0.getFreeSpace());
          assertTrue(mockFile0.isDirectory());
          assertEquals("", mockFile0.getName());
          assertNull(mockFile0.getParent());
          assertEquals(0L, mockFile0.getUsableSpace());
          assertEquals("/", mockFile0.toString());
          assertFalse(mockFile0.isHidden());
          assertFalse(mockFile0.isFile());
          
          // Undeclared exception!
          try { 
            explodedArchiveTests0.temporaryFolder.create();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Unable to create temporary file
             //
             verifyException("java.io.File", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchiveTests explodedArchiveTests0 = new ExplodedArchiveTests();
      assertNotNull(explodedArchiveTests0);
      
      TemporaryFolder temporaryFolder0 = new TemporaryFolder(explodedArchiveTests0.rootFolder);
      assertNotNull(temporaryFolder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      explodedArchiveTests0.temporaryFolder = temporaryFolder0;
      String string0 = "..";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      explodedArchiveTests0.setrootFolder(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("..", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/..", mockFile0.getParent());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/../..", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      File file0 = explodedArchiveTests0.getrootFolder();
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/..", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/../..", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.isHidden());
      assertFalse(file0.exists());
      assertFalse(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("..", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertFalse(file0.canWrite());
      assertSame(file0, mockFile0);
      assertNotNull(file0);
      
      File file1 = explodedArchiveTests0.getrootFolder();
      assertEquals(0L, file1.getUsableSpace());
      assertEquals(0L, file1.lastModified());
      assertTrue(file1.isFile());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/../..", file1.toString());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals("..", file1.getName());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.canExecute());
      assertEquals("/home/CIN/lmps2/semanticConflicts/SMAT/output-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_5/..", file1.getParent());
      assertTrue(file1.isHidden());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertSame(file1, mockFile0);
      assertSame(file1, file0);
      assertNotNull(file1);
      
      JarFile jarFile0 = null;
      try {
        jarFile0 = new JarFile(mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }
}
