import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMinHeartbeatFrequency();
        java.lang.String str19 = mongoClientOptions17.getRequiredReplicaSetName();
        int int20 = mongoClientOptions17.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder26.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions42.getDbEncoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder47 = builder35.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder10.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder49 = builder48.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(false);
        java.lang.Class<?> wildcardClass21 = builder20.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minHeartbeatFrequency((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions10.getReadPreference();
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getSocketTimeout();
        int int21 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5000 + "'", int22 == 5000);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        int int15 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        boolean boolean17 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str18 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.springframework.core.env.Environment environment9 = null;
        com.mongodb.MongoClient mongoClient10 = mongoProperties0.createMongoClient(mongoClientOptions8, environment9);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions17.getDbDecoderFactory();
        int int19 = mongoClientOptions17.getHeartbeatConnectTimeout();
        java.lang.String str20 = mongoClientOptions17.toString();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions17, environment21);
        int int23 = mongoClientOptions17.getConnectTimeout();
        boolean boolean24 = mongoClientOptions17.isSocketKeepAlive();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClient10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10000 + "'", int23 == 10000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        java.lang.String str33 = mongoClientOptions29.getDescription();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = builder18.readPreference(readPreference34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.heartbeatConnectRetryFrequency(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        int int26 = mongoClientOptions19.getHeartbeatFrequency();
        int int27 = mongoClientOptions19.getMaxConnectionIdleTime();
        boolean boolean28 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder10.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.legacyDefaults();
        boolean boolean26 = mongoClientOptions6.equals((java.lang.Object) builder25);
        javax.net.SocketFactory socketFactory27 = mongoClientOptions6.getSocketFactory();
        boolean boolean28 = mongoClientOptions6.isAutoConnectRetry();
        int int29 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(socketFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5000 + "'", int29 == 5000);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        int int31 = mongoClientOptions29.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions29.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder22.readPreference(readPreference33);
        java.lang.Class<?> wildcardClass35 = builder34.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatThreadCount((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatSocketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions20.isAlwaysUseMBeans();
        int int25 = mongoClientOptions20.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        java.lang.String str27 = mongoProperties0.getUri();
        char[] charArray28 = mongoProperties0.getPassword();
        java.lang.String str29 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getUri();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.description("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder43 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder48 = builder45.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder45.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = mongoClientOptions49.getDbDecoderFactory();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        int int52 = mongoClientOptions49.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions49.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder54 = builder38.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder55 = builder27.readPreference(readPreference53);
        com.mongodb.MongoClientOptions.Builder builder56 = builder20.readPreference(readPreference53);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(dBDecoderFactory50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 500 + "'", int52 == 500);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder16.socketFactory(socketFactory50);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder55 = builder16.acceptableLatencyDifference((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUsername("test");
        mongoProperties0.setPort((java.lang.Integer) 15);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder26.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions42.getDbEncoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder47 = builder35.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder10.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder50 = builder10.heartbeatThreadCount((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder55.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder62 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder64.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder67 = builder64.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder64.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory69 = mongoClientOptions68.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions68.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder71 = builder61.writeConcern(writeConcern70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder50.writeConcern(writeConcern70);
        java.lang.Class<?> wildcardClass73 = writeConcern70.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(dBEncoderFactory69);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getUsername();
        java.lang.String str10 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        java.lang.String str21 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#,  ,  , a,  ]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        int int10 = mongoClientOptions6.getMinHeartbeatFrequency();
        long long11 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 500 + "'", int10 == 500);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        mongoProperties0.setUsername("test");
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions13.getDbDecoderFactory();
        int int15 = mongoClientOptions13.getSocketTimeout();
        long long16 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        int int17 = mongoClientOptions13.getConnectionsPerHost();
        int int18 = mongoClientOptions13.getHeartbeatThreadCount();
        boolean boolean19 = mongoClientOptions13.isAutoConnectRetry();
        java.lang.String str20 = mongoClientOptions13.toString();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions13, environment21);
        java.lang.String str23 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions39.getDbDecoderFactory();
        int int41 = mongoClientOptions39.getSocketTimeout();
        java.lang.String str42 = mongoClientOptions39.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder32.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        java.lang.String str21 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties24.createMongoClient(mongoClientOptions25, environment26);
        mongoProperties24.setGridFsDatabase("");
        java.lang.String str30 = mongoProperties24.getUsername();
        java.lang.String str31 = mongoProperties24.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        boolean boolean40 = mongoClientOptions38.isSocketKeepAlive();
        int int41 = mongoClientOptions38.getConnectionsPerHost();
        int int42 = mongoClientOptions38.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient43 = mongoProperties24.createMongoClient(mongoClientOptions38);
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties0.createMongoClient(mongoClientOptions38, environment44);
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder48.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder51 = builder48.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder48.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory53 = mongoClientOptions52.getDbDecoderFactory();
        int int54 = mongoClientOptions52.getSocketTimeout();
        long long55 = mongoClientOptions52.getMaxAutoConnectRetryTime();
        int int56 = mongoClientOptions52.getConnectionsPerHost();
        boolean boolean57 = mongoClientOptions52.isAutoConnectRetry();
        int int58 = mongoClientOptions52.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient59 = mongoProperties0.createMongoClient(mongoClientOptions52);
        int int60 = mongoClientOptions52.getHeartbeatThreadCount();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(dBDecoderFactory53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions6.getLocalThreshold();
        java.lang.String str22 = mongoClientOptions6.getDescription();
        java.lang.Class<?> wildcardClass23 = mongoClientOptions6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        int int22 = mongoClientOptions15.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions15.getDbDecoderFactory();
        int int24 = mongoClientOptions15.getLocalThreshold();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions6.getConnectTimeout();
        int int15 = mongoClientOptions6.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10000 + "'", int14 == 10000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        int int10 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray12 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties0.setPassword(charArray12);
        java.lang.String str14 = mongoProperties0.getDatabase();
        java.lang.String str15 = mongoProperties0.getUri();
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #, a,  ]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "mongodb://localhost/test" + "'", str15, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setAuthenticationDatabase("");
        mongoProperties38.setDatabase("hi!");
        java.lang.String str43 = mongoProperties38.getUsername();
        java.lang.Class<?> wildcardClass44 = mongoProperties38.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties38.createMongoClient(mongoClientOptions45, environment46);
        java.lang.String str48 = mongoProperties38.getMongoClientDatabase();
        java.lang.String str49 = mongoProperties38.getUri();
        char[] charArray50 = mongoProperties38.getPassword();
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions57.getDbDecoderFactory();
        int int59 = mongoClientOptions57.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient60 = mongoProperties38.createMongoClient(mongoClientOptions57);
        int int61 = mongoClientOptions57.getHeartbeatSocketTimeout();
        int int62 = mongoClientOptions57.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions57.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder35.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder25.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder66 = builder0.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.localThreshold(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder72 = builder68.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mongodb://localhost/test" + "'", str49, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setAuthenticationDatabase("");
        mongoProperties31.setDatabase("hi!");
        java.lang.String str36 = mongoProperties31.getUsername();
        java.lang.Class<?> wildcardClass37 = mongoProperties31.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties31.createMongoClient(mongoClientOptions38, environment39);
        java.lang.String str41 = mongoProperties31.getMongoClientDatabase();
        java.lang.String str42 = mongoProperties31.getUri();
        char[] charArray43 = mongoProperties31.getPassword();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder46.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions50.getDbDecoderFactory();
        int int52 = mongoClientOptions50.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient53 = mongoProperties31.createMongoClient(mongoClientOptions50);
        int int54 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions50.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions50.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder28.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder18.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.threadsAllowedToBlockForConnectionMultiplier(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions27.getDbDecoderFactory();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder20.readPreference(readPreference31);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory55 = mongoClientOptions54.getDbDecoderFactory();
        int int56 = mongoClientOptions54.getMaxConnectionIdleTime();
        int int57 = mongoClientOptions54.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference58 = mongoClientOptions54.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder43.dbEncoderFactory(dBEncoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder20.dbEncoderFactory(dBEncoderFactory59);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder63 = builder20.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBDecoderFactory55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 500 + "'", int57 == 500);
        org.junit.Assert.assertNotNull(readPreference58);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxAutoConnectRetryTime((long) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        boolean boolean24 = mongoClientOptions21.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder29 = builder10.connectionsPerHost((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatThreadCount(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        boolean boolean22 = mongoClientOptions15.isAlwaysUseMBeans();
        int int23 = mongoClientOptions15.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions15.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        int int17 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions31.getDbDecoderFactory();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions31.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder24.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime((long) 52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.heartbeatConnectRetryFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        java.lang.Class<?> wildcardClass22 = mongoClientOptions21.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxAutoConnectRetryTime((long) 'a');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getSocketTimeout();
        int int20 = mongoClientOptions15.getLocalThreshold();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder0.socketFactory(socketFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions31.getDbDecoderFactory();
        int int33 = mongoClientOptions31.getSocketTimeout();
        int int34 = mongoClientOptions31.getSocketTimeout();
        java.lang.String str35 = mongoClientOptions31.getRequiredReplicaSetName();
        int int36 = mongoClientOptions31.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder24.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.description("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder18.connectionsPerHost(97);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray12 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties0.setPassword(charArray12);
        java.lang.String str14 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #, a,  ]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int25 = mongoClientOptions19.getConnectTimeout();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10000 + "'", int25 == 10000);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        int int12 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        int int17 = mongoClientOptions10.getConnectTimeout();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        boolean boolean19 = mongoClientOptions10.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUsername("");
        mongoProperties0.setDatabase("hi!");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatThreadCount((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray12 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties0.setPassword(charArray12);
        java.lang.String str14 = mongoProperties0.getGridFsDatabase();
        java.lang.String str15 = mongoProperties0.getHost();
        java.lang.Integer int16 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #, a,  ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        int int22 = mongoClientOptions15.getMinConnectionsPerHost();
        java.lang.String str23 = mongoClientOptions15.getDescription();
        java.lang.String str24 = mongoClientOptions15.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        java.lang.String str21 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("hi!");
        java.lang.Class<?> wildcardClass24 = mongoProperties0.getClass();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        int int22 = mongoClientOptions15.getMinConnectionsPerHost();
        int int23 = mongoClientOptions15.getHeartbeatFrequency();
        java.lang.String str24 = mongoClientOptions15.toString();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions19.getDbDecoderFactory();
        int int25 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        int int26 = mongoClientOptions19.getHeartbeatSocketTimeout();
        boolean boolean27 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        int int38 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.writeConcern(writeConcern39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder20.heartbeatConnectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder43 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder46 = builder45.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder48 = builder45.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder45.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory50 = mongoClientOptions49.getDbDecoderFactory();
        int int51 = mongoClientOptions49.getMaxConnectionIdleTime();
        int int52 = mongoClientOptions49.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions49.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions49.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory55 = mongoClientOptions49.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder20.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder20.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertNotNull(writeConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertNotNull(dBDecoderFactory50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 500 + "'", int52 == 500);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(socketFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setAuthenticationDatabase("");
        mongoProperties10.setDatabase("hi!");
        java.lang.String str15 = mongoProperties10.getUsername();
        java.lang.String str16 = mongoProperties10.getDatabase();
        java.lang.String str17 = mongoProperties10.getUsername();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        int int26 = mongoClientOptions24.getMaxConnectionIdleTime();
        boolean boolean27 = mongoClientOptions24.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties10.createMongoClient(mongoClientOptions24, environment28);
        int int30 = mongoClientOptions24.getHeartbeatFrequency();
        int int31 = mongoClientOptions24.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions24, environment32);
        javax.net.SocketFactory socketFactory34 = mongoClientOptions24.getSocketFactory();
        int int35 = mongoClientOptions24.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20000 + "'", int35 == 20000);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.threadsAllowedToBlockForConnectionMultiplier(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder34.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int22 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder16.heartbeatConnectRetryFrequency(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("");
        mongoProperties21.setDatabase("hi!");
        java.lang.String str26 = mongoProperties21.getUsername();
        mongoProperties21.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties21.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        int int40 = mongoClientOptions38.getHeartbeatConnectTimeout();
        java.lang.String str41 = mongoClientOptions38.toString();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties21.createMongoClient(mongoClientOptions38, environment42);
        java.lang.String str44 = mongoClientOptions38.getDescription();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions38.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder18.writeConcern(writeConcern45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        int int10 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions6.getSocketFactory();
        int int11 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(socketFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        char[] charArray8 = mongoProperties0.getPassword();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(charArray8);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatConnectTimeout(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.heartbeatConnectRetryFrequency(52);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties25.createMongoClient(mongoClientOptions26, environment27);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder31.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder34 = builder31.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder31.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions35.getDbEncoderFactory();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties25.createMongoClient(mongoClientOptions35, environment37);
        int int39 = mongoClientOptions35.getAcceptableLatencyDifference();
        int int40 = mongoClientOptions35.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions35.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory42 = mongoClientOptions35.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder24.socketFactory(socketFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder24.heartbeatSocketTimeout(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5000 + "'", int40 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertNotNull(socketFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties25.setAuthenticationDatabase("");
        mongoProperties25.setDatabase("hi!");
        java.lang.String str30 = mongoProperties25.getUsername();
        mongoProperties25.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties25.createMongoClient(mongoClientOptions33, environment34);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions42.getDbDecoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatConnectTimeout();
        java.lang.String str45 = mongoClientOptions42.toString();
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties25.createMongoClient(mongoClientOptions42, environment46);
        java.lang.String str48 = mongoClientOptions42.getDescription();
        com.mongodb.WriteConcern writeConcern49 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder50 = builder24.writeConcern(writeConcern49);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions57.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions57.getReadPreference();
        java.lang.String str60 = mongoClientOptions57.getRequiredReplicaSetName();
        long long61 = mongoClientOptions57.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory62 = mongoClientOptions57.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder24.socketFactory(socketFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.connectionsPerHost(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(writeConcern49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(socketFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getMaxConnectionLifeTime();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 10);
        mongoProperties0.clearPassword();
        java.lang.String str14 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions6.getConnectTimeout();
        java.lang.String str13 = mongoClientOptions6.toString();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int15 = mongoClientOptions6.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions19.getDbDecoderFactory();
        int int25 = mongoClientOptions19.getSocketTimeout();
        int int26 = mongoClientOptions19.getMaxWaitTime();
        int int27 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions19.getReadPreference();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readPreference28);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectRetryFrequency((int) '#');
        java.lang.Class<?> wildcardClass35 = builder32.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectRetryFrequency((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setUri("test");
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties19.setAuthenticationDatabase("");
        java.lang.String str22 = mongoProperties19.getUri();
        java.lang.String str23 = mongoProperties19.getGridFsDatabase();
        mongoProperties19.setPort((java.lang.Integer) 27017);
        java.lang.String str26 = mongoProperties19.getMongoClientDatabase();
        mongoProperties19.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder31.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder34 = builder31.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder31.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions35.getDbDecoderFactory();
        int int37 = mongoClientOptions35.getMaxConnectionIdleTime();
        int int38 = mongoClientOptions35.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions35.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions35.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory41 = mongoClientOptions35.getSocketFactory();
        java.lang.String str42 = mongoClientOptions35.toString();
        com.mongodb.MongoClient mongoClient43 = mongoProperties19.createMongoClient(mongoClientOptions35);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "test" + "'", str26, "test");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(socketFactory41);
        org.junit.Assert.assertNotNull(mongoClient43);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        int int17 = mongoClientOptions10.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties8.createMongoClient(mongoClientOptions9, environment10);
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties8.createMongoClient(mongoClientOptions18, environment20);
        int int22 = mongoClientOptions18.getSocketTimeout();
        int int23 = mongoClientOptions18.getLocalThreshold();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        int int27 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.String str29 = mongoClientOptions18.getDescription();
        int int30 = mongoClientOptions18.getHeartbeatConnectTimeout();
        int int31 = mongoClientOptions18.getConnectionsPerHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str24 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "mongodb://localhost/test" + "'", str24, "mongodb://localhost/test");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        java.lang.String str9 = mongoClientOptions6.getDescription();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.dbDecoderFactory(dBDecoderFactory22);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setAuthenticationDatabase("");
        java.lang.String str27 = mongoProperties24.getGridFsDatabase();
        mongoProperties24.setHost("test");
        java.lang.String str30 = mongoProperties24.getMongoClientDatabase();
        java.lang.Integer int31 = mongoProperties24.getPort();
        mongoProperties24.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties34 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties34.setAuthenticationDatabase("");
        mongoProperties34.setDatabase("hi!");
        java.lang.String str39 = mongoProperties34.getUsername();
        java.lang.String str40 = mongoProperties34.getDatabase();
        java.lang.String str41 = mongoProperties34.getUsername();
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        int int50 = mongoClientOptions48.getMaxConnectionIdleTime();
        boolean boolean51 = mongoClientOptions48.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment52 = null;
        com.mongodb.MongoClient mongoClient53 = mongoProperties34.createMongoClient(mongoClientOptions48, environment52);
        int int54 = mongoClientOptions48.getHeartbeatFrequency();
        int int55 = mongoClientOptions48.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties24.createMongoClient(mongoClientOptions48, environment56);
        javax.net.SocketFactory socketFactory58 = mongoClientOptions48.getSocketFactory();
        javax.net.SocketFactory socketFactory59 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder10.socketFactory(socketFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder10.localThreshold(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "test" + "'", str30, "test");
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5000 + "'", int54 == 5000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertNotNull(socketFactory58);
        org.junit.Assert.assertNotNull(socketFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder30.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions34.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder27.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder61.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder64 = builder61.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder61.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder58.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder41.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder27.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder14.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder73 = builder14.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder75 = builder14.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        int int30 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str31 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions6.getDbEncoderFactory();
        int int33 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions6.getConnectTimeout();
        int int35 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10000 + "'", int34 == 10000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties44.createMongoClient(mongoClientOptions45, environment46);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions54.getDbEncoderFactory();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties44.createMongoClient(mongoClientOptions54, environment56);
        java.lang.String str58 = mongoClientOptions54.getDescription();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions54.getReadPreference();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions54.getWriteConcern();
        int int61 = mongoClientOptions54.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern62 = mongoClientOptions54.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder63 = builder43.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder20.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder66 = builder20.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 500 + "'", int61 == 500);
        org.junit.Assert.assertNotNull(writeConcern62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.maxConnectionLifeTime((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.heartbeatFrequency(10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        java.lang.Class<?> wildcardClass29 = mongoProperties23.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties23.createMongoClient(mongoClientOptions30, environment31);
        java.lang.String str33 = mongoProperties23.getMongoClientDatabase();
        java.lang.String str34 = mongoProperties23.getUri();
        char[] charArray35 = mongoProperties23.getPassword();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions42.getDbDecoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient45 = mongoProperties23.createMongoClient(mongoClientOptions42);
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder47 = builder16.dbDecoderFactory(dBDecoderFactory46);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectRetryFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        int int23 = mongoClientOptions19.getSocketTimeout();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getSocketTimeout();
        java.lang.Class<?> wildcardClass28 = mongoClientOptions19.getClass();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder10.build();
        int int20 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int28 = mongoClientOptions25.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions25.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.connectTimeout(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        int int16 = mongoClientOptions10.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions10.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions10.getDbDecoderFactory();
        java.lang.Class<?> wildcardClass19 = mongoClientOptions10.getClass();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder18.socketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.localThreshold((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.requiredReplicaSetName("");
        java.lang.Class<?> wildcardClass19 = builder10.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.acceptableLatencyDifference(1);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder37.build();
        int int39 = mongoClientOptions38.getMaxConnectionLifeTime();
        int int40 = mongoClientOptions38.getThreadsAllowedToBlockForConnectionMultiplier();
        long long41 = mongoClientOptions38.getMaxAutoConnectRetryTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder20.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.maxConnectionLifeTime(5000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder16.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.maxWaitTime((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.writeConcern(writeConcern25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatThreadCount((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "test" + "'", str9, "test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        int int23 = mongoClientOptions19.getSocketTimeout();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.Class<?> wildcardClass26 = mongoClientOptions19.getClass();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setHost("");
        mongoProperties0.clearPassword();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        int int17 = mongoClientOptions10.getConnectTimeout();
        boolean boolean18 = mongoClientOptions10.isAutoConnectRetry();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        boolean boolean20 = mongoClientOptions10.isSocketKeepAlive();
        int int21 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int22 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5000 + "'", int22 == 5000);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMaxWaitTime();
        java.lang.String str21 = mongoClientOptions19.getDescription();
        int int22 = mongoClientOptions19.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference(120000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions39.getDbDecoderFactory();
        int int41 = mongoClientOptions39.getSocketTimeout();
        java.lang.String str42 = mongoClientOptions39.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder32.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder23.localThreshold((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        int int16 = mongoClientOptions10.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions10.getWriteConcern();
        java.lang.String str18 = mongoClientOptions10.toString();
        java.lang.String str19 = mongoClientOptions10.toString();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertNotNull(writeConcern17);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        boolean boolean18 = mongoClientOptions15.isSocketKeepAlive();
        int int19 = mongoClientOptions15.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120000 + "'", int19 == 120000);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        long long12 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        boolean boolean13 = mongoClientOptions6.isSocketKeepAlive();
        int int14 = mongoClientOptions6.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(1);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder24);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(27017);
        boolean boolean45 = mongoClientOptions6.equals((java.lang.Object) 27017);
        javax.net.SocketFactory socketFactory46 = mongoClientOptions6.getSocketFactory();
        boolean boolean47 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(socketFactory46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        java.lang.Integer int26 = mongoProperties0.getPort();
        java.lang.Integer int27 = mongoProperties0.getPort();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        int int16 = mongoClientOptions10.getHeartbeatFrequency();
        int int17 = mongoClientOptions10.getSocketTimeout();
        int int18 = mongoClientOptions10.getMaxWaitTime();
        int int19 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean20 = mongoClientOptions10.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getConnectionsPerHost();
        java.lang.String str18 = mongoClientOptions10.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder16.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        java.lang.String str31 = mongoClientOptions29.getRequiredReplicaSetName();
        int int32 = mongoClientOptions29.getMaxConnectionIdleTime();
        int int33 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        int int34 = mongoClientOptions29.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20000 + "'", int34 == 20000);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setAuthenticationDatabase("");
        mongoProperties17.setDatabase("hi!");
        java.lang.String str22 = mongoProperties17.getUsername();
        java.lang.Class<?> wildcardClass23 = mongoProperties17.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions24 = null;
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties17.createMongoClient(mongoClientOptions24, environment25);
        java.lang.String str27 = mongoProperties17.getMongoClientDatabase();
        java.lang.String str28 = mongoProperties17.getUri();
        char[] charArray29 = mongoProperties17.getPassword();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions36.getDbDecoderFactory();
        int int38 = mongoClientOptions36.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient39 = mongoProperties17.createMongoClient(mongoClientOptions36);
        int int40 = mongoClientOptions36.getHeartbeatSocketTimeout();
        int int41 = mongoClientOptions36.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder14.dbDecoderFactory(dBDecoderFactory42);
        javax.net.SocketFactory socketFactory44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder43.socketFactory(socketFactory44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier(5);
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.toString();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions6.getReadPreference();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        int int35 = mongoClientOptions10.getMaxWaitTime();
        int int36 = mongoClientOptions10.getHeartbeatConnectTimeout();
        boolean boolean37 = mongoClientOptions10.isSocketKeepAlive();
        java.lang.String str38 = mongoClientOptions10.toString();
        int int39 = mongoClientOptions10.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 120000 + "'", int39 == 120000);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions24.getReadPreference();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions24.getReadPreference();
        int int31 = mongoClientOptions24.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions24);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions39.getWriteConcern();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions39.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions39);
        java.lang.String str45 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        java.lang.String str20 = mongoClientOptions18.getDescription();
        long long21 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18, environment22);
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str28 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int14 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder10.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions14.getDbDecoderFactory();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.maxConnectionLifeTime(0);
        boolean boolean40 = mongoClientOptions14.equals((java.lang.Object) builder33);
        int int41 = mongoClientOptions14.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder6.connectionsPerHost((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        int int27 = mongoClientOptions25.getMaxConnectionIdleTime();
        int int28 = mongoClientOptions25.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions25.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder6.dbEncoderFactory(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int14 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        java.lang.Class<?> wildcardClass16 = mongoClientOptions6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean10 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean11 = mongoClientOptions6.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions10.getSocketTimeout();
        java.lang.String str20 = mongoClientOptions10.toString();
        boolean boolean21 = mongoClientOptions10.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        java.lang.String str13 = mongoClientOptions6.getDescription();
        int int14 = mongoClientOptions6.getSocketTimeout();
        int int15 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int16 = mongoClientOptions6.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions12.getDbDecoderFactory();
        int int14 = mongoClientOptions12.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions12.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder5.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder5.maxWaitTime(5000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder10.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder39.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder52.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder55 = builder52.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder52.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions56.getDbEncoderFactory();
        int int58 = mongoClientOptions56.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions56.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder47.dbEncoderFactory(dBEncoderFactory59);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        int int62 = mongoClientOptions61.getHeartbeatThreadCount();
        int int63 = mongoClientOptions61.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory64 = mongoClientOptions61.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder65 = builder26.socketFactory(socketFactory64);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder67 = builder65.minHeartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(socketFactory64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.localThreshold(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder46 = builder14.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.legacyDefaults();
        boolean boolean26 = mongoClientOptions6.equals((java.lang.Object) builder25);
        int int27 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int28 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean30 = mongoClientOptions6.equals((java.lang.Object) 0.0d);
        int int31 = mongoClientOptions6.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties17.createMongoClient(mongoClientOptions18, environment19);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions27.getDbEncoderFactory();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties17.createMongoClient(mongoClientOptions27, environment29);
        int int31 = mongoClientOptions27.getAcceptableLatencyDifference();
        int int32 = mongoClientOptions27.getHeartbeatFrequency();
        int int33 = mongoClientOptions27.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions27.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions27.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder16.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5000 + "'", int32 == 5000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10000 + "'", int33 == 10000);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties8.createMongoClient(mongoClientOptions9, environment10);
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties8.createMongoClient(mongoClientOptions18, environment20);
        int int22 = mongoClientOptions18.getSocketTimeout();
        int int23 = mongoClientOptions18.getLocalThreshold();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        int int27 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions18);
        int int29 = mongoClientOptions18.getSocketTimeout();
        int int30 = mongoClientOptions18.getMinHeartbeatFrequency();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setDatabase("");
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder3 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions9.getDbEncoderFactory();
        boolean boolean11 = mongoClientOptions9.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions9.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder13 = builder0.dbDecoderFactory(dBDecoderFactory12);
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder15 = builder13.dbEncoderFactory(dBEncoderFactory14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions6.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 120000 + "'", int11 == 120000);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder22.acceptableLatencyDifference((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: acceptableLatencyDifference must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.clearPassword();
        mongoProperties0.setUri("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder33.build();
        int int35 = mongoClientOptions34.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern36 = mongoClientOptions34.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder37 = builder14.writeConcern(writeConcern36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.localThreshold((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertNotNull(writeConcern36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount(15);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency(97);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder24.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        int int25 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder16.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions39.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder16.dbDecoderFactory(dBDecoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder16.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxAutoConnectRetryTime((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions6.getSocketTimeout();
        int int15 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder3 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions9.getSocketFactory();
        int int12 = mongoClientOptions9.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions9.toString();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions9.getSocketFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions9, environment15);
        int int17 = mongoClientOptions9.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder30.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions34.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder27.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder61.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder64 = builder61.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder61.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder58.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder41.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder27.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder14.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder72 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder75 = builder74.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder77 = builder74.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions78 = builder74.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory79 = mongoClientOptions78.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern80 = mongoClientOptions78.getWriteConcern();
        int int81 = mongoClientOptions78.getConnectTimeout();
        int int82 = mongoClientOptions78.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern83 = mongoClientOptions78.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder84 = builder71.writeConcern(writeConcern83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder71.maxWaitTime(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(mongoClientOptions78);
        org.junit.Assert.assertNotNull(dBDecoderFactory79);
        org.junit.Assert.assertNotNull(writeConcern80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10000 + "'", int81 == 10000);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(writeConcern83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("");
        mongoProperties21.setDatabase("hi!");
        java.lang.String str26 = mongoProperties21.getUsername();
        mongoProperties21.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties21.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        int int40 = mongoClientOptions38.getHeartbeatConnectTimeout();
        java.lang.String str41 = mongoClientOptions38.toString();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties21.createMongoClient(mongoClientOptions38, environment42);
        javax.net.SocketFactory socketFactory44 = mongoClientOptions38.getSocketFactory();
        int int45 = mongoClientOptions38.getSocketTimeout();
        boolean boolean46 = mongoClientOptions6.equals((java.lang.Object) mongoClientOptions38);
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.minConnectionsPerHost(0);
        boolean boolean58 = mongoClientOptions6.equals((java.lang.Object) builder57);
        int int59 = mongoClientOptions6.getLocalThreshold();
        boolean boolean60 = mongoClientOptions6.isSocketKeepAlive();
        int int61 = mongoClientOptions6.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 120000 + "'", int61 == 120000);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions6.getHeartbeatThreadCount();
        int int14 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions6.getMinConnectionsPerHost();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder36.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions40.getDbEncoderFactory();
        int int42 = mongoClientOptions40.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions40.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions40.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder33.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder33.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.alwaysUseMBeans(false);
        boolean boolean50 = mongoClientOptions6.equals((java.lang.Object) builder49);
        com.mongodb.DBEncoderFactory dBEncoderFactory51 = mongoClientOptions6.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory51);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder16.build();
        java.lang.Class<?> wildcardClass22 = builder16.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str9 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions6.getReadPreference();
        int int12 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionLifeTime(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.heartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.connectTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        int int11 = mongoClientOptions6.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        int int50 = mongoClientOptions48.getMaxConnectionIdleTime();
        int int51 = mongoClientOptions48.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference52 = mongoClientOptions48.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder53 = builder37.readPreference(readPreference52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder37.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder58 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.description("");
        com.mongodb.MongoClientOptions.Builder builder72 = builder68.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder73 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder76 = builder75.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder78 = builder75.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder75.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory80 = mongoClientOptions79.getDbDecoderFactory();
        int int81 = mongoClientOptions79.getMaxConnectionIdleTime();
        int int82 = mongoClientOptions79.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference83 = mongoClientOptions79.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder84 = builder68.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder55.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder26.readPreference(readPreference83);
        com.mongodb.MongoClientOptions.Builder builder88 = builder26.maxConnectionLifeTime((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 500 + "'", int51 == 500);
        org.junit.Assert.assertNotNull(readPreference52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertNotNull(dBDecoderFactory80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 500 + "'", int82 == 500);
        org.junit.Assert.assertNotNull(readPreference83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 97);
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.setHost("hi!");
        mongoProperties0.setUri("hi!");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        long long11 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str12 = mongoClientOptions6.getDescription();
        int int13 = mongoClientOptions6.getMinConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        mongoProperties0.setUsername("test");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions32.getDbEncoderFactory();
        boolean boolean34 = mongoClientOptions32.isSocketKeepAlive();
        int int35 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean36 = mongoClientOptions32.isAlwaysUseMBeans();
        int int37 = mongoClientOptions32.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions32, environment38);
        char[] charArray40 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(charArray40);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int10 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int11 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions6.getConnectionsPerHost();
        int int13 = mongoClientOptions6.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder5 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder7.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions11.getDbEncoderFactory();
        boolean boolean13 = mongoClientOptions11.isSocketKeepAlive();
        int int14 = mongoClientOptions11.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions11.getDbDecoderFactory();
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions11);
        int int17 = mongoClientOptions11.getMaxWaitTime();
        java.lang.String str18 = mongoClientOptions11.getDescription();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions12, environment14);
        java.lang.Integer int16 = mongoProperties0.getPort();
        java.lang.String str17 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions6.getSocketFactory();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str11 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder18.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        mongoProperties0.setUri("");
        java.lang.String str26 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder20.dbDecoderFactory(dBDecoderFactory30);
        java.lang.Class<?> wildcardClass32 = dBDecoderFactory30.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions6.getDescription();
        java.lang.String str12 = mongoClientOptions6.getDescription();
        int int13 = mongoClientOptions6.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("test");
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxConnectionLifeTime(120000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions6.getDbEncoderFactory();
        int int12 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions6.getMinConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions20.getDbDecoderFactory();
        int int22 = mongoClientOptions20.getSocketTimeout();
        int int23 = mongoClientOptions20.getSocketTimeout();
        java.lang.String str24 = mongoClientOptions20.getRequiredReplicaSetName();
        int int25 = mongoClientOptions20.getAcceptableLatencyDifference();
        int int26 = mongoClientOptions20.getHeartbeatFrequency();
        int int27 = mongoClientOptions20.getConnectionsPerHost();
        boolean boolean28 = mongoClientOptions6.equals((java.lang.Object) int27);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        java.lang.String str10 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mongodb://localhost/test" + "'", str10, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions6.isAutoConnectRetry();
        int int13 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int14 = mongoClientOptions6.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions6.getWriteConcern();
        java.lang.Class<?> wildcardClass16 = writeConcern15.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        boolean boolean24 = mongoClientOptions21.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.socketTimeout((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder10.heartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass10 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.autoConnectRetry(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        java.lang.Class<?> wildcardClass29 = mongoProperties23.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties23.createMongoClient(mongoClientOptions30, environment31);
        java.lang.String str33 = mongoProperties23.getMongoClientDatabase();
        java.lang.String str34 = mongoProperties23.getUri();
        char[] charArray35 = mongoProperties23.getPassword();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions42.getDbDecoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient45 = mongoProperties23.createMongoClient(mongoClientOptions42);
        int int46 = mongoClientOptions42.getHeartbeatSocketTimeout();
        int int47 = mongoClientOptions42.getHeartbeatThreadCount();
        int int48 = mongoClientOptions42.getHeartbeatConnectRetryFrequency();
        boolean boolean49 = mongoClientOptions42.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory50 = mongoClientOptions42.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder22.dbEncoderFactory(dBEncoderFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder22.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 500 + "'", int48 == 500);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        java.lang.String str19 = mongoClientOptions15.getDescription();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions15.getReadPreference();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions15.getWriteConcern();
        boolean boolean22 = mongoClientOptions15.isAlwaysUseMBeans();
        int int23 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions15);
        int int25 = mongoClientOptions15.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions15.getSocketFactory();
        java.lang.String str27 = mongoClientOptions15.getDescription();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        mongoProperties0.setPort((java.lang.Integer) 5);
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        com.mongodb.MongoClient mongoClient6 = mongoProperties0.createMongoClient(mongoClientOptions5);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("");
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClient6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder3 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions9.getSocketFactory();
        int int12 = mongoClientOptions9.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions9.toString();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions9.getSocketFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions9, environment15);
        mongoProperties0.clearPassword();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        java.lang.String str31 = mongoClientOptions30.toString();
        java.lang.String str32 = mongoClientOptions30.getRequiredReplicaSetName();
        boolean boolean33 = mongoClientOptions30.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("");
        mongoProperties9.setDatabase("hi!");
        java.lang.String str14 = mongoProperties9.getUsername();
        java.lang.Class<?> wildcardClass15 = mongoProperties9.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties9.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties9.getMongoClientDatabase();
        java.lang.String str20 = mongoProperties9.getUri();
        char[] charArray21 = mongoProperties9.getPassword();
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions28.getDbDecoderFactory();
        int int30 = mongoClientOptions28.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient31 = mongoProperties9.createMongoClient(mongoClientOptions28);
        int int32 = mongoClientOptions28.getHeartbeatSocketTimeout();
        int int33 = mongoClientOptions28.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions28.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder6.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount(500);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatFrequency(120000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "mongodb://localhost/test" + "'", str20, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        java.lang.String str21 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#,  ,  , a,  ]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        int int25 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder16.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.heartbeatThreadCount(10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        mongoProperties0.setHost("hi!");
        java.lang.String str15 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        int int16 = mongoClientOptions10.getHeartbeatFrequency();
        int int17 = mongoClientOptions10.getSocketTimeout();
        int int18 = mongoClientOptions10.getMaxWaitTime();
        java.lang.String str19 = mongoClientOptions10.getRequiredReplicaSetName();
        int int20 = mongoClientOptions10.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions10.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        javax.net.SocketFactory socketFactory17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketFactory(socketFactory17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUsername("");
        mongoProperties0.setHost("test");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        int int16 = mongoClientOptions10.getHeartbeatFrequency();
        int int17 = mongoClientOptions10.getMaxConnectionIdleTime();
        java.lang.String str18 = mongoClientOptions10.toString();
        java.lang.Class<?> wildcardClass19 = mongoClientOptions10.getClass();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectRetryFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions13.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions6.getDbEncoderFactory();
        int int11 = mongoClientOptions6.getHeartbeatFrequency();
        int int12 = mongoClientOptions6.getHeartbeatThreadCount();
        int int13 = mongoClientOptions6.getAcceptableLatencyDifference();
        boolean boolean14 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions6.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference(20000);
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) builder16);
        boolean boolean20 = mongoClientOptions6.isAlwaysUseMBeans();
        int int21 = mongoClientOptions6.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxConnectionIdleTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder25.maxConnectionLifeTime(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 97);
        java.lang.String str11 = mongoProperties0.getHost();
        java.lang.String str12 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        java.lang.String str22 = mongoClientOptions19.toString();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder31 = builder23.description("test");
        boolean boolean32 = mongoClientOptions19.equals((java.lang.Object) "test");
        int int33 = mongoClientOptions19.getMinHeartbeatFrequency();
        int int34 = mongoClientOptions19.getLocalThreshold();
        java.lang.String str35 = mongoClientOptions19.getDescription();
        com.mongodb.MongoClient mongoClient36 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int37 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions32.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder19.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder6.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getConnectionsPerHost();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        int int19 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties10.createMongoClient(mongoClientOptions11, environment12);
        mongoProperties10.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties10.getUsername();
        java.lang.String str17 = mongoProperties10.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        boolean boolean26 = mongoClientOptions24.isSocketKeepAlive();
        int int27 = mongoClientOptions24.getConnectionsPerHost();
        int int28 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient29 = mongoProperties10.createMongoClient(mongoClientOptions24);
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions24, environment30);
        int int32 = mongoClientOptions24.getLocalThreshold();
        int int33 = mongoClientOptions24.getSocketTimeout();
        java.lang.String str34 = mongoClientOptions24.toString();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder19.build();
        int int21 = mongoClientOptions20.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setAuthenticationDatabase("");
        mongoProperties12.setDatabase("hi!");
        char[] charArray22 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties12.setPassword(charArray22);
        java.lang.Integer int24 = mongoProperties12.getPort();
        java.lang.Integer int25 = mongoProperties12.getPort();
        mongoProperties12.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setAuthenticationDatabase("");
        mongoProperties28.setDatabase("hi!");
        java.lang.String str33 = mongoProperties28.getUsername();
        java.lang.Integer int34 = mongoProperties28.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setAuthenticationDatabase("");
        mongoProperties35.setDatabase("hi!");
        java.lang.String str40 = mongoProperties35.getUsername();
        mongoProperties35.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray47 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties35.setPassword(charArray47);
        mongoProperties28.setPassword(charArray47);
        mongoProperties12.setPassword(charArray47);
        mongoProperties0.setPassword(charArray47);
        java.lang.String str52 = mongoProperties0.getUsername();
        mongoProperties0.setHost("test");
        java.lang.String str55 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#, #, a,  ]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "mongodb://localhost/test" + "'", str52, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxWaitTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        java.lang.String str31 = mongoClientOptions30.toString();
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions30.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions30.getDbDecoderFactory();
        int int35 = mongoClientOptions30.getAcceptableLatencyDifference();
        int int36 = mongoClientOptions30.getHeartbeatFrequency();
        long long37 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5000 + "'", int36 == 5000);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int2 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(int2);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        int int17 = mongoClientOptions10.getConnectTimeout();
        boolean boolean18 = mongoClientOptions10.isAutoConnectRetry();
        int int19 = mongoClientOptions10.getHeartbeatConnectTimeout();
        boolean boolean20 = mongoClientOptions10.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.localThreshold(120000);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatThreadCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatSocketTimeout(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions6.isAutoConnectRetry();
        int int13 = mongoClientOptions6.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass12 = mongoProperties0.getFieldNamingStrategy();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean16 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getHost();
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int13 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int14 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder10.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions14.getDbDecoderFactory();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        int int21 = mongoClientOptions14.getConnectionsPerHost();
        java.lang.String str22 = mongoClientOptions14.toString();
        int int23 = mongoClientOptions14.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        java.lang.String str19 = mongoProperties0.getUri();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "mongodb://localhost/test" + "'", str19, "mongodb://localhost/test");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.connectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatThreadCount(5);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minHeartbeatFrequency((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder17.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder29.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions47.getDbDecoderFactory();
        int int49 = mongoClientOptions47.getMaxConnectionIdleTime();
        int int50 = mongoClientOptions47.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions47.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder29.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder57 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder59.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder62 = builder59.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder59.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory64 = mongoClientOptions63.getDbDecoderFactory();
        int int65 = mongoClientOptions63.getSocketTimeout();
        int int66 = mongoClientOptions63.getSocketTimeout();
        java.lang.String str67 = mongoClientOptions63.getRequiredReplicaSetName();
        int int68 = mongoClientOptions63.getAcceptableLatencyDifference();
        int int69 = mongoClientOptions63.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions63.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder56.dbEncoderFactory(dBEncoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder73 = builder56.minConnectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 500 + "'", int50 == 500);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(dBDecoderFactory64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5000 + "'", int69 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setHost("test");
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        long long11 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str12 = mongoClientOptions6.getDescription();
        int int13 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getMinConnectionsPerHost();
        int int18 = mongoClientOptions10.getSocketTimeout();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        int int20 = mongoClientOptions10.getConnectTimeout();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions10.getSocketFactory();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertNotNull(socketFactory21);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        int int35 = mongoClientOptions10.getMaxWaitTime();
        int int36 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions10.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.socketTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder45 = builder42.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder42.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder39.writeConcern(writeConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.description("");
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder71 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder74 = builder73.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder76 = builder73.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder73.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory78 = mongoClientOptions77.getDbDecoderFactory();
        int int79 = mongoClientOptions77.getMaxConnectionIdleTime();
        int int80 = mongoClientOptions77.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference81 = mongoClientOptions77.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder82 = builder70.readPreference(readPreference81);
        com.mongodb.MongoClientOptions.Builder builder83 = builder39.readPreference(readPreference81);
        com.mongodb.MongoClientOptions.Builder builder84 = builder28.readPreference(readPreference81);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertNotNull(dBDecoderFactory78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 500 + "'", int80 == 500);
        org.junit.Assert.assertNotNull(readPreference81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        int int15 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        boolean boolean17 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions6.isAutoConnectRetry();
        boolean boolean19 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        java.lang.String str24 = mongoClientOptions19.getDescription();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMinHeartbeatFrequency();
        int int19 = mongoClientOptions17.getMaxConnectionIdleTime();
        int int20 = mongoClientOptions17.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder3 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions9.getSocketFactory();
        int int12 = mongoClientOptions9.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions9.toString();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions9.getSocketFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions9, environment15);
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions9.getWriteConcern();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions9.getSocketFactory();
        java.lang.Class<?> wildcardClass19 = mongoClientOptions9.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        java.lang.Integer int26 = mongoProperties0.getPort();
        java.lang.Integer int27 = mongoProperties0.getPort();
        char[] charArray29 = new char[] { ' ' };
        mongoProperties0.setPassword(charArray29);
        java.lang.Class<?> wildcardClass31 = charArray29.getClass();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[ ]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.maxWaitTime(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str9 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference11 = mongoClientOptions6.getReadPreference();
        int int12 = mongoClientOptions6.getMinConnectionsPerHost();
        int int13 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(readPreference11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder25.build();
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties38.setAuthenticationDatabase("");
        mongoProperties38.setDatabase("hi!");
        java.lang.String str43 = mongoProperties38.getUsername();
        java.lang.Class<?> wildcardClass44 = mongoProperties38.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties38.createMongoClient(mongoClientOptions45, environment46);
        java.lang.String str48 = mongoProperties38.getMongoClientDatabase();
        java.lang.String str49 = mongoProperties38.getUri();
        char[] charArray50 = mongoProperties38.getPassword();
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions57.getDbDecoderFactory();
        int int59 = mongoClientOptions57.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient60 = mongoProperties38.createMongoClient(mongoClientOptions57);
        int int61 = mongoClientOptions57.getHeartbeatSocketTimeout();
        int int62 = mongoClientOptions57.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory63 = mongoClientOptions57.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder35.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder25.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder66 = builder0.socketFactory(socketFactory63);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.heartbeatConnectRetryFrequency(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "mongodb://localhost/test" + "'", str49, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20000 + "'", int59 == 20000);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20000 + "'", int61 == 20000);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(socketFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNull(wildcardClass3);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.writeConcern(writeConcern25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder10.minHeartbeatFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("");
        mongoProperties16.setDatabase("hi!");
        java.lang.String str21 = mongoProperties16.getUsername();
        java.lang.Integer int22 = mongoProperties16.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        mongoProperties23.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray35 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties23.setPassword(charArray35);
        mongoProperties16.setPassword(charArray35);
        mongoProperties0.setPassword(charArray35);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions47.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions47.getReadPreference();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions47, environment50);
        int int52 = mongoClientOptions47.getHeartbeatFrequency();
        int int53 = mongoClientOptions47.getLocalThreshold();
        int int54 = mongoClientOptions47.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5000 + "'", int52 == 5000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder21.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions33 = null;
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties32.createMongoClient(mongoClientOptions33, environment34);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions42.getDbEncoderFactory();
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties32.createMongoClient(mongoClientOptions42, environment44);
        java.lang.String str46 = mongoClientOptions42.getDescription();
        com.mongodb.ReadPreference readPreference47 = mongoClientOptions42.getReadPreference();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions42.getWriteConcern();
        int int49 = mongoClientOptions42.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions42.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder51 = builder31.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder10.writeConcern(writeConcern50);
        com.mongodb.MongoClientOptions.Builder builder54 = builder10.minConnectionsPerHost(0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime(97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(readPreference47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 500 + "'", int49 == 500);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("");
        mongoProperties0.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass15 = mongoProperties12.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties12.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties17.createMongoClient(mongoClientOptions18, environment19);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions27.getDbEncoderFactory();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties17.createMongoClient(mongoClientOptions27, environment29);
        int int31 = mongoClientOptions27.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties12.createMongoClient(mongoClientOptions27, environment32);
        mongoProperties12.setUsername("test");
        mongoProperties12.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = builder40.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder40.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions44.getDbEncoderFactory();
        boolean boolean46 = mongoClientOptions44.isSocketKeepAlive();
        int int47 = mongoClientOptions44.getMaxConnectionLifeTime();
        boolean boolean48 = mongoClientOptions44.isAlwaysUseMBeans();
        int int49 = mongoClientOptions44.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties12.createMongoClient(mongoClientOptions44, environment50);
        com.mongodb.MongoClient mongoClient52 = mongoProperties0.createMongoClient(mongoClientOptions44);
        int int53 = mongoClientOptions44.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) (short) 100);
        java.lang.Class<?> wildcardClass21 = builder18.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        int int23 = mongoClientOptions19.getSocketTimeout();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions19);
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int27 = mongoClientOptions19.getConnectionsPerHost();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        int int34 = mongoClientOptions32.getMaxConnectionIdleTime();
        int int35 = mongoClientOptions32.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions32.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder37 = builder21.readPreference(readPreference36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder21.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.description("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder57 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder59.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder62 = builder59.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder59.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory64 = mongoClientOptions63.getDbDecoderFactory();
        int int65 = mongoClientOptions63.getMaxConnectionIdleTime();
        int int66 = mongoClientOptions63.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions63.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder52.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder39.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder10.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder72 = builder10.connectionsPerHost(20000);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder72.build();
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder72.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(dBDecoderFactory64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 500 + "'", int66 == 500);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        java.lang.String str14 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions6.getWriteConcern();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertNotNull(writeConcern16);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int11 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean12 = mongoClientOptions6.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder10.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions14.getDbDecoderFactory();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        mongoProperties0.setDatabase("");
        mongoProperties0.setDatabase("");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("");
        java.lang.Integer int28 = mongoProperties0.getPort();
        java.lang.Class<?> wildcardClass29 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        int int38 = mongoClientOptions36.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions36.getReadPreference();
        int int41 = mongoClientOptions36.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions36.getDbDecoderFactory();
        org.springframework.core.env.Environment environment43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient44 = mongoProperties0.createMongoClient(mongoClientOptions36, environment43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        int int34 = mongoClientOptions32.getMaxConnectionIdleTime();
        int int35 = mongoClientOptions32.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions32.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder37 = builder21.readPreference(readPreference36);
        com.mongodb.MongoClientOptions.Builder builder39 = builder21.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.description("");
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder57 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder59.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder62 = builder59.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions63 = builder59.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory64 = mongoClientOptions63.getDbDecoderFactory();
        int int65 = mongoClientOptions63.getMaxConnectionIdleTime();
        int int66 = mongoClientOptions63.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference67 = mongoClientOptions63.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder68 = builder52.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder39.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder10.readPreference(readPreference67);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.acceptableLatencyDifference(15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mongoClientOptions63);
        org.junit.Assert.assertNotNull(dBDecoderFactory64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 500 + "'", int66 == 500);
        org.junit.Assert.assertNotNull(readPreference67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.description("");
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder43 = builder37.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder37.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions54.getDbEncoderFactory();
        int int56 = mongoClientOptions54.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder45.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder16.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder59.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder62 = builder59.connectTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMinConnectionsPerHost();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions26.getDbDecoderFactory();
        int int30 = mongoClientOptions26.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder44 = builder42.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        java.lang.String str17 = mongoClientOptions10.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("");
        mongoProperties18.setDatabase("hi!");
        java.lang.String str23 = mongoProperties18.getUsername();
        mongoProperties18.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties18.createMongoClient(mongoClientOptions26, environment27);
        boolean boolean29 = mongoClientOptions10.equals((java.lang.Object) mongoProperties18);
        mongoProperties18.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        int int38 = mongoClientOptions36.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions36.getReadPreference();
        int int41 = mongoClientOptions36.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder25.dbDecoderFactory(dBDecoderFactory42);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder43.build();
        javax.net.SocketFactory socketFactory45 = mongoClientOptions44.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10000 + "'", int41 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(socketFactory45);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.socketTimeout((int) '#');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties17.setAuthenticationDatabase("");
        mongoProperties17.setGridFsDatabase("test");
        mongoProperties17.clearPassword();
        java.lang.Class<?> wildcardClass23 = mongoProperties17.getFieldNamingStrategy();
        mongoProperties17.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties26.createMongoClient(mongoClientOptions27, environment28);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties26.createMongoClient(mongoClientOptions36, environment38);
        int int40 = mongoClientOptions36.getSocketTimeout();
        int int41 = mongoClientOptions36.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient42 = mongoProperties17.createMongoClient(mongoClientOptions36);
        javax.net.SocketFactory socketFactory43 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder6.socketFactory(socketFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(socketFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatSocketTimeout();
        boolean boolean11 = mongoClientOptions6.isSocketKeepAlive();
        int int12 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder38.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder7.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions11.getDbDecoderFactory();
        int int13 = mongoClientOptions11.getSocketTimeout();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions11.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions11);
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mongoClient16);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions12.getDbDecoderFactory();
        int int14 = mongoClientOptions12.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions12.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder5.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder5.heartbeatThreadCount((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatThreadCount(20000);
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder53 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder55.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder58 = builder55.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder55.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory60 = mongoClientOptions59.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern61 = mongoClientOptions59.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder62 = builder52.writeConcern(writeConcern61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder35.writeConcern(writeConcern61);
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.socketKeepAlive(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties77 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions78 = null;
        org.springframework.core.env.Environment environment79 = null;
        com.mongodb.MongoClient mongoClient80 = mongoProperties77.createMongoClient(mongoClientOptions78, environment79);
        com.mongodb.MongoClientOptions.Builder builder81 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder84 = builder83.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder86 = builder83.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions87 = builder83.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory88 = mongoClientOptions87.getDbEncoderFactory();
        org.springframework.core.env.Environment environment89 = null;
        com.mongodb.MongoClient mongoClient90 = mongoProperties77.createMongoClient(mongoClientOptions87, environment89);
        int int91 = mongoClientOptions87.getAcceptableLatencyDifference();
        int int92 = mongoClientOptions87.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory93 = mongoClientOptions87.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory94 = mongoClientOptions87.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder95 = builder76.dbEncoderFactory(dBEncoderFactory94);
        com.mongodb.MongoClientOptions.Builder builder96 = builder35.dbEncoderFactory(dBEncoderFactory94);
        com.mongodb.MongoClientOptions.Builder builder97 = builder30.dbEncoderFactory(dBEncoderFactory94);
        com.mongodb.MongoClientOptions.Builder builder98 = builder19.dbEncoderFactory(dBEncoderFactory94);
        java.lang.Class<?> wildcardClass99 = builder19.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(dBEncoderFactory60);
        org.junit.Assert.assertNotNull(writeConcern61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClient80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(mongoClientOptions87);
        org.junit.Assert.assertNotNull(dBEncoderFactory88);
        org.junit.Assert.assertNotNull(mongoClient90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 5000 + "'", int92 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory93);
        org.junit.Assert.assertNotNull(dBEncoderFactory94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        int int23 = mongoClientOptions19.getSocketTimeout();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int26 = mongoClientOptions19.getAcceptableLatencyDifference();
        int int27 = mongoClientOptions19.getLocalThreshold();
        int int28 = mongoClientOptions19.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions19.getReadPreference();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions19.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder33.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions37.getDbDecoderFactory();
        int int39 = mongoClientOptions37.getSocketTimeout();
        java.lang.String str40 = mongoClientOptions37.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions37.getDbDecoderFactory();
        boolean boolean42 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions37);
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions37.getDbEncoderFactory();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.Class<?> wildcardClass11 = dBEncoderFactory10.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getConnectionsPerHost();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        int int19 = mongoClientOptions10.getMinHeartbeatFrequency();
        int int20 = mongoClientOptions10.getMaxWaitTime();
        boolean boolean21 = mongoClientOptions10.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions12.getDbDecoderFactory();
        int int14 = mongoClientOptions12.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions12.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder5.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder5.heartbeatThreadCount((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder5.maxConnectionIdleTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder21.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder4.alwaysUseMBeans(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder4.connectionsPerHost((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        int int28 = mongoClientOptions23.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder12.maxWaitTime(1);
        java.lang.Class<?> wildcardClass34 = builder33.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        java.lang.String str33 = mongoClientOptions29.getDescription();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        int int36 = mongoClientOptions29.getConnectionsPerHost();
        int int37 = mongoClientOptions29.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions29);
        java.lang.String str39 = mongoProperties0.getHost();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str15 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder36.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions40.getDbDecoderFactory();
        int int42 = mongoClientOptions40.getMaxConnectionIdleTime();
        int int43 = mongoClientOptions40.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions40.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder29.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder18.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder51.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder51.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions55.getDbEncoderFactory();
        boolean boolean57 = mongoClientOptions55.isSocketKeepAlive();
        int int58 = mongoClientOptions55.getMaxConnectionLifeTime();
        boolean boolean59 = mongoClientOptions55.isAlwaysUseMBeans();
        int int60 = mongoClientOptions55.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory61 = mongoClientOptions55.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder62 = builder46.dbDecoderFactory(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 500 + "'", int43 == 500);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatThreadCount(20000);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder32.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder15.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties57.createMongoClient(mongoClientOptions58, environment59);
        com.mongodb.MongoClientOptions.Builder builder61 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder63.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder66 = builder63.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder63.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory68 = mongoClientOptions67.getDbEncoderFactory();
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties57.createMongoClient(mongoClientOptions67, environment69);
        int int71 = mongoClientOptions67.getAcceptableLatencyDifference();
        int int72 = mongoClientOptions67.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions67.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory74 = mongoClientOptions67.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder75 = builder56.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder76 = builder15.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder77 = builder10.dbEncoderFactory(dBEncoderFactory74);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder79 = builder77.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(dBEncoderFactory68);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5000 + "'", int72 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(dBEncoderFactory74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatSocketTimeout(5);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder6.heartbeatSocketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isAutoConnectRetry();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions10.getWriteConcern();
        int int18 = mongoClientOptions10.getHeartbeatConnectTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatConnectRetryFrequency(500);
        boolean boolean53 = mongoClientOptions29.equals((java.lang.Object) builder52);
        int int54 = mongoClientOptions29.getMaxWaitTime();
        int int55 = mongoClientOptions29.getMaxWaitTime();
        boolean boolean56 = mongoClientOptions10.equals((java.lang.Object) mongoClientOptions29);
        boolean boolean57 = mongoClientOptions10.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 120000 + "'", int54 == 120000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 120000 + "'", int55 == 120000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) 500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Integer int6 = mongoProperties0.getPort();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.String str9 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setUri("hi!");
        java.lang.Integer int15 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Integer int15 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(int15);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionLifeTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        boolean boolean26 = mongoClientOptions6.equals((java.lang.Object) builder25);
        int int27 = mongoClientOptions6.getAcceptableLatencyDifference();
        java.lang.String str28 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory8 = mongoClientOptions6.getDbEncoderFactory();
        int int9 = mongoClientOptions6.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(dBEncoderFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory15 = mongoClientOptions6.getDbEncoderFactory();
        int int16 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxAutoConnectRetryTime((long) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder15 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder35.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder26.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder17.dbDecoderFactory(dBDecoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder14.dbDecoderFactory(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.minHeartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder38 = builder33.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minHeartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.minConnectionsPerHost((int) (short) 0);
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        java.lang.String str19 = mongoClientOptions15.getDescription();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions15.getReadPreference();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions15.getWriteConcern();
        boolean boolean22 = mongoClientOptions15.isAlwaysUseMBeans();
        int int23 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions15);
        mongoProperties0.setUsername("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 500 + "'", int23 == 500);
        org.junit.Assert.assertNotNull(mongoClient24);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.dbDecoderFactory(dBDecoderFactory22);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder23.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("");
        mongoProperties16.setDatabase("hi!");
        java.lang.String str21 = mongoProperties16.getUsername();
        java.lang.Integer int22 = mongoProperties16.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        mongoProperties23.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray35 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties23.setPassword(charArray35);
        mongoProperties16.setPassword(charArray35);
        mongoProperties0.setPassword(charArray35);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions47.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions47.getReadPreference();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions47, environment50);
        int int52 = mongoClientOptions47.getHeartbeatFrequency();
        int int53 = mongoClientOptions47.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5000 + "'", int52 == 5000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        int int27 = mongoClientOptions24.getHeartbeatFrequency();
        java.lang.String str28 = mongoClientOptions24.toString();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions24.getSocketFactory();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties15.createMongoClient(mongoClientOptions24, environment30);
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.maxWaitTime(15);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.description("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder54 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder56.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder59 = builder56.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder56.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions60.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference62 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder63 = builder53.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder30.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder65 = builder14.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder68 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder70.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder73 = builder70.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions74 = builder70.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory75 = mongoClientOptions74.getDbDecoderFactory();
        int int76 = mongoClientOptions74.getMaxConnectionIdleTime();
        int int77 = mongoClientOptions74.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern78 = mongoClientOptions74.getWriteConcern();
        java.lang.String str79 = mongoClientOptions74.toString();
        boolean boolean80 = mongoClientOptions74.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory81 = mongoClientOptions74.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder82 = builder67.socketFactory(socketFactory81);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(readPreference62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(mongoClientOptions74);
        org.junit.Assert.assertNotNull(dBDecoderFactory75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 500 + "'", int77 == 500);
        org.junit.Assert.assertNotNull(writeConcern78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(socketFactory81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.cursorFinalizerEnabled(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        java.lang.String str27 = mongoClientOptions23.getDescription();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions23.getReadPreference();
        java.lang.String str29 = mongoClientOptions23.getDescription();
        int int30 = mongoClientOptions23.getMaxConnectionIdleTime();
        boolean boolean31 = mongoClientOptions23.isSocketKeepAlive();
        boolean boolean32 = mongoClientOptions23.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions23.getReadPreference();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions23, environment34);
        int int36 = mongoClientOptions23.getHeartbeatThreadCount();
        boolean boolean37 = mongoClientOptions23.isCursorFinalizerEnabled();
        int int38 = mongoClientOptions23.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions18.getDbDecoderFactory();
        int int20 = mongoClientOptions18.getMaxConnectionIdleTime();
        int int21 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setAuthenticationDatabase("");
        mongoProperties24.setDatabase("hi!");
        java.lang.String str29 = mongoProperties24.getUsername();
        java.lang.Class<?> wildcardClass30 = mongoProperties24.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties24.createMongoClient(mongoClientOptions31, environment32);
        java.lang.String str34 = mongoProperties24.getMongoClientDatabase();
        java.lang.String str35 = mongoProperties24.getUri();
        char[] charArray36 = mongoProperties24.getPassword();
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder39.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder42 = builder39.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder39.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions43.getDbDecoderFactory();
        int int45 = mongoClientOptions43.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient46 = mongoProperties24.createMongoClient(mongoClientOptions43);
        int int47 = mongoClientOptions43.getHeartbeatSocketTimeout();
        int int48 = mongoClientOptions43.getHeartbeatThreadCount();
        int int49 = mongoClientOptions43.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder52.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder55 = builder52.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder52.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory57 = mongoClientOptions56.getDbDecoderFactory();
        int int58 = mongoClientOptions56.getSocketTimeout();
        int int59 = mongoClientOptions56.getSocketTimeout();
        java.lang.String str60 = mongoClientOptions56.getRequiredReplicaSetName();
        long long61 = mongoClientOptions56.getMaxAutoConnectRetryTime();
        boolean boolean62 = mongoClientOptions43.equals((java.lang.Object) mongoClientOptions56);
        org.springframework.core.env.Environment environment63 = null;
        com.mongodb.MongoClient mongoClient64 = mongoProperties0.createMongoClient(mongoClientOptions43, environment63);
        int int65 = mongoClientOptions43.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb://localhost/test" + "'", str35, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(dBDecoderFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        char[] charArray14 = mongoProperties0.getPassword();
        java.lang.String str15 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("hi!");
        java.lang.Class<?> wildcardClass18 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        java.lang.String str11 = mongoClientOptions6.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.Class<?> wildcardClass13 = dBEncoderFactory12.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getConnectTimeout();
        int int10 = mongoClientOptions6.getMaxWaitTime();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        int int13 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10000 + "'", int9 == 10000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120000 + "'", int10 == 120000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions6.getDbEncoderFactory();
        int int11 = mongoClientOptions6.getHeartbeatFrequency();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getHeartbeatThreadCount();
        java.lang.String str14 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder10.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        int int17 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions10.isSocketKeepAlive();
        int int19 = mongoClientOptions10.getAcceptableLatencyDifference();
        boolean boolean20 = mongoClientOptions10.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions10.getWriteConcern();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(writeConcern21);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder16.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        int int31 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions29.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(socketFactory32);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.legacyDefaults();
        boolean boolean26 = mongoClientOptions6.equals((java.lang.Object) builder25);
        int int27 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int28 = mongoClientOptions6.getConnectionsPerHost();
        int int29 = mongoClientOptions6.getHeartbeatSocketTimeout();
        boolean boolean30 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20000 + "'", int29 == 20000);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        char[] charArray30 = mongoProperties0.getPassword();
        java.lang.String str31 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder17.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder29.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder29.socketTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        mongoProperties0.setHost("test");
        mongoProperties0.clearPassword();
        java.lang.String str13 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        int int27 = mongoClientOptions25.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions25.getDbDecoderFactory();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.readPreference(readPreference30);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        int int19 = mongoClientOptions10.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean10 = mongoClientOptions6.isSocketKeepAlive();
        java.lang.String str11 = mongoClientOptions6.getDescription();
        java.lang.String str12 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(socketFactory12);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.acceptableLatencyDifference((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder25.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions37 = null;
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties36.createMongoClient(mongoClientOptions37, environment38);
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder45 = builder42.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder42.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions46.getDbEncoderFactory();
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties36.createMongoClient(mongoClientOptions46, environment48);
        java.lang.String str50 = mongoClientOptions46.getDescription();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions46.getReadPreference();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions46.getWriteConcern();
        int int53 = mongoClientOptions46.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern54 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder55 = builder35.writeConcern(writeConcern54);
        com.mongodb.MongoClientOptions.Builder builder56 = builder14.writeConcern(writeConcern54);
        com.mongodb.MongoClientOptions.Builder builder58 = builder14.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder60 = builder14.connectTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder62 = builder14.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 500 + "'", int53 == 500);
        org.junit.Assert.assertNotNull(writeConcern54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder14.socketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getHost();
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.acceptableLatencyDifference(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder55.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        mongoProperties0.setUsername("");
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        java.lang.String str25 = mongoClientOptions23.getDescription();
        boolean boolean26 = mongoClientOptions23.isAlwaysUseMBeans();
        boolean boolean27 = mongoClientOptions23.isAutoConnectRetry();
        boolean boolean28 = mongoClientOptions23.isAlwaysUseMBeans();
        int int29 = mongoClientOptions23.getMaxConnectionLifeTime();
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions23);
        boolean boolean31 = mongoClientOptions23.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder12 = builder4.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        int int17 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions10.isSocketKeepAlive();
        boolean boolean19 = mongoClientOptions10.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions10.getDbEncoderFactory();
        boolean boolean21 = mongoClientOptions10.isAlwaysUseMBeans();
        int int22 = mongoClientOptions10.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout(5);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder20.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        int int13 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.description("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder38.build();
        int int40 = mongoClientOptions39.getAcceptableLatencyDifference();
        boolean boolean41 = mongoClientOptions39.isAutoConnectRetry();
        boolean boolean42 = mongoClientOptions39.isAutoConnectRetry();
        int int43 = mongoClientOptions39.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory44 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder10.dbEncoderFactory(dBEncoderFactory44);
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder62 = builder56.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder65 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder75 = builder71.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder77 = builder75.description("");
        com.mongodb.MongoClientOptions.Builder builder79 = builder75.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder80 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder82 = builder80.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder83 = builder82.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder85 = builder82.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions86 = builder82.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory87 = mongoClientOptions86.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder88 = builder79.dbEncoderFactory(dBEncoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder89 = builder64.dbEncoderFactory(dBEncoderFactory87);
        com.mongodb.MongoClientOptions.Builder builder90 = builder10.dbEncoderFactory(dBEncoderFactory87);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 15 + "'", int40 == 15);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10000 + "'", int43 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(mongoClientOptions86);
        org.junit.Assert.assertNotNull(dBEncoderFactory87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionLifeTime(1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatConnectTimeout((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        java.lang.String str17 = mongoClientOptions10.getDescription();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("");
        mongoProperties18.setDatabase("hi!");
        java.lang.String str23 = mongoProperties18.getUsername();
        mongoProperties18.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties18.createMongoClient(mongoClientOptions26, environment27);
        boolean boolean29 = mongoClientOptions10.equals((java.lang.Object) mongoProperties18);
        mongoProperties18.setAuthenticationDatabase("");
        char[] charArray32 = mongoProperties18.getPassword();
        char[] charArray33 = mongoProperties18.getPassword();
        mongoProperties18.setPort((java.lang.Integer) 20000);
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(charArray32);
        org.junit.Assert.assertNull(charArray33);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder7.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions11.getDbDecoderFactory();
        int int13 = mongoClientOptions11.getSocketTimeout();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions11.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions11);
        mongoProperties0.setPort((java.lang.Integer) 0);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mongoClient16);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.heartbeatSocketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions19.getDbEncoderFactory();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder17 = builder10.heartbeatFrequency((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectRetryFrequency((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setUri("");
        java.lang.String str15 = mongoProperties0.getUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        char[] charArray33 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties23.setPassword(charArray33);
        java.lang.Integer int35 = mongoProperties23.getPort();
        java.lang.Integer int36 = mongoProperties23.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties37.createMongoClient(mongoClientOptions38, environment39);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions47.getDbEncoderFactory();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties37.createMongoClient(mongoClientOptions47, environment49);
        java.lang.String str51 = mongoClientOptions47.getDescription();
        com.mongodb.MongoClient mongoClient52 = mongoProperties23.createMongoClient(mongoClientOptions47);
        boolean boolean53 = mongoClientOptions47.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions47.getDbEncoderFactory();
        int int55 = mongoClientOptions47.getAcceptableLatencyDifference();
        int int56 = mongoClientOptions47.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions47.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder18.socketFactory(socketFactory57);
        com.mongodb.MongoClientOptions.Builder builder60 = builder18.heartbeatConnectTimeout(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.socketTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatSocketTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        java.lang.String str26 = mongoClientOptions19.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions18.getDbDecoderFactory();
        int int20 = mongoClientOptions18.getMaxConnectionIdleTime();
        int int21 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18);
        int int24 = mongoClientOptions18.getMinConnectionsPerHost();
        int int25 = mongoClientOptions18.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxConnectionLifeTime(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getSocketTimeout();
        int int34 = mongoClientOptions29.getLocalThreshold();
        javax.net.SocketFactory socketFactory35 = mongoClientOptions29.getSocketFactory();
        int int36 = mongoClientOptions29.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder12.dbDecoderFactory(dBDecoderFactory37);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder40 = builder12.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(socketFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        int int11 = mongoClientOptions6.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder26.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions42.getDbEncoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder47 = builder35.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder10.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder50 = builder10.heartbeatThreadCount((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder61 = builder55.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder62 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder64.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder67 = builder64.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder64.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory69 = mongoClientOptions68.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions68.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder71 = builder61.writeConcern(writeConcern70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder50.writeConcern(writeConcern70);
        com.mongodb.MongoClientOptions.Builder builder74 = builder50.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder76 = builder50.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder78 = builder76.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(dBEncoderFactory69);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) 5000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        java.lang.Class<?> wildcardClass9 = mongoClientOptions6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        int int35 = mongoClientOptions10.getMaxWaitTime();
        int int36 = mongoClientOptions10.getMaxWaitTime();
        java.lang.String str37 = mongoClientOptions10.toString();
        long long38 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionLifeTime(1);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatConnectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions39.getDbDecoderFactory();
        int int41 = mongoClientOptions39.getSocketTimeout();
        java.lang.String str42 = mongoClientOptions39.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder32.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder48 = builder45.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder34 = builder28.heartbeatConnectRetryFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        java.lang.String str20 = mongoClientOptions18.getDescription();
        long long21 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18, environment22);
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass26 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("");
        java.lang.String str31 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxConnectionLifeTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions6.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory12 = mongoClientOptions6.getDbEncoderFactory();
        int int13 = mongoClientOptions6.getMaxWaitTime();
        int int14 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxAutoConnectRetryTime((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        java.lang.String str9 = mongoClientOptions6.getRequiredReplicaSetName();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions6.getSocketFactory();
        boolean boolean12 = mongoClientOptions6.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("hi!");
        java.lang.String str9 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions6.isAlwaysUseMBeans();
        int int11 = mongoClientOptions6.getMinConnectionsPerHost();
        int int12 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int14 = mongoClientOptions6.getMaxConnectionIdleTime();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions6.getReadPreference();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(readPreference15);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.maxConnectionLifeTime(100);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.connectTimeout(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatThreadCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str12 = mongoClientOptions6.getDescription();
        int int13 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUri("test");
        java.lang.String str15 = mongoProperties0.getUri();
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        int int24 = mongoClientOptions19.getConnectTimeout();
        int int25 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 500 + "'", int25 == 500);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatThreadCount(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionLifeTime((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties44.createMongoClient(mongoClientOptions45, environment46);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions54.getDbEncoderFactory();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties44.createMongoClient(mongoClientOptions54, environment56);
        java.lang.String str58 = mongoClientOptions54.getDescription();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions54.getReadPreference();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions54.getWriteConcern();
        int int61 = mongoClientOptions54.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern62 = mongoClientOptions54.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder63 = builder43.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder20.writeConcern(writeConcern62);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder66 = builder20.minConnectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 500 + "'", int61 == 500);
        org.junit.Assert.assertNotNull(writeConcern62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("");
        mongoProperties21.setDatabase("hi!");
        java.lang.String str26 = mongoProperties21.getUsername();
        mongoProperties21.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties21.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        int int40 = mongoClientOptions38.getHeartbeatConnectTimeout();
        java.lang.String str41 = mongoClientOptions38.toString();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties21.createMongoClient(mongoClientOptions38, environment42);
        javax.net.SocketFactory socketFactory44 = mongoClientOptions38.getSocketFactory();
        int int45 = mongoClientOptions38.getSocketTimeout();
        boolean boolean46 = mongoClientOptions6.equals((java.lang.Object) mongoClientOptions38);
        int int47 = mongoClientOptions38.getConnectionsPerHost();
        int int48 = mongoClientOptions38.getMaxWaitTime();
        boolean boolean49 = mongoClientOptions38.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 120000 + "'", int48 == 120000);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        mongoProperties0.setUsername("");
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        java.lang.String str17 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "test" + "'", str17, "test");
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxAutoConnectRetryTime((long) 5000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties15.createMongoClient(mongoClientOptions16, environment17);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions25, environment27);
        int int29 = mongoClientOptions25.getSocketTimeout();
        int int30 = mongoClientOptions25.getLocalThreshold();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions25.getSocketFactory();
        boolean boolean32 = mongoClientOptions25.isAutoConnectRetry();
        int int33 = mongoClientOptions25.getHeartbeatSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder50.heartbeatFrequency(10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties57.setAuthenticationDatabase("");
        mongoProperties57.setDatabase("hi!");
        java.lang.String str62 = mongoProperties57.getUsername();
        java.lang.Class<?> wildcardClass63 = mongoProperties57.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions64 = null;
        org.springframework.core.env.Environment environment65 = null;
        com.mongodb.MongoClient mongoClient66 = mongoProperties57.createMongoClient(mongoClientOptions64, environment65);
        java.lang.String str67 = mongoProperties57.getMongoClientDatabase();
        java.lang.String str68 = mongoProperties57.getUri();
        char[] charArray69 = mongoProperties57.getPassword();
        com.mongodb.MongoClientOptions.Builder builder70 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder73 = builder72.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder75 = builder72.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions76 = builder72.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory77 = mongoClientOptions76.getDbDecoderFactory();
        int int78 = mongoClientOptions76.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient79 = mongoProperties57.createMongoClient(mongoClientOptions76);
        com.mongodb.DBDecoderFactory dBDecoderFactory80 = mongoClientOptions76.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder81 = builder50.dbDecoderFactory(dBDecoderFactory80);
        boolean boolean82 = mongoClientOptions25.equals((java.lang.Object) dBDecoderFactory80);
        com.mongodb.MongoClientOptions.Builder builder83 = builder12.dbDecoderFactory(dBDecoderFactory80);
        com.mongodb.MongoClientOptions mongoClientOptions84 = builder12.build();
        com.mongodb.WriteConcern writeConcern85 = mongoClientOptions84.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(mongoClient66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "mongodb://localhost/test" + "'", str68, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(mongoClientOptions76);
        org.junit.Assert.assertNotNull(dBDecoderFactory77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 20000 + "'", int78 == 20000);
        org.junit.Assert.assertNotNull(mongoClient79);
        org.junit.Assert.assertNotNull(dBDecoderFactory80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(mongoClientOptions84);
        org.junit.Assert.assertNotNull(writeConcern85);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.description("");
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder48.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder51 = builder48.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder48.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory53 = mongoClientOptions52.getDbDecoderFactory();
        int int54 = mongoClientOptions52.getMaxConnectionIdleTime();
        int int55 = mongoClientOptions52.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference56 = mongoClientOptions52.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder57 = builder41.readPreference(readPreference56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder28.readPreference(readPreference56);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions60 = null;
        org.springframework.core.env.Environment environment61 = null;
        com.mongodb.MongoClient mongoClient62 = mongoProperties59.createMongoClient(mongoClientOptions60, environment61);
        com.mongodb.MongoClientOptions.Builder builder63 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder65.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder68 = builder65.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder65.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions69.getDbEncoderFactory();
        org.springframework.core.env.Environment environment71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties59.createMongoClient(mongoClientOptions69, environment71);
        java.lang.String str73 = mongoClientOptions69.getDescription();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions69.getReadPreference();
        com.mongodb.WriteConcern writeConcern75 = mongoClientOptions69.getWriteConcern();
        int int76 = mongoClientOptions69.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern77 = mongoClientOptions69.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder78 = builder58.writeConcern(writeConcern77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder58.requiredReplicaSetName("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(dBDecoderFactory53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 500 + "'", int55 == 500);
        org.junit.Assert.assertNotNull(readPreference56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClient62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(mongoClient72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertNotNull(writeConcern75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 500 + "'", int76 == 500);
        org.junit.Assert.assertNotNull(writeConcern77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        mongoProperties0.setUsername("test");
        org.junit.Assert.assertNull(charArray5);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("");
        mongoProperties16.setDatabase("hi!");
        java.lang.String str21 = mongoProperties16.getUsername();
        java.lang.Integer int22 = mongoProperties16.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        mongoProperties23.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray35 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties23.setPassword(charArray35);
        mongoProperties16.setPassword(charArray35);
        mongoProperties0.setPassword(charArray35);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #, a,  ]");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectRetryFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatSocketTimeout(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        int int18 = mongoClientOptions17.getMinHeartbeatFrequency();
        long long19 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minHeartbeatFrequency((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        java.lang.String str31 = mongoClientOptions30.toString();
        java.lang.String str32 = mongoClientOptions30.getRequiredReplicaSetName();
        java.lang.Class<?> wildcardClass33 = mongoClientOptions30.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder26.maxConnectionLifeTime(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder26.heartbeatConnectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.description("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder16.build();
        int int30 = mongoClientOptions29.getSocketTimeout();
        java.lang.String str31 = mongoClientOptions29.getRequiredReplicaSetName();
        int int32 = mongoClientOptions29.getMaxConnectionIdleTime();
        int int33 = mongoClientOptions29.getThreadsAllowedToBlockForConnectionMultiplier();
        boolean boolean34 = mongoClientOptions29.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder17.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.dbDecoderFactory(dBDecoderFactory25);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        int int19 = mongoClientOptions10.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean21 = mongoClientOptions10.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.cursorFinalizerEnabled(true);
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.dbDecoderFactory(dBDecoderFactory21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        java.lang.Class<?> wildcardClass7 = builder4.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) 120000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatThreadCount(10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.connectTimeout(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        int int27 = mongoClientOptions25.getHeartbeatConnectTimeout();
        java.lang.String str28 = mongoClientOptions25.toString();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder30 = builder14.dbDecoderFactory(dBDecoderFactory29);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder30.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20000 + "'", int27 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.maxConnectionLifeTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder46 = builder14.socketTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.heartbeatSocketTimeout(5);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties28.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions38.getDbEncoderFactory();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties28.createMongoClient(mongoClientOptions38, environment40);
        java.lang.String str42 = mongoClientOptions38.getDescription();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions38.getReadPreference();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions38.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder10.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder10.socketTimeout(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getMaxWaitTime();
        int int16 = mongoClientOptions10.getMaxWaitTime();
        int int17 = mongoClientOptions10.getConnectTimeout();
        int int18 = mongoClientOptions10.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 120000 + "'", int16 == 120000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.springframework.core.env.Environment environment9 = null;
        com.mongodb.MongoClient mongoClient10 = mongoProperties0.createMongoClient(mongoClientOptions8, environment9);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions17.getDbDecoderFactory();
        int int19 = mongoClientOptions17.getHeartbeatConnectTimeout();
        java.lang.String str20 = mongoClientOptions17.toString();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions17, environment21);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions17.getSocketFactory();
        int int24 = mongoClientOptions17.getMinConnectionsPerHost();
        int int25 = mongoClientOptions17.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxAutoConnectRetryTime((long) 'a');
        boolean boolean45 = mongoClientOptions17.equals((java.lang.Object) builder44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.maxWaitTime((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder47.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClient10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions6.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        java.lang.String str13 = mongoClientOptions6.getRequiredReplicaSetName();
        int int14 = mongoClientOptions6.getHeartbeatThreadCount();
        int int15 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatSocketTimeout((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        java.lang.String str19 = mongoClientOptions17.getDescription();
        long long20 = mongoClientOptions17.getMaxAutoConnectRetryTime();
        java.lang.String str21 = mongoClientOptions17.getDescription();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder24 = builder10.dbDecoderFactory(dBDecoderFactory23);
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder10.dbEncoderFactory(dBEncoderFactory25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int2 = mongoProperties0.getPort();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 500);
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str8 = mongoProperties0.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        java.lang.String str23 = mongoClientOptions19.getDescription();
        com.mongodb.ReadPreference readPreference24 = mongoClientOptions19.getReadPreference();
        java.lang.String str25 = mongoClientOptions19.getDescription();
        java.lang.String str26 = mongoClientOptions19.getDescription();
        int int27 = mongoClientOptions19.getLocalThreshold();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions19);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(readPreference24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(mongoClient28);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.connectTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray18 = mongoProperties0.getPassword();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#,  ,  , a,  ]");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean9 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder20.legacyDefaults();
        boolean boolean26 = mongoClientOptions6.equals((java.lang.Object) builder25);
        int int27 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int28 = mongoClientOptions6.getLocalThreshold();
        java.lang.String str29 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 500 + "'", int27 == 500);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxConnectionIdleTime((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder33 = builder25.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions10.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(readPreference17);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        long long16 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        java.lang.String str17 = mongoClientOptions10.toString();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        int int19 = mongoClientOptions10.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int2 = mongoProperties0.getPort();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("test");
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        int int40 = mongoClientOptions38.getMaxConnectionIdleTime();
        int int41 = mongoClientOptions38.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions38.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder43 = builder31.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder44 = builder25.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder0.readPreference(readPreference42);
        com.mongodb.MongoClientOptions.Builder builder47 = builder0.minHeartbeatFrequency((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder30.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions34.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder36 = builder27.dbDecoderFactory(dBDecoderFactory35);
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder37.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder47 = builder41.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder61.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder64 = builder61.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder61.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern67 = mongoClientOptions65.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder68 = builder58.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder69 = builder41.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder70 = builder27.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder71 = builder14.writeConcern(writeConcern67);
        com.mongodb.MongoClientOptions.Builder builder73 = builder14.socketKeepAlive(false);
        java.lang.Class<?> wildcardClass74 = builder14.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertNotNull(writeConcern67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder9 = new com.mongodb.MongoClientOptions.Builder();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties10.createMongoClient(mongoClientOptions11, environment12);
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties10.createMongoClient(mongoClientOptions20, environment22);
        java.lang.String str24 = mongoClientOptions20.getDescription();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions20.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder9.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.localThreshold((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("");
        mongoProperties7.setDatabase("hi!");
        java.lang.String str12 = mongoProperties7.getUsername();
        mongoProperties7.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray19 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties7.setPassword(charArray19);
        java.lang.String str21 = mongoProperties7.getGridFsDatabase();
        java.lang.String str22 = mongoProperties7.getHost();
        mongoProperties7.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int25 = mongoProperties7.getPort();
        char[] charArray26 = mongoProperties7.getPassword();
        mongoProperties0.setPassword(charArray26);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties28.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions38.getDbEncoderFactory();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties28.createMongoClient(mongoClientOptions38, environment40);
        int int42 = mongoClientOptions38.getSocketTimeout();
        int int43 = mongoClientOptions38.getLocalThreshold();
        int int44 = mongoClientOptions38.getHeartbeatFrequency();
        int int45 = mongoClientOptions38.getSocketTimeout();
        int int46 = mongoClientOptions38.getMaxWaitTime();
        java.lang.String str47 = mongoClientOptions38.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions38.getReadPreference();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions38, environment49);
        boolean boolean51 = mongoClientOptions38.isAutoConnectRetry();
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5000 + "'", int44 == 5000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 120000 + "'", int46 == 120000);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        java.lang.String str11 = mongoClientOptions6.toString();
        int int12 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions6.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties15.createMongoClient(mongoClientOptions16, environment17);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions25, environment27);
        int int29 = mongoClientOptions25.getSocketTimeout();
        int int30 = mongoClientOptions25.getLocalThreshold();
        int int31 = mongoClientOptions25.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Integer int6 = mongoProperties0.getPort();
        java.lang.String str7 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions10.getWriteConcern();
        int int18 = mongoClientOptions10.getHeartbeatConnectTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        int int33 = mongoClientOptions29.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatConnectRetryFrequency(500);
        boolean boolean53 = mongoClientOptions29.equals((java.lang.Object) builder52);
        int int54 = mongoClientOptions29.getMaxWaitTime();
        int int55 = mongoClientOptions29.getMaxWaitTime();
        boolean boolean56 = mongoClientOptions10.equals((java.lang.Object) mongoClientOptions29);
        com.mongodb.DBDecoderFactory dBDecoderFactory57 = mongoClientOptions29.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 120000 + "'", int54 == 120000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 120000 + "'", int55 == 120000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dBDecoderFactory57);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder24.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder31.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder34 = builder31.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder31.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions35.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions35.getSocketFactory();
        int int38 = mongoClientOptions35.getHeartbeatFrequency();
        java.lang.String str39 = mongoClientOptions35.toString();
        javax.net.SocketFactory socketFactory40 = mongoClientOptions35.getSocketFactory();
        org.springframework.core.env.Environment environment41 = null;
        com.mongodb.MongoClient mongoClient42 = mongoProperties26.createMongoClient(mongoClientOptions35, environment41);
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions35.getWriteConcern();
        javax.net.SocketFactory socketFactory44 = mongoClientOptions35.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder24.socketFactory(socketFactory44);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder45.build();
        int int47 = mongoClientOptions46.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertNotNull(socketFactory40);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getHeartbeatFrequency();
        int int21 = mongoClientOptions6.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10000 + "'", int21 == 10000);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("");
        mongoProperties11.setDatabase("hi!");
        java.lang.String str16 = mongoProperties11.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties11.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        int int26 = mongoClientOptions24.getHeartbeatConnectTimeout();
        java.lang.String str27 = mongoClientOptions24.toString();
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder36 = builder28.description("test");
        boolean boolean37 = mongoClientOptions24.equals((java.lang.Object) "test");
        int int38 = mongoClientOptions24.getMinHeartbeatFrequency();
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties11.createMongoClient(mongoClientOptions24, environment39);
        boolean boolean41 = mongoClientOptions6.equals((java.lang.Object) mongoProperties11);
        boolean boolean42 = mongoClientOptions6.isAutoConnectRetry();
        long long43 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        java.lang.Integer int26 = mongoProperties0.getPort();
        java.lang.String str27 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatSocketTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        int int33 = mongoClientOptions31.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions31.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions31.getReadPreference();
        int int36 = mongoClientOptions31.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder22.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder22.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.connectTimeout((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.minHeartbeatFrequency(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.threadsAllowedToBlockForConnectionMultiplier(500);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        java.lang.String str17 = mongoClientOptions10.getDescription();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions10.getSocketFactory();
        java.lang.Class<?> wildcardClass19 = mongoClientOptions10.getClass();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxAutoConnectRetryTime(10L);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectRetryFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.threadsAllowedToBlockForConnectionMultiplier(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        int int26 = mongoClientOptions23.getHeartbeatFrequency();
        java.lang.String str27 = mongoClientOptions23.toString();
        int int28 = mongoClientOptions23.getHeartbeatConnectRetryFrequency();
        int int29 = mongoClientOptions23.getMinHeartbeatFrequency();
        int int30 = mongoClientOptions23.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder14.readPreference(readPreference31);
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder37.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder40 = builder37.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder37.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions41.getDbEncoderFactory();
        int int43 = mongoClientOptions41.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions41.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions41.getReadPreference();
        int int46 = mongoClientOptions41.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory47 = mongoClientOptions41.getSocketFactory();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions41.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder49 = builder14.readPreference(readPreference48);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5000 + "'", int26 == 5000);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 500 + "'", int28 == 500);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5000 + "'", int30 == 5000);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        char[] charArray30 = mongoProperties0.getPassword();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000, \000]");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions18.getDbDecoderFactory();
        int int20 = mongoClientOptions18.getMaxConnectionIdleTime();
        int int21 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18);
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.String str26 = mongoProperties0.getAuthenticationDatabase();
        java.lang.String str27 = mongoProperties0.getUri();
        java.lang.String str28 = mongoProperties0.getGridFsDatabase();
        java.lang.String str29 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mongodb://localhost/test" + "'", str28, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int2 = mongoProperties0.getPort();
        java.lang.String str3 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions10.getDbDecoderFactory();
        int int12 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions10, environment14);
        char[] charArray16 = mongoProperties0.getPassword();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "test" + "'", str3, "test");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(charArray16);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.maxWaitTime(5000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.localThreshold(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setDatabase("");
        java.lang.Integer int4 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getSocketTimeout();
        int int20 = mongoClientOptions15.getLocalThreshold();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions15);
        java.lang.String str23 = mongoClientOptions15.getDescription();
        long long24 = mongoClientOptions15.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        boolean boolean24 = mongoClientOptions21.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder47 = builder39.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder54.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder57 = builder54.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder54.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions58.getDbEncoderFactory();
        int int60 = mongoClientOptions58.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory61 = mongoClientOptions58.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference62 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder63 = builder49.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder26.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder66 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(readPreference62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        int int30 = mongoClientOptions24.getMinHeartbeatFrequency();
        int int31 = mongoClientOptions24.getSocketTimeout();
        int int32 = mongoClientOptions24.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions6.getDbDecoderFactory();
        int int31 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties41.createMongoClient(mongoClientOptions42, environment43);
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder50 = builder47.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory52 = mongoClientOptions51.getDbEncoderFactory();
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties41.createMongoClient(mongoClientOptions51, environment53);
        int int55 = mongoClientOptions51.getSocketTimeout();
        int int56 = mongoClientOptions51.getLocalThreshold();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions51.getSocketFactory();
        int int58 = mongoClientOptions51.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions51.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder14.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder14.connectionsPerHost(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 120000 + "'", int58 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        java.lang.String str17 = mongoClientOptions10.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions10.getDbDecoderFactory();
        java.lang.Class<?> wildcardClass19 = dBDecoderFactory18.getClass();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory30 = mongoClientOptions29.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory31 = mongoClientOptions29.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder32 = builder22.socketFactory(socketFactory31);
        com.mongodb.MongoClientOptions.Builder builder33 = builder2.socketFactory(socketFactory31);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder33.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBDecoderFactory30);
        org.junit.Assert.assertNotNull(socketFactory31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatSocketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime(10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder18.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.threadsAllowedToBlockForConnectionMultiplier(15);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minHeartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.maxAutoConnectRetryTime((long) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        int int40 = mongoClientOptions38.getMaxConnectionIdleTime();
        int int41 = mongoClientOptions38.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference42 = mongoClientOptions38.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder44 = builder31.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder45 = builder10.dbEncoderFactory(dBEncoderFactory43);
        com.mongodb.MongoClientOptions.Builder builder47 = builder10.heartbeatSocketTimeout(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 500 + "'", int41 == 500);
        org.junit.Assert.assertNotNull(readPreference42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        long long14 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        boolean boolean15 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatThreadCount((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.connectTimeout((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder24.socketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.heartbeatConnectTimeout((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder59 = builder53.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionLifeTime(120000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minHeartbeatFrequency((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxAutoConnectRetryTime((long) 'a');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getSocketTimeout();
        int int20 = mongoClientOptions15.getLocalThreshold();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder0.socketFactory(socketFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions31.getDbDecoderFactory();
        int int33 = mongoClientOptions31.getSocketTimeout();
        int int34 = mongoClientOptions31.getSocketTimeout();
        java.lang.String str35 = mongoClientOptions31.getRequiredReplicaSetName();
        int int36 = mongoClientOptions31.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory37 = mongoClientOptions31.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder38 = builder24.socketFactory(socketFactory37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(socketFactory37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        java.lang.String str17 = mongoClientOptions10.toString();
        java.lang.String str18 = mongoClientOptions10.toString();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        int int10 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int11 = mongoClientOptions6.getMinHeartbeatFrequency();
        java.lang.String str12 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions31.getDbDecoderFactory();
        int int33 = mongoClientOptions31.getMaxConnectionIdleTime();
        int int34 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference35 = mongoClientOptions31.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder36 = builder24.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder37 = builder18.readPreference(readPreference35);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxAutoConnectRetryTime(100L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 500 + "'", int34 == 500);
        org.junit.Assert.assertNotNull(readPreference35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold(5000);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder36.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions40.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder42 = builder33.dbEncoderFactory(dBEncoderFactory41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder18.dbEncoderFactory(dBEncoderFactory41);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder45 = builder18.heartbeatThreadCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatFrequency(120000);
        com.mongodb.MongoClientOptions.Builder builder26 = builder18.minHeartbeatFrequency(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        int int30 = mongoClientOptions24.getMinHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions24.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions24.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions24.getReadPreference();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertNotNull(readPreference34);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean10 = mongoClientOptions6.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions6.getDbDecoderFactory();
        long long12 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        int int14 = mongoClientOptions6.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setDatabase("test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        mongoProperties0.setUsername("test");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions32.getDbEncoderFactory();
        boolean boolean34 = mongoClientOptions32.isSocketKeepAlive();
        int int35 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean36 = mongoClientOptions32.isAlwaysUseMBeans();
        int int37 = mongoClientOptions32.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions32, environment38);
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str42 = mongoProperties0.getGridFsDatabase();
        java.lang.String str43 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        java.lang.String str31 = mongoClientOptions30.toString();
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions30.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions30.getDbDecoderFactory();
        long long35 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder54 = builder46.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder46.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder46.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder46.build();
        com.mongodb.MongoClientOptions.Builder builder61 = builder46.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder63 = builder46.heartbeatSocketTimeout(5);
        boolean boolean64 = mongoClientOptions30.equals((java.lang.Object) builder63);
        com.mongodb.MongoClientOptions.Builder builder66 = builder63.socketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions27.getDbDecoderFactory();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder20.readPreference(readPreference31);
        boolean boolean33 = mongoClientOptions10.equals((java.lang.Object) builder20);
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions10.getDbEncoderFactory();
        boolean boolean35 = mongoClientOptions10.isSocketKeepAlive();
        int int36 = mongoClientOptions10.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder27.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.description("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder48.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder56 = builder48.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder58 = builder48.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.autoConnectRetry(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.springframework.core.env.Environment environment63 = null;
        com.mongodb.MongoClient mongoClient64 = mongoProperties61.createMongoClient(mongoClientOptions62, environment63);
        com.mongodb.MongoClientOptions.Builder builder65 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder67.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder70 = builder67.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder67.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions71.getDbEncoderFactory();
        org.springframework.core.env.Environment environment73 = null;
        com.mongodb.MongoClient mongoClient74 = mongoProperties61.createMongoClient(mongoClientOptions71, environment73);
        int int75 = mongoClientOptions71.getSocketTimeout();
        int int76 = mongoClientOptions71.getLocalThreshold();
        javax.net.SocketFactory socketFactory77 = mongoClientOptions71.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder78 = builder60.socketFactory(socketFactory77);
        com.mongodb.MongoClientOptions.Builder builder79 = builder35.socketFactory(socketFactory77);
        com.mongodb.MongoClientOptions.Builder builder80 = builder10.socketFactory(socketFactory77);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(mongoClient74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(socketFactory77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        int int9 = mongoClientOptions6.getConnectionsPerHost();
        java.lang.String str10 = mongoClientOptions6.toString();
        long long11 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int12 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        int int22 = mongoClientOptions15.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions15.getDbDecoderFactory();
        boolean boolean24 = mongoClientOptions15.isCursorFinalizerEnabled();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionLifeTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder10.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions14.getDbDecoderFactory();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        int int21 = mongoClientOptions14.getConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions14.getWriteConcern();
        int int23 = mongoClientOptions14.getHeartbeatThreadCount();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder4.build();
        int int10 = mongoClientOptions9.getHeartbeatThreadCount();
        int int11 = mongoClientOptions9.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        int int11 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int12 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        int int23 = mongoClientOptions21.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        int int25 = mongoClientOptions21.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder27 = builder14.readPreference(readPreference26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.description("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties30.createMongoClient(mongoClientOptions31, environment32);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder36.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions40.getDbEncoderFactory();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties30.createMongoClient(mongoClientOptions40, environment42);
        java.lang.String str44 = mongoClientOptions40.getDescription();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions40.getReadPreference();
        com.mongodb.WriteConcern writeConcern46 = mongoClientOptions40.getWriteConcern();
        int int47 = mongoClientOptions40.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions40.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder29.writeConcern(writeConcern48);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(writeConcern46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 500 + "'", int47 == 500);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setHost("hi!");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions31.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions31.getSocketFactory();
        int int34 = mongoClientOptions31.getHeartbeatFrequency();
        java.lang.String str35 = mongoClientOptions31.toString();
        int int36 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        int int37 = mongoClientOptions31.getMinHeartbeatFrequency();
        int int38 = mongoClientOptions31.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions31.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder18.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionLifeTime(15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5000 + "'", int34 == 5000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 500 + "'", int36 == 500);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 500 + "'", int37 == 500);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5000 + "'", int38 == 5000);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        boolean boolean26 = mongoClientOptions6.equals((java.lang.Object) builder25);
        int int27 = mongoClientOptions6.getAcceptableLatencyDifference();
        boolean boolean28 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }
}

