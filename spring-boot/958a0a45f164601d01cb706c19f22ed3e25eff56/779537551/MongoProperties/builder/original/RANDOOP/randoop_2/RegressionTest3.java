import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("");
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder32.build();
        int int36 = mongoClientOptions35.getSocketTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions35.getDbEncoderFactory();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties38.createMongoClient(mongoClientOptions39, environment40);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions48.getDbEncoderFactory();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties38.createMongoClient(mongoClientOptions48, environment50);
        java.lang.String str52 = mongoClientOptions48.getDescription();
        com.mongodb.ReadPreference readPreference53 = mongoClientOptions48.getReadPreference();
        java.lang.String str54 = mongoClientOptions48.getDescription();
        int int55 = mongoClientOptions48.getMaxConnectionIdleTime();
        boolean boolean56 = mongoClientOptions48.isSocketKeepAlive();
        boolean boolean57 = mongoClientOptions48.isAutoConnectRetry();
        int int58 = mongoClientOptions48.getThreadsAllowedToBlockForConnectionMultiplier();
        long long59 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        int int60 = mongoClientOptions48.getConnectionsPerHost();
        java.lang.String str61 = mongoClientOptions48.getDescription();
        boolean boolean62 = mongoClientOptions35.equals((java.lang.Object) mongoClientOptions48);
        org.springframework.core.env.Environment environment63 = null;
        com.mongodb.MongoClient mongoClient64 = mongoProperties0.createMongoClient(mongoClientOptions35, environment63);
        int int65 = mongoClientOptions35.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(readPreference53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 20000 + "'", int65 == 20000);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        java.lang.String str13 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setUsername("mongodb://localhost/test");
        java.lang.Integer int16 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        boolean boolean21 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str22 = mongoClientOptions6.getDescription();
        java.lang.String str23 = mongoClientOptions6.toString();
        java.lang.String str24 = mongoClientOptions6.getDescription();
        int int25 = mongoClientOptions6.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        boolean boolean13 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean14 = mongoClientOptions6.isSocketKeepAlive();
        int int15 = mongoClientOptions6.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime((int) (byte) 10);
        boolean boolean37 = mongoClientOptions6.equals((java.lang.Object) builder36);
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions6.getWriteConcern();
        int int39 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int40 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        int int10 = mongoClientOptions6.getMinConnectionsPerHost();
        java.lang.String str11 = mongoClientOptions6.getDescription();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isAlwaysUseMBeans();
        int int15 = mongoClientOptions6.getConnectTimeout();
        boolean boolean16 = mongoClientOptions6.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder18.connectionsPerHost(97);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties15.createMongoClient(mongoClientOptions16, environment17);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions25, environment27);
        int int29 = mongoClientOptions25.getSocketTimeout();
        int int30 = mongoClientOptions25.getLocalThreshold();
        int int31 = mongoClientOptions25.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketTimeout(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        int int28 = mongoClientOptions26.getSocketTimeout();
        int int29 = mongoClientOptions26.getSocketTimeout();
        java.lang.String str30 = mongoClientOptions26.getRequiredReplicaSetName();
        boolean boolean31 = mongoClientOptions26.isAutoConnectRetry();
        int int32 = mongoClientOptions26.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory33 = mongoClientOptions26.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder34 = builder14.socketFactory(socketFactory33);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20000 + "'", int32 == 20000);
        org.junit.Assert.assertNotNull(socketFactory33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectionsPerHost((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        int int27 = mongoClientOptions24.getHeartbeatFrequency();
        java.lang.String str28 = mongoClientOptions24.toString();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions24.getSocketFactory();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties15.createMongoClient(mongoClientOptions24, environment30);
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.connectionsPerHost((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions28.getDbDecoderFactory();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions28.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions28.getReadPreference();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions28.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.readPreference(readPreference33);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder16.heartbeatConnectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(1);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder24);
        int int30 = mongoClientOptions6.getConnectTimeout();
        int int31 = mongoClientOptions6.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions6.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionLifeTime((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        int int34 = mongoClientOptions32.getSocketTimeout();
        int int35 = mongoClientOptions32.getSocketTimeout();
        java.lang.String str36 = mongoClientOptions32.getRequiredReplicaSetName();
        long long37 = mongoClientOptions32.getMaxAutoConnectRetryTime();
        boolean boolean38 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions32);
        int int39 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean40 = mongoClientOptions19.isSocketKeepAlive();
        int int41 = mongoClientOptions19.getMaxWaitTime();
        int int42 = mongoClientOptions19.getConnectTimeout();
        int int43 = mongoClientOptions19.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10000 + "'", int42 == 10000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.springframework.core.env.Environment environment9 = null;
        com.mongodb.MongoClient mongoClient10 = mongoProperties7.createMongoClient(mongoClientOptions8, environment9);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties7.createMongoClient(mongoClientOptions17, environment19);
        java.lang.String str21 = mongoClientOptions17.getDescription();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions17.getReadPreference();
        com.mongodb.WriteConcern writeConcern23 = mongoClientOptions17.getWriteConcern();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions17, environment24);
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(writeConcern23);
        org.junit.Assert.assertNotNull(mongoClient25);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount(15);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.minConnectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder26.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketKeepAlive(false);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatThreadCount((int) (short) 1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder20.build();
        boolean boolean24 = mongoClientOptions23.isSocketKeepAlive();
        boolean boolean25 = mongoClientOptions23.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions20.isAlwaysUseMBeans();
        int int25 = mongoClientOptions20.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        int int27 = mongoClientOptions20.getLocalThreshold();
        int int28 = mongoClientOptions20.getHeartbeatFrequency();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatThreadCount(20000);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.acceptableLatencyDifference(10000);
        com.mongodb.MongoClientOptions.Builder builder36 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder45.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.description("");
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder61 = builder55.socketTimeout(0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties62 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions63 = null;
        org.springframework.core.env.Environment environment64 = null;
        com.mongodb.MongoClient mongoClient65 = mongoProperties62.createMongoClient(mongoClientOptions63, environment64);
        com.mongodb.MongoClientOptions.Builder builder66 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder69 = builder68.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder71 = builder68.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions72 = builder68.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory73 = mongoClientOptions72.getDbEncoderFactory();
        org.springframework.core.env.Environment environment74 = null;
        com.mongodb.MongoClient mongoClient75 = mongoProperties62.createMongoClient(mongoClientOptions72, environment74);
        int int76 = mongoClientOptions72.getAcceptableLatencyDifference();
        int int77 = mongoClientOptions72.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory78 = mongoClientOptions72.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory79 = mongoClientOptions72.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder80 = builder61.dbEncoderFactory(dBEncoderFactory79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder44.dbEncoderFactory(dBEncoderFactory79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder31.dbEncoderFactory(dBEncoderFactory79);
        com.mongodb.MongoClientOptions.Builder builder83 = builder22.dbEncoderFactory(dBEncoderFactory79);
        com.mongodb.MongoClientOptions.Builder builder85 = builder83.heartbeatFrequency(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClient65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(mongoClientOptions72);
        org.junit.Assert.assertNotNull(dBEncoderFactory73);
        org.junit.Assert.assertNotNull(mongoClient75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5000 + "'", int77 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory78);
        org.junit.Assert.assertNotNull(dBEncoderFactory79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getMinConnectionsPerHost();
        java.lang.String str17 = mongoClientOptions15.getDescription();
        int int18 = mongoClientOptions15.getMinConnectionsPerHost();
        boolean boolean19 = mongoClientOptions15.isSocketKeepAlive();
        int int20 = mongoClientOptions15.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.maxConnectionIdleTime((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.description("");
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder64.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder71 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder74 = builder73.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder76 = builder73.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder73.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory78 = mongoClientOptions77.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory79 = mongoClientOptions77.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder80 = builder70.socketFactory(socketFactory79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder50.socketFactory(socketFactory79);
        com.mongodb.MongoClientOptions.Builder builder82 = builder45.socketFactory(socketFactory79);
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.connectionsPerHost((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder85 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder87 = builder85.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder88 = builder87.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder90 = builder87.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions91 = builder87.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory92 = mongoClientOptions91.getDbEncoderFactory();
        int int93 = mongoClientOptions91.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory94 = mongoClientOptions91.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference95 = mongoClientOptions91.getReadPreference();
        int int96 = mongoClientOptions91.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory97 = mongoClientOptions91.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder98 = builder84.socketFactory(socketFactory97);
        com.mongodb.MongoClientOptions.Builder builder99 = builder28.socketFactory(socketFactory97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertNotNull(dBDecoderFactory78);
        org.junit.Assert.assertNotNull(socketFactory79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(mongoClientOptions91);
        org.junit.Assert.assertNotNull(dBEncoderFactory92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory94);
        org.junit.Assert.assertNotNull(readPreference95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(socketFactory97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        int int23 = mongoClientOptions19.getSocketTimeout();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int26 = mongoClientOptions19.getAcceptableLatencyDifference();
        int int27 = mongoClientOptions19.getLocalThreshold();
        int int28 = mongoClientOptions19.getMaxConnectionLifeTime();
        java.lang.String str29 = mongoClientOptions19.getRequiredReplicaSetName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean10 = mongoClientOptions6.isAutoConnectRetry();
        boolean boolean11 = mongoClientOptions6.isAlwaysUseMBeans();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        java.lang.String str13 = mongoClientOptions6.getRequiredReplicaSetName();
        int int14 = mongoClientOptions6.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(socketFactory15);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        int int17 = mongoClientOptions10.getConnectTimeout();
        boolean boolean18 = mongoClientOptions10.isAutoConnectRetry();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        boolean boolean20 = mongoClientOptions10.isSocketKeepAlive();
        int int21 = mongoClientOptions10.getSocketTimeout();
        java.lang.String str22 = mongoClientOptions10.toString();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.description("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder28.localThreshold((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties37.setAuthenticationDatabase("");
        mongoProperties37.setDatabase("hi!");
        java.lang.String str42 = mongoProperties37.getUsername();
        mongoProperties37.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties37.createMongoClient(mongoClientOptions45, environment46);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory55 = mongoClientOptions54.getDbDecoderFactory();
        int int56 = mongoClientOptions54.getHeartbeatConnectTimeout();
        java.lang.String str57 = mongoClientOptions54.toString();
        org.springframework.core.env.Environment environment58 = null;
        com.mongodb.MongoClient mongoClient59 = mongoProperties37.createMongoClient(mongoClientOptions54, environment58);
        javax.net.SocketFactory socketFactory60 = mongoClientOptions54.getSocketFactory();
        int int61 = mongoClientOptions54.getSocketTimeout();
        int int62 = mongoClientOptions54.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory63 = mongoClientOptions54.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder64 = builder36.dbDecoderFactory(dBDecoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder13.dbDecoderFactory(dBDecoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder66 = builder12.dbDecoderFactory(dBDecoderFactory63);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.acceptableLatencyDifference((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder71 = builder66.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBDecoderFactory55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20000 + "'", int56 == 20000);
        org.junit.Assert.assertNotNull(mongoClient59);
        org.junit.Assert.assertNotNull(socketFactory60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5000 + "'", int62 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.String str7 = mongoProperties0.getUri();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "mongodb://localhost/test" + "'", str7, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties8.createMongoClient(mongoClientOptions9, environment10);
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties8.createMongoClient(mongoClientOptions18, environment20);
        int int22 = mongoClientOptions18.getSocketTimeout();
        int int23 = mongoClientOptions18.getLocalThreshold();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        int int27 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.String str29 = mongoClientOptions18.getDescription();
        int int30 = mongoClientOptions18.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern31 = mongoClientOptions18.getWriteConcern();
        int int32 = mongoClientOptions18.getAcceptableLatencyDifference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20000 + "'", int30 == 20000);
        org.junit.Assert.assertNotNull(writeConcern31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getHost();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions6.getWriteConcern();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getMinConnectionsPerHost();
        int int18 = mongoClientOptions10.getSocketTimeout();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        int int20 = mongoClientOptions10.getMaxWaitTime();
        int int21 = mongoClientOptions10.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 120000 + "'", int20 == 120000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        java.lang.String str12 = mongoClientOptions6.toString();
        com.mongodb.WriteConcern writeConcern13 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(writeConcern13);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern18 = mongoClientOptions10.getWriteConcern();
        int int19 = mongoClientOptions10.getLocalThreshold();
        boolean boolean20 = mongoClientOptions10.isAutoConnectRetry();
        int int21 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(writeConcern18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions27.getDbEncoderFactory();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions27.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getMinConnectionsPerHost();
        int int35 = mongoClientOptions32.getHeartbeatConnectRetryFrequency();
        boolean boolean36 = mongoClientOptions32.isSocketKeepAlive();
        boolean boolean37 = mongoClientOptions32.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions6.getMaxWaitTime();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions6.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("");
        java.lang.String str14 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass15 = mongoProperties0.getClass();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) 120000);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.localThreshold(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference(10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder27 = builder21.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions36.getDbDecoderFactory();
        int int38 = mongoClientOptions36.getSocketTimeout();
        int int39 = mongoClientOptions36.getSocketTimeout();
        java.lang.String str40 = mongoClientOptions36.getRequiredReplicaSetName();
        long long41 = mongoClientOptions36.getMaxAutoConnectRetryTime();
        int int42 = mongoClientOptions36.getHeartbeatThreadCount();
        int int43 = mongoClientOptions36.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory44 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder45 = builder29.socketFactory(socketFactory44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder16.socketFactory(socketFactory44);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertNotNull(socketFactory44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties24.createMongoClient(mongoClientOptions25, environment26);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder30.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions34.getDbEncoderFactory();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties24.createMongoClient(mongoClientOptions34, environment36);
        java.lang.String str38 = mongoClientOptions34.getDescription();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder23.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Integer int6 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("");
        mongoProperties7.setDatabase("hi!");
        java.lang.String str12 = mongoProperties7.getUsername();
        mongoProperties7.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray19 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties7.setPassword(charArray19);
        mongoProperties0.setPassword(charArray19);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions28.getDbDecoderFactory();
        int int30 = mongoClientOptions28.getSocketTimeout();
        long long31 = mongoClientOptions28.getMaxAutoConnectRetryTime();
        int int32 = mongoClientOptions28.getConnectionsPerHost();
        int int33 = mongoClientOptions28.getHeartbeatThreadCount();
        boolean boolean34 = mongoClientOptions28.isAutoConnectRetry();
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions28);
        mongoProperties0.setGridFsDatabase("test");
        java.lang.Integer int38 = mongoProperties0.getPort();
        com.mongodb.MongoClientOptions.Builder builder39 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder41.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder41.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions45.getDbDecoderFactory();
        int int47 = mongoClientOptions45.getHeartbeatConnectTimeout();
        java.lang.String str48 = mongoClientOptions45.toString();
        com.mongodb.MongoClientOptions.Builder builder49 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder49.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder59 = builder55.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("");
        com.mongodb.MongoClientOptions.Builder builder63 = builder59.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder65 = builder59.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder67 = builder59.localThreshold((int) (byte) 10);
        boolean boolean68 = mongoClientOptions45.equals((java.lang.Object) builder67);
        int int69 = mongoClientOptions45.getSocketTimeout();
        java.lang.String str70 = mongoClientOptions45.getRequiredReplicaSetName();
        com.mongodb.DBEncoderFactory dBEncoderFactory71 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient72 = mongoProperties0.createMongoClient(mongoClientOptions45);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(dBEncoderFactory71);
        org.junit.Assert.assertNotNull(mongoClient72);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder11 = builder7.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.description("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions28.getDbDecoderFactory();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions28.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions28.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder33 = builder17.readPreference(readPreference32);
        com.mongodb.MongoClientOptions.Builder builder34 = builder6.readPreference(readPreference32);
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder37.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder40 = builder37.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder37.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions41.getDbEncoderFactory();
        boolean boolean43 = mongoClientOptions41.isSocketKeepAlive();
        int int44 = mongoClientOptions41.getMaxConnectionLifeTime();
        boolean boolean45 = mongoClientOptions41.isAlwaysUseMBeans();
        int int46 = mongoClientOptions41.getMinConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory47 = mongoClientOptions41.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder6.dbDecoderFactory(dBDecoderFactory47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder6.minHeartbeatFrequency(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder50.minHeartbeatFrequency((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions6.getMaxWaitTime();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int15 = mongoClientOptions6.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions20.isAlwaysUseMBeans();
        int int25 = mongoClientOptions20.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        java.lang.String str27 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int28 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties0.createMongoClient(mongoClientOptions31);
        java.lang.String str33 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.description("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder29.build();
        int int33 = mongoClientOptions32.getSocketTimeout();
        int int34 = mongoClientOptions32.getAcceptableLatencyDifference();
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions32);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions42.getReadPreference();
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties0.createMongoClient(mongoClientOptions42, environment45);
        java.lang.String str47 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 15 + "'", int34 == 15);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions7 = builder0.build();
        com.mongodb.MongoClientOptions.Builder builder9 = builder0.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder10 = builder0.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions17.getDbDecoderFactory();
        int int19 = mongoClientOptions17.getSocketTimeout();
        int int20 = mongoClientOptions17.getSocketTimeout();
        java.lang.String str21 = mongoClientOptions17.getRequiredReplicaSetName();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxWaitTime(1);
        boolean boolean40 = mongoClientOptions17.equals((java.lang.Object) builder35);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.maxWaitTime(27017);
        boolean boolean56 = mongoClientOptions17.equals((java.lang.Object) 27017);
        javax.net.SocketFactory socketFactory57 = mongoClientOptions17.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder10.socketFactory(socketFactory57);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mongoClientOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions6.getDbEncoderFactory();
        int int11 = mongoClientOptions6.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions6.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties15.createMongoClient(mongoClientOptions16, environment17);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions25, environment27);
        int int29 = mongoClientOptions25.getSocketTimeout();
        int int30 = mongoClientOptions25.getLocalThreshold();
        int int31 = mongoClientOptions25.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.heartbeatSocketTimeout((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder37 = builder10.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder49.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder49.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder49.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions53.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory55 = mongoClientOptions53.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder46.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder26.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder21.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxWaitTime((int) (short) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties61 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions62 = null;
        org.springframework.core.env.Environment environment63 = null;
        com.mongodb.MongoClient mongoClient64 = mongoProperties61.createMongoClient(mongoClientOptions62, environment63);
        com.mongodb.MongoClientOptions.Builder builder65 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder68 = builder67.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder70 = builder67.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions71 = builder67.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory72 = mongoClientOptions71.getDbEncoderFactory();
        org.springframework.core.env.Environment environment73 = null;
        com.mongodb.MongoClient mongoClient74 = mongoProperties61.createMongoClient(mongoClientOptions71, environment73);
        int int75 = mongoClientOptions71.getAcceptableLatencyDifference();
        int int76 = mongoClientOptions71.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory77 = mongoClientOptions71.getDbDecoderFactory();
        int int78 = mongoClientOptions71.getConnectTimeout();
        boolean boolean79 = mongoClientOptions71.isAutoConnectRetry();
        int int80 = mongoClientOptions71.getConnectionsPerHost();
        boolean boolean81 = mongoClientOptions71.isSocketKeepAlive();
        int int82 = mongoClientOptions71.getSocketTimeout();
        boolean boolean83 = mongoClientOptions71.isCursorFinalizerEnabled();
        com.mongodb.WriteConcern writeConcern84 = mongoClientOptions71.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder85 = builder60.writeConcern(writeConcern84);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertNotNull(socketFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(mongoClientOptions71);
        org.junit.Assert.assertNotNull(dBEncoderFactory72);
        org.junit.Assert.assertNotNull(mongoClient74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5000 + "'", int76 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10000 + "'", int78 == 10000);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(writeConcern84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("test");
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory34 = mongoClientOptions32.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder35 = builder25.socketFactory(socketFactory34);
        com.mongodb.MongoClientOptions.Builder builder37 = builder25.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder25.build();
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions38);
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(socketFactory34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(mongoClient39);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder4 = builder2.heartbeatConnectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        int int15 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        boolean boolean17 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean18 = mongoClientOptions6.isAutoConnectRetry();
        int int19 = mongoClientOptions6.getHeartbeatFrequency();
        int int20 = mongoClientOptions6.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties24.setAuthenticationDatabase("");
        mongoProperties24.setDatabase("hi!");
        java.lang.String str29 = mongoProperties24.getUsername();
        mongoProperties24.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions32 = null;
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties24.createMongoClient(mongoClientOptions32, environment33);
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder37.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder40 = builder37.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder37.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory42 = mongoClientOptions41.getDbDecoderFactory();
        int int43 = mongoClientOptions41.getHeartbeatConnectTimeout();
        java.lang.String str44 = mongoClientOptions41.toString();
        org.springframework.core.env.Environment environment45 = null;
        com.mongodb.MongoClient mongoClient46 = mongoProperties24.createMongoClient(mongoClientOptions41, environment45);
        javax.net.SocketFactory socketFactory47 = mongoClientOptions41.getSocketFactory();
        int int48 = mongoClientOptions41.getSocketTimeout();
        int int49 = mongoClientOptions41.getHeartbeatThreadCount();
        boolean boolean50 = mongoClientOptions23.equals((java.lang.Object) int49);
        int int51 = mongoClientOptions23.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(dBDecoderFactory42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20000 + "'", int43 == 20000);
        org.junit.Assert.assertNotNull(mongoClient46);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20000 + "'", int51 == 20000);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions13.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions13.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder16 = builder0.socketFactory(socketFactory15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.heartbeatConnectRetryFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertNotNull(socketFactory15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.description("");
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder36.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory41 = mongoClientOptions40.getDbDecoderFactory();
        int int42 = mongoClientOptions40.getMaxConnectionIdleTime();
        int int43 = mongoClientOptions40.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference44 = mongoClientOptions40.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder45 = builder29.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder46 = builder18.readPreference(readPreference44);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.maxConnectionLifeTime((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(dBDecoderFactory41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 500 + "'", int43 == 500);
        org.junit.Assert.assertNotNull(readPreference44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions16.getDbEncoderFactory();
        int int18 = mongoClientOptions16.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions16.getDbDecoderFactory();
        int int20 = mongoClientOptions16.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions16.getDbEncoderFactory();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions16);
        int int23 = mongoClientOptions16.getHeartbeatFrequency();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("");
        mongoProperties16.setDatabase("hi!");
        java.lang.String str21 = mongoProperties16.getUsername();
        java.lang.Integer int22 = mongoProperties16.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        mongoProperties23.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray35 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties23.setPassword(charArray35);
        mongoProperties16.setPassword(charArray35);
        mongoProperties0.setPassword(charArray35);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str43 = mongoProperties0.getHost();
        java.lang.String str44 = mongoProperties0.getHost();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#, #, a,  ]");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) 120000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder25.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions38.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder31.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder46.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions50.getDbDecoderFactory();
        boolean boolean52 = mongoClientOptions50.isSocketKeepAlive();
        boolean boolean53 = mongoClientOptions50.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions50.getDbEncoderFactory();
        int int55 = mongoClientOptions50.getHeartbeatFrequency();
        boolean boolean56 = mongoClientOptions50.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory57 = mongoClientOptions50.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder58 = builder43.dbEncoderFactory(dBEncoderFactory57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder20.dbEncoderFactory(dBEncoderFactory57);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder61 = builder59.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5000 + "'", int55 == 5000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions6.getConnectTimeout();
        java.lang.String str13 = mongoClientOptions6.toString();
        java.lang.String str14 = mongoClientOptions6.getDescription();
        boolean boolean15 = mongoClientOptions6.isSocketKeepAlive();
        int int16 = mongoClientOptions6.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
        org.junit.Assert.assertNotNull(socketFactory17);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder4.build();
        long long10 = mongoClientOptions9.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setHost("");
        mongoProperties0.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties12.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass15 = mongoProperties12.getFieldNamingStrategy();
        java.lang.String str16 = mongoProperties12.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties17 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties17.createMongoClient(mongoClientOptions18, environment19);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions27.getDbEncoderFactory();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties17.createMongoClient(mongoClientOptions27, environment29);
        int int31 = mongoClientOptions27.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties12.createMongoClient(mongoClientOptions27, environment32);
        mongoProperties12.setUsername("test");
        mongoProperties12.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = builder40.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder40.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions44.getDbEncoderFactory();
        boolean boolean46 = mongoClientOptions44.isSocketKeepAlive();
        int int47 = mongoClientOptions44.getMaxConnectionLifeTime();
        boolean boolean48 = mongoClientOptions44.isAlwaysUseMBeans();
        int int49 = mongoClientOptions44.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties12.createMongoClient(mongoClientOptions44, environment50);
        com.mongodb.MongoClient mongoClient52 = mongoProperties0.createMongoClient(mongoClientOptions44);
        int int53 = mongoClientOptions44.getHeartbeatSocketTimeout();
        com.mongodb.ReadPreference readPreference54 = mongoClientOptions44.getReadPreference();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(mongoClient52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20000 + "'", int53 == 20000);
        org.junit.Assert.assertNotNull(readPreference54);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxConnectionLifeTime(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder2.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int11 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setAuthenticationDatabase("");
        mongoProperties31.setDatabase("hi!");
        java.lang.String str36 = mongoProperties31.getUsername();
        java.lang.Class<?> wildcardClass37 = mongoProperties31.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties31.createMongoClient(mongoClientOptions38, environment39);
        java.lang.String str41 = mongoProperties31.getMongoClientDatabase();
        java.lang.String str42 = mongoProperties31.getUri();
        char[] charArray43 = mongoProperties31.getPassword();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder46.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions50.getDbDecoderFactory();
        int int52 = mongoClientOptions50.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient53 = mongoProperties31.createMongoClient(mongoClientOptions50);
        int int54 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions50.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions50.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder28.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder18.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatThreadCount((int) '#');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder52 = builder48.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder54 = builder48.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.minConnectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder57 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder59.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder62 = builder59.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder63 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder65.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder68 = builder65.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder65.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory70 = mongoClientOptions69.getDbDecoderFactory();
        int int71 = mongoClientOptions69.getMaxConnectionIdleTime();
        int int72 = mongoClientOptions69.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference73 = mongoClientOptions69.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder74 = builder62.readPreference(readPreference73);
        com.mongodb.MongoClientOptions.Builder builder75 = builder56.readPreference(readPreference73);
        com.mongodb.MongoClientOptions.Builder builder76 = builder31.readPreference(readPreference73);
        com.mongodb.MongoClientOptions.Builder builder77 = builder30.readPreference(readPreference73);
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.maxConnectionLifeTime((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder81 = builder79.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(dBDecoderFactory70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 500 + "'", int72 == 500);
        org.junit.Assert.assertNotNull(readPreference73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray12 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties0.setPassword(charArray12);
        java.lang.String str14 = mongoProperties0.getGridFsDatabase();
        java.lang.String str15 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str18 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #, a,  ]");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        int int11 = mongoClientOptions6.getConnectTimeout();
        int int12 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int13 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.maxAutoConnectRetryTime((long) 'a');
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getSocketTimeout();
        int int20 = mongoClientOptions15.getLocalThreshold();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions15.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder22 = builder0.socketFactory(socketFactory21);
        com.mongodb.MongoClientOptions.Builder builder24 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minHeartbeatFrequency(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.localThreshold((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        boolean boolean30 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions24.getDbEncoderFactory();
        int int32 = mongoClientOptions24.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.description("");
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory55 = mongoClientOptions54.getDbDecoderFactory();
        boolean boolean56 = mongoClientOptions54.isSocketKeepAlive();
        boolean boolean57 = mongoClientOptions54.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions54.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder43.dbEncoderFactory(dBEncoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = builder59.legacyDefaults();
        boolean boolean63 = mongoClientOptions24.equals((java.lang.Object) builder59);
        com.mongodb.MongoClientOptions.Builder builder65 = builder59.autoConnectRetry(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder67 = builder59.threadsAllowedToBlockForConnectionMultiplier((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBDecoderFactory55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setHost("");
        mongoProperties0.setGridFsDatabase("test");
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.connectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = new com.mongodb.MongoClientOptions.Builder();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties25 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions26 = null;
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties25.createMongoClient(mongoClientOptions26, environment27);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = builder31.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder34 = builder31.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions35 = builder31.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory36 = mongoClientOptions35.getDbEncoderFactory();
        org.springframework.core.env.Environment environment37 = null;
        com.mongodb.MongoClient mongoClient38 = mongoProperties25.createMongoClient(mongoClientOptions35, environment37);
        java.lang.String str39 = mongoClientOptions35.getDescription();
        com.mongodb.ReadPreference readPreference40 = mongoClientOptions35.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder41 = builder24.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder42 = builder23.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder12.readPreference(readPreference40);
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.minConnectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder43.minConnectionsPerHost(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(mongoClientOptions35);
        org.junit.Assert.assertNotNull(dBEncoderFactory36);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(readPreference40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        char[] charArray4 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(charArray4);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        java.lang.String str31 = mongoClientOptions30.toString();
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions30.getReadPreference();
        int int34 = mongoClientOptions30.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.minHeartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime((long) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxAutoConnectRetryTime(0L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.heartbeatSocketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.acceptableLatencyDifference((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties10.createMongoClient(mongoClientOptions11, environment12);
        mongoProperties10.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties10.getUsername();
        java.lang.String str17 = mongoProperties10.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        boolean boolean26 = mongoClientOptions24.isSocketKeepAlive();
        int int27 = mongoClientOptions24.getConnectionsPerHost();
        int int28 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient29 = mongoProperties10.createMongoClient(mongoClientOptions24);
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions24, environment30);
        int int32 = mongoClientOptions24.getLocalThreshold();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions24.getReadPreference();
        int int34 = mongoClientOptions24.getMaxWaitTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 120000 + "'", int34 == 120000);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setAuthenticationDatabase("");
        mongoProperties31.setDatabase("hi!");
        java.lang.String str36 = mongoProperties31.getUsername();
        java.lang.Class<?> wildcardClass37 = mongoProperties31.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties31.createMongoClient(mongoClientOptions38, environment39);
        java.lang.String str41 = mongoProperties31.getMongoClientDatabase();
        java.lang.String str42 = mongoProperties31.getUri();
        char[] charArray43 = mongoProperties31.getPassword();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder46.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions50.getDbDecoderFactory();
        int int52 = mongoClientOptions50.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient53 = mongoProperties31.createMongoClient(mongoClientOptions50);
        int int54 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions50.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions50.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder28.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder18.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder60 = builder18.maxConnectionLifeTime(500);
        com.mongodb.MongoClientOptions.Builder builder62 = builder18.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.connectTimeout(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("");
        mongoProperties21.setDatabase("hi!");
        java.lang.String str26 = mongoProperties21.getUsername();
        mongoProperties21.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties21.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        int int40 = mongoClientOptions38.getHeartbeatConnectTimeout();
        java.lang.String str41 = mongoClientOptions38.toString();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties21.createMongoClient(mongoClientOptions38, environment42);
        java.lang.String str44 = mongoClientOptions38.getDescription();
        com.mongodb.WriteConcern writeConcern45 = mongoClientOptions38.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder46 = builder18.writeConcern(writeConcern45);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder48 = builder18.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20000 + "'", int40 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(writeConcern45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.threadsAllowedToBlockForConnectionMultiplier(5);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        char[] charArray2 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("test");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 20000);
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions16.getDbDecoderFactory();
        int int18 = mongoClientOptions16.getMaxConnectionIdleTime();
        boolean boolean19 = mongoClientOptions16.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions16, environment21);
        int int23 = mongoClientOptions16.getMaxConnectionLifeTime();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        java.lang.String str21 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties24.createMongoClient(mongoClientOptions25, environment26);
        mongoProperties24.setGridFsDatabase("");
        java.lang.String str30 = mongoProperties24.getUsername();
        java.lang.String str31 = mongoProperties24.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        boolean boolean40 = mongoClientOptions38.isSocketKeepAlive();
        int int41 = mongoClientOptions38.getConnectionsPerHost();
        int int42 = mongoClientOptions38.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient43 = mongoProperties24.createMongoClient(mongoClientOptions38);
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties0.createMongoClient(mongoClientOptions38, environment44);
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder58.minConnectionsPerHost(10);
        boolean boolean65 = mongoClientOptions38.equals((java.lang.Object) builder64);
        com.mongodb.MongoClientOptions.Builder builder67 = builder64.minHeartbeatFrequency(10000);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder72 = builder68.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.description("");
        com.mongodb.MongoClientOptions.Builder builder76 = builder72.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder78 = builder72.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder79 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder82 = builder81.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder84 = builder81.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions85 = builder81.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory86 = mongoClientOptions85.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory87 = mongoClientOptions85.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder88 = builder78.socketFactory(socketFactory87);
        com.mongodb.MongoClientOptions.Builder builder89 = builder59.socketFactory(socketFactory87);
        com.mongodb.MongoClientOptions.Builder builder91 = builder59.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(mongoClientOptions85);
        org.junit.Assert.assertNotNull(dBDecoderFactory86);
        org.junit.Assert.assertNotNull(socketFactory87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.heartbeatConnectRetryFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.connectTimeout((int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties10.createMongoClient(mongoClientOptions11, environment12);
        mongoProperties10.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties10.getUsername();
        java.lang.String str17 = mongoProperties10.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        boolean boolean26 = mongoClientOptions24.isSocketKeepAlive();
        int int27 = mongoClientOptions24.getConnectionsPerHost();
        int int28 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient29 = mongoProperties10.createMongoClient(mongoClientOptions24);
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions24, environment30);
        int int32 = mongoClientOptions24.getMinConnectionsPerHost();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.maxConnectionLifeTime((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder3 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder5 = builder3.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = builder5.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder8 = builder5.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions9 = builder5.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions9.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions9.getSocketFactory();
        int int12 = mongoClientOptions9.getHeartbeatFrequency();
        java.lang.String str13 = mongoClientOptions9.toString();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions9.getSocketFactory();
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions9, environment15);
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions9.getWriteConcern();
        boolean boolean18 = mongoClientOptions9.isSocketKeepAlive();
        boolean boolean19 = mongoClientOptions9.isCursorFinalizerEnabled();
        int int20 = mongoClientOptions9.getAcceptableLatencyDifference();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions9.getReadPreference();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(mongoClientOptions9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(writeConcern17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(readPreference21);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency(5);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder7.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions11.getDbDecoderFactory();
        int int13 = mongoClientOptions11.getSocketTimeout();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions11.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions11);
        java.lang.String str17 = mongoProperties0.getUri();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(1);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder24);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(27017);
        boolean boolean45 = mongoClientOptions6.equals((java.lang.Object) 27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties46.setAuthenticationDatabase("");
        java.lang.String str49 = mongoProperties46.getGridFsDatabase();
        mongoProperties46.setHost("test");
        java.lang.String str52 = mongoProperties46.getMongoClientDatabase();
        java.lang.Integer int53 = mongoProperties46.getPort();
        mongoProperties46.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties56.setAuthenticationDatabase("");
        mongoProperties56.setDatabase("hi!");
        java.lang.String str61 = mongoProperties56.getUsername();
        java.lang.String str62 = mongoProperties56.getDatabase();
        java.lang.String str63 = mongoProperties56.getUsername();
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder66.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder69 = builder66.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder66.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions70.getDbDecoderFactory();
        int int72 = mongoClientOptions70.getMaxConnectionIdleTime();
        boolean boolean73 = mongoClientOptions70.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment74 = null;
        com.mongodb.MongoClient mongoClient75 = mongoProperties56.createMongoClient(mongoClientOptions70, environment74);
        int int76 = mongoClientOptions70.getHeartbeatFrequency();
        int int77 = mongoClientOptions70.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment78 = null;
        com.mongodb.MongoClient mongoClient79 = mongoProperties46.createMongoClient(mongoClientOptions70, environment78);
        boolean boolean80 = mongoClientOptions6.equals((java.lang.Object) mongoClient79);
        boolean boolean81 = mongoClientOptions6.isAlwaysUseMBeans();
        java.lang.Class<?> wildcardClass82 = mongoClientOptions6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "test" + "'", str52, "test");
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(mongoClient75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5000 + "'", int76 == 5000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(mongoClient79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties10.createMongoClient(mongoClientOptions11, environment12);
        mongoProperties10.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties10.getUsername();
        java.lang.String str17 = mongoProperties10.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        boolean boolean26 = mongoClientOptions24.isSocketKeepAlive();
        int int27 = mongoClientOptions24.getConnectionsPerHost();
        int int28 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient29 = mongoProperties10.createMongoClient(mongoClientOptions24);
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions24, environment30);
        int int32 = mongoClientOptions24.getLocalThreshold();
        boolean boolean33 = mongoClientOptions24.isAutoConnectRetry();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory21 = mongoClientOptions19.getSocketFactory();
        int int22 = mongoClientOptions19.getAcceptableLatencyDifference();
        int int23 = mongoClientOptions19.getHeartbeatThreadCount();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        int int26 = mongoClientOptions19.getSocketTimeout();
        long long27 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        int int28 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions19.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder30 = builder6.readPreference(readPreference29);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertNotNull(socketFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120000 + "'", int28 == 120000);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.connectTimeout(120000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxConnectionIdleTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions10.getDbDecoderFactory();
        int int12 = mongoClientOptions10.getSocketTimeout();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        java.lang.Integer int19 = mongoProperties0.getPort();
        java.lang.String str20 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setAuthenticationDatabase("");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "test" + "'", str20, "test");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder27 = builder18.dbDecoderFactory(dBDecoderFactory26);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.maxConnectionIdleTime(1);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatConnectRetryFrequency(15);
        com.mongodb.MongoClientOptions.Builder builder33 = builder27.cursorFinalizerEnabled(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        java.lang.String str15 = mongoClientOptions10.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions10.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference8 = mongoClientOptions6.getReadPreference();
        java.lang.String str9 = mongoClientOptions6.getRequiredReplicaSetName();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions6.getWriteConcern();
        int int12 = mongoClientOptions6.getConnectTimeout();
        int int13 = mongoClientOptions6.getHeartbeatFrequency();
        int int14 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(readPreference8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5000 + "'", int13 == 5000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions12.getDbDecoderFactory();
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions12, environment14);
        java.lang.Integer int16 = mongoProperties0.getPort();
        char[] charArray20 = new char[] { 'a', ' ', '#' };
        mongoProperties0.setPassword(charArray20);
        java.lang.String str22 = mongoProperties0.getHost();
        java.lang.String str23 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "a #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "a #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[a,  , #]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.localThreshold(500);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        java.lang.String str25 = mongoClientOptions19.getDescription();
        com.mongodb.ReadPreference readPreference26 = mongoClientOptions19.getReadPreference();
        long long27 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(readPreference26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder6.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.threadsAllowedToBlockForConnectionMultiplier(27017);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.threadsAllowedToBlockForConnectionMultiplier((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.heartbeatThreadCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold(500);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder18 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Integer int6 = mongoProperties0.getPort();
        java.lang.String str7 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 0);
        mongoProperties0.setDatabase("test");
        mongoProperties0.setUri("hi!");
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions20.getDbDecoderFactory();
        int int22 = mongoClientOptions20.getHeartbeatConnectTimeout();
        java.lang.String str23 = mongoClientOptions20.toString();
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder34.localThreshold((int) (byte) 10);
        boolean boolean43 = mongoClientOptions20.equals((java.lang.Object) builder42);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder42.build();
        java.lang.String str45 = mongoClientOptions44.toString();
        int int46 = mongoClientOptions44.getHeartbeatConnectTimeout();
        int int47 = mongoClientOptions44.getConnectTimeout();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient48 = mongoProperties0.createMongoClient(mongoClientOptions44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: spring.data.mongodb.port=0 and no local mongo port configuration is available");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20000 + "'", int22 == 20000);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10000 + "'", int47 == 10000);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        java.lang.String str27 = mongoClientOptions23.getDescription();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions23.getReadPreference();
        java.lang.String str29 = mongoClientOptions23.getDescription();
        int int30 = mongoClientOptions23.getMaxConnectionIdleTime();
        boolean boolean31 = mongoClientOptions23.isSocketKeepAlive();
        boolean boolean32 = mongoClientOptions23.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions23.getReadPreference();
        org.springframework.core.env.Environment environment34 = null;
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions23, environment34);
        mongoProperties0.setHost("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties38 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions39 = null;
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties38.createMongoClient(mongoClientOptions39, environment40);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory49 = mongoClientOptions48.getDbEncoderFactory();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties38.createMongoClient(mongoClientOptions48, environment50);
        int int52 = mongoClientOptions48.getSocketTimeout();
        int int53 = mongoClientOptions48.getLocalThreshold();
        int int54 = mongoClientOptions48.getHeartbeatFrequency();
        int int55 = mongoClientOptions48.getSocketTimeout();
        int int56 = mongoClientOptions48.getMaxWaitTime();
        int int57 = mongoClientOptions48.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient58 = mongoProperties0.createMongoClient(mongoClientOptions48);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBEncoderFactory49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5000 + "'", int54 == 5000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 120000 + "'", int56 == 120000);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(mongoClient58);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder14.build();
        int int16 = mongoClientOptions15.getHeartbeatConnectRetryFrequency();
        boolean boolean17 = mongoClientOptions15.isAutoConnectRetry();
        boolean boolean18 = mongoClientOptions15.isSocketKeepAlive();
        int int19 = mongoClientOptions15.getSocketTimeout();
        java.lang.String str20 = mongoClientOptions15.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        java.lang.String str33 = mongoClientOptions29.getDescription();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions29.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder37 = builder14.dbDecoderFactory(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions8 = null;
        org.springframework.core.env.Environment environment9 = null;
        com.mongodb.MongoClient mongoClient10 = mongoProperties0.createMongoClient(mongoClientOptions8, environment9);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions17.getDbDecoderFactory();
        int int19 = mongoClientOptions17.getHeartbeatConnectTimeout();
        java.lang.String str20 = mongoClientOptions17.toString();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions17, environment21);
        javax.net.SocketFactory socketFactory23 = mongoClientOptions17.getSocketFactory();
        int int24 = mongoClientOptions17.getMinConnectionsPerHost();
        int int25 = mongoClientOptions17.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxAutoConnectRetryTime((long) 'a');
        boolean boolean45 = mongoClientOptions17.equals((java.lang.Object) builder44);
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.maxWaitTime((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder49 = builder47.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mongoClient10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20000 + "'", int19 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(socketFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 120000 + "'", int25 == 120000);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder22.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        mongoProperties0.setHost("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass23 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        int int17 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions10.isSocketKeepAlive();
        boolean boolean19 = mongoClientOptions10.isAutoConnectRetry();
        int int20 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        int int21 = mongoClientOptions10.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.acceptableLatencyDifference(120000);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.description("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 10);
        java.lang.String str13 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setPort((java.lang.Integer) 52);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUri("");
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 97);
        java.lang.String str11 = mongoProperties0.getHost();
        java.lang.String str12 = mongoProperties0.getUri();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getMaxConnectionLifeTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        boolean boolean26 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.WriteConcern writeConcern27 = mongoClientOptions19.getWriteConcern();
        int int28 = mongoClientOptions19.getLocalThreshold();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(writeConcern27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions16.getDbDecoderFactory();
        int int18 = mongoClientOptions16.getMaxConnectionIdleTime();
        int int19 = mongoClientOptions16.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference20 = mongoClientOptions16.getReadPreference();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions16.getDbEncoderFactory();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions16.getSocketFactory();
        java.lang.String str23 = mongoClientOptions16.toString();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions16);
        java.lang.String str25 = mongoProperties0.getUri();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertNotNull(readPreference20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "mongodb://localhost/test" + "'", str25, "mongodb://localhost/test");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("test");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency(10000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.connectionsPerHost(1);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder53 = builder47.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder54 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder57 = builder56.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder59 = builder56.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions60 = builder56.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory61 = mongoClientOptions60.getDbEncoderFactory();
        java.lang.String str62 = mongoClientOptions60.toString();
        com.mongodb.ReadPreference readPreference63 = mongoClientOptions60.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder64 = builder53.readPreference(readPreference63);
        com.mongodb.MongoClientOptions.Builder builder65 = builder28.readPreference(readPreference63);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(mongoClientOptions60);
        org.junit.Assert.assertNotNull(dBEncoderFactory61);
        org.junit.Assert.assertNotNull(readPreference63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatThreadCount(10000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.minHeartbeatFrequency(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.minConnectionsPerHost((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.alwaysUseMBeans(true);
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        java.lang.String str13 = mongoClientOptions6.getDescription();
        int int14 = mongoClientOptions6.getSocketTimeout();
        boolean boolean15 = mongoClientOptions6.isAlwaysUseMBeans();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions6.getReadPreference();
        long long17 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int18 = mongoClientOptions6.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxAutoConnectRetryTime((long) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.connectTimeout((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions10.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(readPreference18);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.heartbeatConnectTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder23 = builder18.maxConnectionIdleTime((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatThreadCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.maxConnectionIdleTime(5000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.minConnectionsPerHost(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions6.getLocalThreshold();
        java.lang.String str14 = mongoClientOptions6.getDescription();
        int int15 = mongoClientOptions6.getHeartbeatFrequency();
        boolean boolean16 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        char[] charArray17 = mongoProperties0.getPassword();
        java.lang.String str18 = mongoProperties0.getUri();
        java.lang.String str19 = mongoProperties0.getHost();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        boolean boolean28 = mongoClientOptions26.isSocketKeepAlive();
        boolean boolean29 = mongoClientOptions26.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions26.getDbEncoderFactory();
        int int31 = mongoClientOptions26.getHeartbeatFrequency();
        boolean boolean32 = mongoClientOptions26.isAutoConnectRetry();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties0.createMongoClient(mongoClientOptions26, environment33);
        mongoProperties0.setUsername("");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5000 + "'", int31 == 5000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mongoClient34);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime(1L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder23 = builder18.maxConnectionLifeTime(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        java.lang.String str13 = mongoClientOptions6.getRequiredReplicaSetName();
        int int14 = mongoClientOptions6.getHeartbeatFrequency();
        int int15 = mongoClientOptions6.getHeartbeatSocketTimeout();
        java.lang.Class<?> wildcardClass16 = mongoClientOptions6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20000 + "'", int15 == 20000);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder4.alwaysUseMBeans(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setAuthenticationDatabase("");
        mongoProperties36.setGridFsDatabase("test");
        mongoProperties36.clearPassword();
        java.lang.Class<?> wildcardClass42 = mongoProperties36.getFieldNamingStrategy();
        mongoProperties36.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions46 = null;
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties45.createMongoClient(mongoClientOptions46, environment47);
        com.mongodb.MongoClientOptions.Builder builder49 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder51.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder51.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions55.getDbEncoderFactory();
        org.springframework.core.env.Environment environment57 = null;
        com.mongodb.MongoClient mongoClient58 = mongoProperties45.createMongoClient(mongoClientOptions55, environment57);
        int int59 = mongoClientOptions55.getSocketTimeout();
        int int60 = mongoClientOptions55.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient61 = mongoProperties36.createMongoClient(mongoClientOptions55);
        javax.net.SocketFactory socketFactory62 = mongoClientOptions55.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder35.socketFactory(socketFactory62);
        com.mongodb.MongoClientOptions.Builder builder65 = builder35.maxWaitTime(10);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder67 = builder65.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertNotNull(mongoClient58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 120000 + "'", int60 == 120000);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertNotNull(socketFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        int int11 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str15 = mongoClientOptions6.getDescription();
        boolean boolean16 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean17 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        int int28 = mongoClientOptions26.getMaxConnectionIdleTime();
        int int29 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder17.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass19 = builder16.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        int int30 = mongoClientOptions24.getMinHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions24.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions24.getSocketFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions24.getDbEncoderFactory();
        boolean boolean34 = mongoClientOptions24.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory35 = mongoClientOptions24.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory35);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties41.createMongoClient(mongoClientOptions42, environment43);
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder50 = builder47.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory52 = mongoClientOptions51.getDbEncoderFactory();
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties41.createMongoClient(mongoClientOptions51, environment53);
        int int55 = mongoClientOptions51.getSocketTimeout();
        int int56 = mongoClientOptions51.getLocalThreshold();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions51.getSocketFactory();
        int int58 = mongoClientOptions51.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions51.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder14.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder14.connectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder63 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder65.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder68 = builder65.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder65.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory70 = mongoClientOptions69.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory71 = mongoClientOptions69.getSocketFactory();
        int int72 = mongoClientOptions69.getHeartbeatFrequency();
        java.lang.String str73 = mongoClientOptions69.toString();
        int int74 = mongoClientOptions69.getHeartbeatConnectTimeout();
        int int75 = mongoClientOptions69.getConnectTimeout();
        int int76 = mongoClientOptions69.getMinConnectionsPerHost();
        java.lang.String str77 = mongoClientOptions69.getDescription();
        int int78 = mongoClientOptions69.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory79 = mongoClientOptions69.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder80 = builder14.socketFactory(socketFactory79);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 120000 + "'", int58 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(dBDecoderFactory70);
        org.junit.Assert.assertNotNull(socketFactory71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5000 + "'", int72 == 5000);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20000 + "'", int74 == 20000);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10000 + "'", int75 == 10000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(socketFactory79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        int int16 = mongoClientOptions10.getHeartbeatFrequency();
        int int17 = mongoClientOptions10.getSocketTimeout();
        int int18 = mongoClientOptions10.getMaxWaitTime();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder30.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder36.build();
        int int38 = mongoClientOptions37.getMaxConnectionLifeTime();
        int int39 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        long long40 = mongoClientOptions37.getMaxAutoConnectRetryTime();
        boolean boolean41 = mongoClientOptions10.equals((java.lang.Object) mongoClientOptions37);
        boolean boolean42 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean43 = mongoClientOptions10.isSocketKeepAlive();
        int int44 = mongoClientOptions10.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 120000 + "'", int18 == 120000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUsername("hi!");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getUri();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions13.getDbEncoderFactory();
        int int15 = mongoClientOptions13.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions13.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        int int18 = mongoClientOptions13.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory19 = mongoClientOptions13.getSocketFactory();
        int int20 = mongoClientOptions13.getMaxConnectionLifeTime();
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions13);
        char[] charArray22 = null;
        mongoProperties0.setPassword(charArray22);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "mongodb://localhost/test" + "'", str4, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(socketFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(mongoClient21);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory10 = mongoClientOptions6.getDbEncoderFactory();
        int int11 = mongoClientOptions6.getHeartbeatFrequency();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getHeartbeatThreadCount();
        int int14 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5000 + "'", int11 == 5000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 500 + "'", int14 == 500);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        int int23 = mongoClientOptions19.getHeartbeatThreadCount();
        int int24 = mongoClientOptions19.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean13 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int14 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions6.getMinHeartbeatFrequency();
        boolean boolean22 = mongoClientOptions6.isAlwaysUseMBeans();
        int int23 = mongoClientOptions6.getLocalThreshold();
        boolean boolean24 = mongoClientOptions6.isAutoConnectRetry();
        int int25 = mongoClientOptions6.getHeartbeatThreadCount();
        int int26 = mongoClientOptions6.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass11 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern21 = mongoClientOptions10.getWriteConcern();
        int int22 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(writeConcern21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.maxConnectionIdleTime(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getUri();
        java.lang.Integer int9 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "mongodb://localhost/test" + "'", str8, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setPort((java.lang.Integer) 5);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.description("test");
        boolean boolean19 = mongoClientOptions6.equals((java.lang.Object) "test");
        int int20 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int21 = mongoClientOptions6.getLocalThreshold();
        int int22 = mongoClientOptions6.getConnectionsPerHost();
        int int23 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(writeConcern24);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.writeConcern(writeConcern25);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setAuthenticationDatabase("");
        mongoProperties27.setDatabase("hi!");
        java.lang.String str32 = mongoProperties27.getUsername();
        java.lang.Class<?> wildcardClass33 = mongoProperties27.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties27.createMongoClient(mongoClientOptions34, environment35);
        java.lang.String str37 = mongoProperties27.getMongoClientDatabase();
        java.lang.String str38 = mongoProperties27.getUri();
        char[] charArray39 = mongoProperties27.getPassword();
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder45 = builder42.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder42.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions46.getReadPreference();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties27.createMongoClient(mongoClientOptions46, environment49);
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions46.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder52 = builder26.dbDecoderFactory(dBDecoderFactory51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder26.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(writeConcern25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "mongodb://localhost/test" + "'", str38, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int11 = mongoClientOptions6.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(writeConcern12);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions6.getSocketFactory();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions6.getDbDecoderFactory();
        int int16 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions10.getReadPreference();
        int int17 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int18 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int19 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str20 = mongoClientOptions10.getDescription();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getHost();
        java.lang.String str12 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties0.createMongoClient(mongoClientOptions13, environment14);
        java.lang.String str16 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        int int15 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("");
        mongoProperties7.setDatabase("hi!");
        java.lang.String str12 = mongoProperties7.getUsername();
        java.lang.Class<?> wildcardClass13 = mongoProperties7.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties7.createMongoClient(mongoClientOptions14, environment15);
        java.lang.String str17 = mongoProperties7.getMongoClientDatabase();
        java.lang.String str18 = mongoProperties7.getUri();
        char[] charArray19 = mongoProperties7.getPassword();
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory27 = mongoClientOptions26.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions26.getReadPreference();
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties7.createMongoClient(mongoClientOptions26, environment29);
        com.mongodb.MongoClientOptions.Builder builder31 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder34 = builder33.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder33.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions37.getDbDecoderFactory();
        boolean boolean39 = mongoClientOptions37.isSocketKeepAlive();
        boolean boolean40 = mongoClientOptions37.isSocketKeepAlive();
        boolean boolean41 = mongoClientOptions37.isSocketKeepAlive();
        com.mongodb.MongoClient mongoClient42 = mongoProperties7.createMongoClient(mongoClientOptions37);
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions37.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder4.writeConcern(writeConcern43);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder46 = builder4.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBEncoderFactory27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(mongoClient42);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        int int14 = mongoClientOptions6.getHeartbeatFrequency();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions6.getWriteConcern();
        int int16 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5000 + "'", int14 == 5000);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxWaitTime(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions10.getReadPreference();
        int int17 = mongoClientOptions10.getMinConnectionsPerHost();
        int int18 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions10.getLocalThreshold();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder46.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.maxConnectionIdleTime(120000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.maxAutoConnectRetryTime((long) 15);
        com.mongodb.MongoClientOptions.Builder builder30 = builder22.maxConnectionIdleTime(10000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxWaitTime(10);
        java.lang.Class<?> wildcardClass33 = builder30.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties2 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties2.setAuthenticationDatabase("");
        mongoProperties2.setDatabase("hi!");
        java.lang.String str7 = mongoProperties2.getUsername();
        java.lang.Class<?> wildcardClass8 = mongoProperties2.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties2.createMongoClient(mongoClientOptions9, environment10);
        java.lang.String str12 = mongoProperties2.getMongoClientDatabase();
        java.lang.String str13 = mongoProperties2.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setAuthenticationDatabase("");
        mongoProperties14.setDatabase("hi!");
        char[] charArray24 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties14.setPassword(charArray24);
        mongoProperties2.setPassword(charArray24);
        mongoProperties0.setPassword(charArray24);
        char[] charArray28 = mongoProperties0.getPassword();
        mongoProperties0.setGridFsDatabase("hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#,  ,  , a,  ]");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getHost();
        char[] charArray6 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 10);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(charArray6);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxAutoConnectRetryTime((long) 52);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold(100);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder18.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency(52);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        int int16 = mongoClientOptions10.getHeartbeatFrequency();
        javax.net.SocketFactory socketFactory17 = mongoClientOptions10.getSocketFactory();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions10.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
        org.junit.Assert.assertNotNull(socketFactory17);
        org.junit.Assert.assertNotNull(readPreference18);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties8.setAuthenticationDatabase("");
        mongoProperties8.setDatabase("hi!");
        char[] charArray18 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties8.setPassword(charArray18);
        mongoProperties0.setPassword(charArray18);
        java.lang.String str21 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties24.createMongoClient(mongoClientOptions25, environment26);
        mongoProperties24.setGridFsDatabase("");
        java.lang.String str30 = mongoProperties24.getUsername();
        java.lang.String str31 = mongoProperties24.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        boolean boolean40 = mongoClientOptions38.isSocketKeepAlive();
        int int41 = mongoClientOptions38.getConnectionsPerHost();
        int int42 = mongoClientOptions38.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient43 = mongoProperties24.createMongoClient(mongoClientOptions38);
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties0.createMongoClient(mongoClientOptions38, environment44);
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder56 = builder52.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder58 = builder52.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder62 = builder58.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder64 = builder58.minConnectionsPerHost(10);
        boolean boolean65 = mongoClientOptions38.equals((java.lang.Object) builder64);
        int int66 = mongoClientOptions38.getMaxWaitTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory67 = mongoClientOptions38.getDbEncoderFactory();
        int int68 = mongoClientOptions38.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 120000 + "'", int66 == 120000);
        org.junit.Assert.assertNotNull(dBEncoderFactory67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.heartbeatFrequency((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder5 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder7 = builder5.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder7.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder10 = builder7.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder7.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory12 = mongoClientOptions11.getDbDecoderFactory();
        int int13 = mongoClientOptions11.getSocketTimeout();
        long long14 = mongoClientOptions11.getMaxAutoConnectRetryTime();
        int int15 = mongoClientOptions11.getMaxConnectionIdleTime();
        com.mongodb.MongoClient mongoClient16 = mongoProperties0.createMongoClient(mongoClientOptions11);
        java.lang.Integer int17 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
        org.junit.Assert.assertNotNull(dBDecoderFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNull(int17);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        int int26 = mongoClientOptions19.getLocalThreshold();
        int int27 = mongoClientOptions19.getAcceptableLatencyDifference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setAuthenticationDatabase("");
        java.lang.String str31 = mongoProperties28.getGridFsDatabase();
        mongoProperties28.setHost("test");
        mongoProperties28.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setAuthenticationDatabase("");
        mongoProperties36.setDatabase("hi!");
        char[] charArray46 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties36.setPassword(charArray46);
        mongoProperties28.setPassword(charArray46);
        java.lang.String str49 = mongoProperties28.getGridFsDatabase();
        mongoProperties28.setUri("hi!");
        boolean boolean52 = mongoClientOptions19.equals((java.lang.Object) mongoProperties28);
        javax.net.SocketFactory socketFactory53 = mongoClientOptions19.getSocketFactory();
        int int54 = mongoClientOptions19.getMaxWaitTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(socketFactory53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 120000 + "'", int54 == 120000);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        java.lang.Object obj15 = null;
        boolean boolean16 = mongoClientOptions6.equals(obj15);
        com.mongodb.WriteConcern writeConcern17 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(writeConcern17);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        com.mongodb.ReadPreference readPreference9 = mongoClientOptions6.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        int int12 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNotNull(readPreference9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatConnectTimeout();
        java.lang.String str9 = mongoClientOptions6.toString();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.description("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder20.localThreshold((int) (byte) 10);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder28);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder28.build();
        java.lang.String str31 = mongoClientOptions30.toString();
        int int32 = mongoClientOptions30.getHeartbeatConnectTimeout();
        int int33 = mongoClientOptions30.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions30.getDbDecoderFactory();
        long long35 = mongoClientOptions30.getMaxAutoConnectRetryTime();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder52 = builder46.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder54 = builder46.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder56 = builder46.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder46.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder46.build();
        com.mongodb.MongoClientOptions.Builder builder61 = builder46.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder63 = builder46.heartbeatSocketTimeout(5);
        boolean boolean64 = mongoClientOptions30.equals((java.lang.Object) builder63);
        com.mongodb.DBEncoderFactory dBEncoderFactory65 = mongoClientOptions30.getDbEncoderFactory();
        java.lang.String str66 = mongoClientOptions30.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20000 + "'", int8 == 20000);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 500 + "'", int33 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.localThreshold((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        boolean boolean22 = mongoClientOptions21.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        int int13 = mongoClientOptions6.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean15 = mongoClientOptions6.isAutoConnectRetry();
        int int16 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int17 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int18 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean13 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int14 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions6.getHeartbeatFrequency();
        int int16 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean17 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatFrequency((int) '#');
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.description("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatThreadCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        int int15 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        boolean boolean17 = mongoClientOptions6.isSocketKeepAlive();
        int int18 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.localThreshold(0);
        com.mongodb.MongoClientOptions.Builder builder46 = builder14.acceptableLatencyDifference((int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder17.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions36.getDbDecoderFactory();
        int int38 = mongoClientOptions36.getHeartbeatConnectTimeout();
        java.lang.String str39 = mongoClientOptions36.toString();
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder48 = builder40.description("test");
        boolean boolean49 = mongoClientOptions36.equals((java.lang.Object) "test");
        int int50 = mongoClientOptions36.getMinHeartbeatFrequency();
        int int51 = mongoClientOptions36.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.WriteConcern writeConcern52 = mongoClientOptions36.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder53 = builder8.writeConcern(writeConcern52);
        com.mongodb.MongoClientOptions.Builder builder55 = builder8.heartbeatFrequency(10000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20000 + "'", int38 == 20000);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 500 + "'", int50 == 500);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(writeConcern52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.description("");
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder30.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions34.getDbEncoderFactory();
        int int36 = mongoClientOptions34.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions34.getDbDecoderFactory();
        int int38 = mongoClientOptions34.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder23.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.heartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder45 = builder40.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.connectionsPerHost((int) '4');
        boolean boolean48 = mongoClientOptions6.equals((java.lang.Object) builder45);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatThreadCount((int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties0.getHost();
        java.lang.String str11 = mongoProperties0.getHost();
        mongoProperties0.setDatabase("");
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str16 = mongoProperties0.getUsername();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        boolean boolean14 = mongoClientOptions6.isAutoConnectRetry();
        java.lang.String str15 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int2 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getDatabase();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        int int11 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str15 = mongoClientOptions6.getRequiredReplicaSetName();
        boolean boolean16 = mongoClientOptions6.isAutoConnectRetry();
        int int17 = mongoClientOptions6.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions32.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder19.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder36 = builder6.writeConcern(writeConcern34);
        com.mongodb.MongoClientOptions.Builder builder38 = builder6.heartbeatSocketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("");
        mongoProperties21.setDatabase("hi!");
        java.lang.String str26 = mongoProperties21.getUsername();
        java.lang.Class<?> wildcardClass27 = mongoProperties21.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions28 = null;
        org.springframework.core.env.Environment environment29 = null;
        com.mongodb.MongoClient mongoClient30 = mongoProperties21.createMongoClient(mongoClientOptions28, environment29);
        java.lang.String str31 = mongoProperties21.getMongoClientDatabase();
        java.lang.String str32 = mongoProperties21.getUri();
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory40 = mongoClientOptions39.getDbDecoderFactory();
        int int41 = mongoClientOptions39.getMaxConnectionIdleTime();
        int int42 = mongoClientOptions39.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference43 = mongoClientOptions39.getReadPreference();
        com.mongodb.MongoClient mongoClient44 = mongoProperties21.createMongoClient(mongoClientOptions39);
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions39.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder20.dbDecoderFactory(dBDecoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.connectTimeout(20000);
        com.mongodb.MongoClientOptions mongoClientOptions49 = builder46.build();
        int int50 = mongoClientOptions49.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "mongodb://localhost/test" + "'", str32, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBDecoderFactory40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 500 + "'", int42 == 500);
        org.junit.Assert.assertNotNull(readPreference43);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(mongoClientOptions49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getUri();
        mongoProperties0.setHost("test");
        mongoProperties0.setDatabase("test");
        mongoProperties0.setHost("hi!");
        java.lang.String str16 = mongoProperties0.getHost();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean15 = mongoClientOptions6.isAlwaysUseMBeans();
        int int16 = mongoClientOptions6.getLocalThreshold();
        int int17 = mongoClientOptions6.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions6.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int12 = mongoClientOptions6.getConnectTimeout();
        int int13 = mongoClientOptions6.getMinConnectionsPerHost();
        java.lang.String str14 = mongoClientOptions6.getDescription();
        int int15 = mongoClientOptions6.getConnectionsPerHost();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions6.getSocketFactory();
        int int17 = mongoClientOptions6.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10000 + "'", int12 == 10000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder8.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectionsPerHost((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean15 = mongoClientOptions6.isAlwaysUseMBeans();
        int int16 = mongoClientOptions6.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.socketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        int int16 = mongoClientOptions10.getConnectTimeout();
        int int17 = mongoClientOptions10.getLocalThreshold();
        long long18 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int19 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10000 + "'", int16 == 10000);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder26.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxAutoConnectRetryTime((long) 10);
        boolean boolean39 = mongoClientOptions10.equals((java.lang.Object) builder38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder45 = builder41.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str15 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray16 = mongoProperties0.getPassword();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(charArray16);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getUri();
        char[] charArray14 = mongoProperties0.getPassword();
        char[] charArray15 = mongoProperties0.getPassword();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray14);
        org.junit.Assert.assertNull(charArray15);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.maxConnectionLifeTime(0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.String str23 = mongoClientOptions19.getRequiredReplicaSetName();
        int int24 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions19.getDbEncoderFactory();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) 20000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder24.localThreshold((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatSocketTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder26.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(1);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder24);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(27017);
        boolean boolean45 = mongoClientOptions6.equals((java.lang.Object) 27017);
        int int46 = mongoClientOptions6.getHeartbeatFrequency();
        int int47 = mongoClientOptions6.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory48 = mongoClientOptions6.getSocketFactory();
        java.lang.String str49 = mongoClientOptions6.toString();
        boolean boolean50 = mongoClientOptions6.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5000 + "'", int46 == 5000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertNotNull(socketFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("");
        mongoProperties11.setDatabase("hi!");
        java.lang.String str16 = mongoProperties11.getUsername();
        java.lang.Integer int17 = mongoProperties11.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties18.setAuthenticationDatabase("");
        mongoProperties18.setDatabase("hi!");
        java.lang.String str23 = mongoProperties18.getUsername();
        mongoProperties18.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray30 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties18.setPassword(charArray30);
        mongoProperties11.setPassword(charArray30);
        mongoProperties0.setPassword(charArray30);
        java.lang.String str34 = mongoProperties0.getHost();
        mongoProperties0.clearPassword();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions10 = null;
        org.springframework.core.env.Environment environment11 = null;
        com.mongodb.MongoClient mongoClient12 = mongoProperties9.createMongoClient(mongoClientOptions10, environment11);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties9.createMongoClient(mongoClientOptions19, environment21);
        int int23 = mongoClientOptions19.getSocketTimeout();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions19);
        javax.net.SocketFactory socketFactory26 = mongoClientOptions19.getSocketFactory();
        int int27 = mongoClientOptions19.getConnectTimeout();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 120000 + "'", int24 == 120000);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10000 + "'", int27 == 10000);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getHeartbeatSocketTimeout();
        int int13 = mongoClientOptions6.getHeartbeatThreadCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20000 + "'", int12 == 20000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder50 = builder14.threadsAllowedToBlockForConnectionMultiplier((int) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        int int13 = mongoClientOptions6.getHeartbeatConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        int int15 = mongoClientOptions6.getConnectTimeout();
        int int16 = mongoClientOptions6.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10000 + "'", int15 == 10000);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatSocketTimeout((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder12.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUsername();
        mongoProperties0.setHost("hi!");
        java.lang.String str14 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str15 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray16 = mongoProperties0.getPassword();
        mongoProperties0.clearPassword();
        java.lang.String str18 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(charArray16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "mongodb://localhost/test" + "'", str18, "mongodb://localhost/test");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setPort((java.lang.Integer) 20000);
        java.lang.String str3 = mongoProperties0.getDatabase();
        java.lang.String str4 = mongoProperties0.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getSocketTimeout();
        int int20 = mongoClientOptions15.getLocalThreshold();
        int int21 = mongoClientOptions15.getHeartbeatFrequency();
        int int22 = mongoClientOptions15.getSocketTimeout();
        int int23 = mongoClientOptions15.getMaxWaitTime();
        com.mongodb.MongoClient mongoClient24 = mongoProperties0.createMongoClient(mongoClientOptions15);
        java.lang.String str25 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5000 + "'", int21 == 5000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 120000 + "'", int23 == 120000);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.maxWaitTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) 20000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.heartbeatThreadCount((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        mongoProperties0.setPort((java.lang.Integer) 52);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.heartbeatConnectTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.description("");
        com.mongodb.MongoClientOptions.Builder builder62 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder64.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder67 = builder64.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder64.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory69 = mongoClientOptions68.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern70 = mongoClientOptions68.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder71 = builder59.writeConcern(writeConcern70);
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder75 = builder71.acceptableLatencyDifference(5000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(dBEncoderFactory69);
        org.junit.Assert.assertNotNull(writeConcern70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectRetryFrequency(15);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        java.lang.Class<?> wildcardClass29 = mongoProperties23.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions30 = null;
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties23.createMongoClient(mongoClientOptions30, environment31);
        java.lang.String str33 = mongoProperties23.getMongoClientDatabase();
        java.lang.String str34 = mongoProperties23.getUri();
        char[] charArray35 = mongoProperties23.getPassword();
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory43 = mongoClientOptions42.getDbDecoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient45 = mongoProperties23.createMongoClient(mongoClientOptions42);
        int int46 = mongoClientOptions42.getHeartbeatSocketTimeout();
        int int47 = mongoClientOptions42.getHeartbeatThreadCount();
        int int48 = mongoClientOptions42.getConnectionsPerHost();
        int int49 = mongoClientOptions42.getHeartbeatConnectRetryFrequency();
        int int50 = mongoClientOptions42.getSocketTimeout();
        com.mongodb.ReadPreference readPreference51 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder52 = builder22.readPreference(readPreference51);
        com.mongodb.MongoClientOptions.Builder builder53 = builder22.legacyDefaults();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder55 = builder53.connectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "mongodb://localhost/test" + "'", str34, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBDecoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20000 + "'", int44 == 20000);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 500 + "'", int49 == 500);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(readPreference51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder20.build();
        int int22 = mongoClientOptions21.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        int int35 = mongoClientOptions10.getMaxWaitTime();
        int int36 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int37 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int38 = mongoClientOptions10.getHeartbeatThreadCount();
        int int39 = mongoClientOptions10.getHeartbeatThreadCount();
        int int40 = mongoClientOptions10.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20000 + "'", int36 == 20000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120000 + "'", int40 == 120000);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatConnectTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.description("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder44.build();
        int int46 = mongoClientOptions45.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder48 = builder10.writeConcern(writeConcern47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder59 = builder57.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder61 = builder57.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.description("");
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder67 = builder63.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder69.build();
        int int71 = mongoClientOptions70.getAcceptableLatencyDifference();
        boolean boolean72 = mongoClientOptions70.isAutoConnectRetry();
        com.mongodb.WriteConcern writeConcern73 = mongoClientOptions70.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder74 = builder48.writeConcern(writeConcern73);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder76 = builder48.minConnectionsPerHost((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 15 + "'", int71 == 15);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(writeConcern73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = builder40.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder40.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory45 = mongoClientOptions44.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder46 = builder37.dbEncoderFactory(dBEncoderFactory45);
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder57 = builder53.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder59 = builder53.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder60 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.description("");
        com.mongodb.MongoClientOptions.Builder builder74 = builder70.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder76 = builder74.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder77 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder80 = builder79.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder82 = builder79.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions83 = builder79.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory84 = mongoClientOptions83.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference85 = mongoClientOptions83.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder86 = builder76.readPreference(readPreference85);
        com.mongodb.MongoClientOptions.Builder builder87 = builder53.readPreference(readPreference85);
        com.mongodb.MongoClientOptions.Builder builder88 = builder37.readPreference(readPreference85);
        com.mongodb.MongoClientOptions.Builder builder89 = builder22.readPreference(readPreference85);
        com.mongodb.MongoClientOptions.Builder builder91 = builder22.connectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder93 = builder22.heartbeatThreadCount(5);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(dBEncoderFactory45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(mongoClientOptions83);
        org.junit.Assert.assertNotNull(dBEncoderFactory84);
        org.junit.Assert.assertNotNull(readPreference85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        long long11 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int12 = mongoClientOptions6.getHeartbeatThreadCount();
        int int13 = mongoClientOptions6.getMaxWaitTime();
        int int14 = mongoClientOptions6.getLocalThreshold();
        boolean boolean15 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int16 = mongoClientOptions6.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5000 + "'", int16 == 5000);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getHeartbeatConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory21 = mongoClientOptions10.getDbDecoderFactory();
        java.lang.String str22 = mongoClientOptions10.getRequiredReplicaSetName();
        int int23 = mongoClientOptions10.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20000 + "'", int20 == 20000);
        org.junit.Assert.assertNotNull(dBDecoderFactory21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.acceptableLatencyDifference((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount(120000);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray12 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties0.setPassword(charArray12);
        java.lang.String str14 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 97);
        java.lang.String str17 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "##a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, #, a,  ]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatThreadCount(5);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.minConnectionsPerHost(120000);
        com.mongodb.MongoClientOptions.Builder builder49 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder51.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder51.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory56 = mongoClientOptions55.getDbEncoderFactory();
        boolean boolean57 = mongoClientOptions55.isSocketKeepAlive();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions55.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder44.dbDecoderFactory(dBDecoderFactory58);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.maxConnectionIdleTime(500);
        java.lang.Class<?> wildcardClass62 = builder59.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(dBEncoderFactory56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        int int25 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        int int25 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder16.heartbeatSocketTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.minConnectionsPerHost((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxAutoConnectRetryTime((long) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.connectTimeout(10000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        boolean boolean22 = mongoClientOptions19.isAutoConnectRetry();
        int int23 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions10.getSocketFactory();
        boolean boolean17 = mongoClientOptions10.isAutoConnectRetry();
        boolean boolean18 = mongoClientOptions10.isCursorFinalizerEnabled();
        int int19 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean20 = mongoClientOptions10.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        int int11 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        java.lang.String str14 = mongoClientOptions6.getDescription();
        java.lang.String str15 = mongoClientOptions6.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder39 = builder31.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder31.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.autoConnectRetry(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties44.createMongoClient(mongoClientOptions45, environment46);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions54.getDbEncoderFactory();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties44.createMongoClient(mongoClientOptions54, environment56);
        int int58 = mongoClientOptions54.getSocketTimeout();
        int int59 = mongoClientOptions54.getLocalThreshold();
        javax.net.SocketFactory socketFactory60 = mongoClientOptions54.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder61 = builder43.socketFactory(socketFactory60);
        com.mongodb.MongoClientOptions.Builder builder62 = builder18.socketFactory(socketFactory60);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder64 = builder18.minHeartbeatFrequency(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(socketFactory60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        int int25 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder16.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder32 = builder16.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.heartbeatFrequency(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.maxAutoConnectRetryTime((long) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        char[] charArray17 = mongoProperties0.getPassword();
        java.lang.String str18 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions19);
        java.lang.String str21 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(charArray17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.connectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.maxAutoConnectRetryTime((long) 52);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        java.lang.String str27 = mongoClientOptions23.getDescription();
        com.mongodb.ReadPreference readPreference28 = mongoClientOptions23.getReadPreference();
        java.lang.String str29 = mongoClientOptions23.getDescription();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder12.build();
        int int33 = mongoClientOptions32.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(readPreference28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.heartbeatConnectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder28.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        int int17 = mongoClientOptions10.getHeartbeatConnectTimeout();
        javax.net.SocketFactory socketFactory18 = mongoClientOptions10.getSocketFactory();
        int int19 = mongoClientOptions10.getMinHeartbeatFrequency();
        int int20 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int21 = mongoClientOptions10.getHeartbeatConnectTimeout();
        java.lang.String str22 = mongoClientOptions10.getDescription();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions10.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20000 + "'", int17 == 20000);
        org.junit.Assert.assertNotNull(socketFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 500 + "'", int19 == 500);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.toString();
        int int9 = mongoClientOptions6.getLocalThreshold();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties10.setAuthenticationDatabase("");
        mongoProperties10.setDatabase("hi!");
        java.lang.String str15 = mongoProperties10.getUsername();
        java.lang.Class<?> wildcardClass16 = mongoProperties10.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions17 = null;
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties10.createMongoClient(mongoClientOptions17, environment18);
        java.lang.String str20 = mongoProperties10.getMongoClientDatabase();
        java.lang.String str21 = mongoProperties10.getUri();
        char[] charArray22 = mongoProperties10.getPassword();
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions29.getReadPreference();
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties10.createMongoClient(mongoClientOptions29, environment32);
        com.mongodb.DBDecoderFactory dBDecoderFactory34 = mongoClientOptions29.getDbDecoderFactory();
        int int35 = mongoClientOptions29.getHeartbeatConnectRetryFrequency();
        boolean boolean36 = mongoClientOptions6.equals((java.lang.Object) int35);
        boolean boolean37 = mongoClientOptions6.isSocketKeepAlive();
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(dBDecoderFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(writeConcern38);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions6.isAlwaysUseMBeans();
        int int13 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setDatabase("");
        java.lang.Integer int4 = mongoProperties0.getPort();
        java.lang.String str5 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.clearPassword();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions13.getDbDecoderFactory();
        int int15 = mongoClientOptions13.getSocketTimeout();
        long long16 = mongoClientOptions13.getMaxAutoConnectRetryTime();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions13, environment17);
        java.lang.Class<?> wildcardClass19 = mongoClientOptions13.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int13 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        mongoProperties14.setUsername("");
        mongoProperties14.setUsername("mongodb://localhost/test");
        boolean boolean32 = mongoClientOptions6.equals((java.lang.Object) "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20000 + "'", int13 == 20000);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        java.lang.String str14 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.WriteConcern writeConcern15 = mongoClientOptions6.getWriteConcern();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean17 = mongoClientOptions6.isAlwaysUseMBeans();
        int int18 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(writeConcern15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.localThreshold(27017);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(1);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder24);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(27017);
        boolean boolean45 = mongoClientOptions6.equals((java.lang.Object) 27017);
        int int46 = mongoClientOptions6.getHeartbeatFrequency();
        int int47 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int48 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int49 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5000 + "'", int46 == 5000);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20000 + "'", int47 == 20000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        java.lang.String str12 = mongoClientOptions6.getRequiredReplicaSetName();
        int int13 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder23 = new com.mongodb.MongoClientOptions.Builder();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties24 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions25 = null;
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties24.createMongoClient(mongoClientOptions25, environment26);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder30.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder33 = builder30.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions34 = builder30.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory35 = mongoClientOptions34.getDbEncoderFactory();
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties24.createMongoClient(mongoClientOptions34, environment36);
        java.lang.String str38 = mongoClientOptions34.getDescription();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions34.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder23.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder10.readPreference(readPreference39);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties42.setAuthenticationDatabase("");
        mongoProperties42.setDatabase("hi!");
        java.lang.String str47 = mongoProperties42.getUsername();
        java.lang.String str48 = mongoProperties42.getDatabase();
        java.lang.String str49 = mongoProperties42.getUsername();
        com.mongodb.MongoClientOptions.Builder builder50 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder53 = builder52.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder55 = builder52.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions56 = builder52.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory57 = mongoClientOptions56.getDbDecoderFactory();
        int int58 = mongoClientOptions56.getMaxConnectionIdleTime();
        boolean boolean59 = mongoClientOptions56.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment60 = null;
        com.mongodb.MongoClient mongoClient61 = mongoProperties42.createMongoClient(mongoClientOptions56, environment60);
        int int62 = mongoClientOptions56.getHeartbeatFrequency();
        int int63 = mongoClientOptions56.getConnectionsPerHost();
        com.mongodb.WriteConcern writeConcern64 = mongoClientOptions56.getWriteConcern();
        com.mongodb.ReadPreference readPreference65 = mongoClientOptions56.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder66 = builder10.readPreference(readPreference65);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(mongoClientOptions34);
        org.junit.Assert.assertNotNull(dBEncoderFactory35);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(mongoClientOptions56);
        org.junit.Assert.assertNotNull(dBDecoderFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mongoClient61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5000 + "'", int62 == 5000);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(writeConcern64);
        org.junit.Assert.assertNotNull(readPreference65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str10 = mongoClientOptions6.toString();
        java.lang.String str11 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str11 = mongoProperties0.getHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        int int19 = mongoClientOptions10.getHeartbeatFrequency();
        boolean boolean20 = mongoClientOptions10.isAutoConnectRetry();
        int int21 = mongoClientOptions10.getMaxWaitTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 500 + "'", int18 == 500);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5000 + "'", int19 == 5000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 120000 + "'", int21 == 120000);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder17.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder8.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory37 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions36.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder40 = builder29.dbDecoderFactory(dBDecoderFactory39);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions47.getDbDecoderFactory();
        int int49 = mongoClientOptions47.getMaxConnectionIdleTime();
        int int50 = mongoClientOptions47.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern51 = mongoClientOptions47.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder52 = builder29.writeConcern(writeConcern51);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime(97);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties55 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions56 = null;
        org.springframework.core.env.Environment environment57 = null;
        com.mongodb.MongoClient mongoClient58 = mongoProperties55.createMongoClient(mongoClientOptions56, environment57);
        com.mongodb.MongoClientOptions.Builder builder59 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder62 = builder61.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder64 = builder61.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions65 = builder61.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory66 = mongoClientOptions65.getDbEncoderFactory();
        org.springframework.core.env.Environment environment67 = null;
        com.mongodb.MongoClient mongoClient68 = mongoProperties55.createMongoClient(mongoClientOptions65, environment67);
        java.lang.String str69 = mongoClientOptions65.getDescription();
        com.mongodb.ReadPreference readPreference70 = mongoClientOptions65.getReadPreference();
        java.lang.String str71 = mongoClientOptions65.getDescription();
        int int72 = mongoClientOptions65.getMaxConnectionIdleTime();
        boolean boolean73 = mongoClientOptions65.isSocketKeepAlive();
        boolean boolean74 = mongoClientOptions65.isAutoConnectRetry();
        com.mongodb.DBEncoderFactory dBEncoderFactory75 = mongoClientOptions65.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder76 = builder54.dbEncoderFactory(dBEncoderFactory75);
        com.mongodb.MongoClientOptions.Builder builder78 = builder54.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder80 = builder54.localThreshold(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBDecoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 500 + "'", int50 == 500);
        org.junit.Assert.assertNotNull(writeConcern51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClient58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(mongoClientOptions65);
        org.junit.Assert.assertNotNull(dBEncoderFactory66);
        org.junit.Assert.assertNotNull(mongoClient68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(readPreference70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.cursorFinalizerEnabled(true);
        java.lang.Class<?> wildcardClass17 = builder16.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setDatabase("test");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.acceptableLatencyDifference((int) (short) 0);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties31 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties31.setAuthenticationDatabase("");
        mongoProperties31.setDatabase("hi!");
        java.lang.String str36 = mongoProperties31.getUsername();
        java.lang.Class<?> wildcardClass37 = mongoProperties31.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties31.createMongoClient(mongoClientOptions38, environment39);
        java.lang.String str41 = mongoProperties31.getMongoClientDatabase();
        java.lang.String str42 = mongoProperties31.getUri();
        char[] charArray43 = mongoProperties31.getPassword();
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder47 = builder46.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder49 = builder46.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions50 = builder46.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory51 = mongoClientOptions50.getDbDecoderFactory();
        int int52 = mongoClientOptions50.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient53 = mongoProperties31.createMongoClient(mongoClientOptions50);
        int int54 = mongoClientOptions50.getHeartbeatSocketTimeout();
        int int55 = mongoClientOptions50.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory56 = mongoClientOptions50.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder57 = builder28.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder58 = builder18.socketFactory(socketFactory56);
        com.mongodb.MongoClientOptions.Builder builder60 = builder18.heartbeatSocketTimeout((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "mongodb://localhost/test" + "'", str42, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(mongoClientOptions50);
        org.junit.Assert.assertNotNull(dBDecoderFactory51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20000 + "'", int52 == 20000);
        org.junit.Assert.assertNotNull(mongoClient53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20000 + "'", int54 == 20000);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(socketFactory56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        boolean boolean23 = mongoClientOptions21.isSocketKeepAlive();
        boolean boolean24 = mongoClientOptions21.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.dbEncoderFactory(dBEncoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("");
        com.mongodb.MongoClientOptions.Builder builder43 = builder39.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder45 = builder39.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder47 = builder39.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder52 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder54.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder57 = builder54.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions58 = builder54.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory59 = mongoClientOptions58.getDbEncoderFactory();
        int int60 = mongoClientOptions58.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory61 = mongoClientOptions58.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference62 = mongoClientOptions58.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder63 = builder49.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder26.readPreference(readPreference62);
        com.mongodb.MongoClientOptions.Builder builder66 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.connectTimeout(1);
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.socketKeepAlive(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(mongoClientOptions58);
        org.junit.Assert.assertNotNull(dBEncoderFactory59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory61);
        org.junit.Assert.assertNotNull(readPreference62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder22 = builder20.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatConnectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder8.socketTimeout((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.String str6 = mongoProperties0.getGridFsDatabase();
        java.lang.Class<?> wildcardClass7 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        java.lang.String str9 = mongoProperties0.getHost();
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setPort((java.lang.Integer) 1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "test" + "'", str10, "test");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setUri("");
        java.lang.String str11 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        char[] charArray10 = null;
        mongoProperties0.setPassword(charArray10);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatThreadCount(20000);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder33 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder35.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions39 = builder35.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory40 = mongoClientOptions39.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern41 = mongoClientOptions39.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder42 = builder32.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder43 = builder15.writeConcern(writeConcern41);
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketKeepAlive(false);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties57 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions58 = null;
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties57.createMongoClient(mongoClientOptions58, environment59);
        com.mongodb.MongoClientOptions.Builder builder61 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder63.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder66 = builder63.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions67 = builder63.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory68 = mongoClientOptions67.getDbEncoderFactory();
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties57.createMongoClient(mongoClientOptions67, environment69);
        int int71 = mongoClientOptions67.getAcceptableLatencyDifference();
        int int72 = mongoClientOptions67.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory73 = mongoClientOptions67.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory74 = mongoClientOptions67.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder75 = builder56.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder76 = builder15.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder77 = builder10.dbEncoderFactory(dBEncoderFactory74);
        com.mongodb.MongoClientOptions.Builder builder79 = builder10.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions80 = builder10.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(mongoClientOptions39);
        org.junit.Assert.assertNotNull(dBEncoderFactory40);
        org.junit.Assert.assertNotNull(writeConcern41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClientOptions67);
        org.junit.Assert.assertNotNull(dBEncoderFactory68);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5000 + "'", int72 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory73);
        org.junit.Assert.assertNotNull(dBEncoderFactory74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(mongoClientOptions80);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        int int27 = mongoClientOptions25.getSocketTimeout();
        long long28 = mongoClientOptions25.getMaxAutoConnectRetryTime();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        int int30 = mongoClientOptions25.getHeartbeatThreadCount();
        boolean boolean31 = mongoClientOptions25.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions25.getReadPreference();
        int int33 = mongoClientOptions25.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.description("");
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder49 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder52 = builder51.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder54 = builder51.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions55 = builder51.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions55.getDbDecoderFactory();
        int int57 = mongoClientOptions55.getMaxConnectionIdleTime();
        int int58 = mongoClientOptions55.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions55.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder60 = builder44.readPreference(readPreference59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder44.minConnectionsPerHost((int) (byte) 1);
        boolean boolean63 = mongoClientOptions25.equals((java.lang.Object) builder62);
        int int64 = mongoClientOptions25.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory65 = mongoClientOptions25.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder18.socketFactory(socketFactory65);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder68 = builder18.heartbeatSocketTimeout((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(mongoClientOptions55);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 500 + "'", int58 == 500);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(socketFactory65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setGridFsDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 10000);
        char[] charArray5 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(charArray5);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectRetryFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions mongoClientOptions11 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(mongoClientOptions11);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        int int10 = mongoClientOptions6.getConnectTimeout();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertNotNull(socketFactory11);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder25 = builder19.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder28 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder32.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder39 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder41.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder41.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory46 = mongoClientOptions45.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern47 = mongoClientOptions45.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder48 = builder38.writeConcern(writeConcern47);
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions57.getDbEncoderFactory();
        int int59 = mongoClientOptions57.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory60 = mongoClientOptions57.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder50.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder25.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder12.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder65 = builder64.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder67 = builder65.description("test");
        com.mongodb.MongoClientOptions.Builder builder69 = builder65.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder71 = builder69.requiredReplicaSetName("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(dBEncoderFactory46);
        org.junit.Assert.assertNotNull(writeConcern47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions mongoClientOptions5 = null;
        com.mongodb.MongoClient mongoClient6 = mongoProperties0.createMongoClient(mongoClientOptions5);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str8 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties9 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties9.setAuthenticationDatabase("");
        mongoProperties9.setDatabase("hi!");
        java.lang.String str14 = mongoProperties9.getUsername();
        java.lang.Class<?> wildcardClass15 = mongoProperties9.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties9.createMongoClient(mongoClientOptions16, environment17);
        java.lang.String str19 = mongoProperties9.getMongoClientDatabase();
        java.lang.String str20 = mongoProperties9.getDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties21.setAuthenticationDatabase("");
        mongoProperties21.setDatabase("hi!");
        java.lang.String str26 = mongoProperties21.getUsername();
        java.lang.Integer int27 = mongoProperties21.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setAuthenticationDatabase("");
        mongoProperties28.setDatabase("hi!");
        java.lang.String str33 = mongoProperties28.getUsername();
        mongoProperties28.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray40 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties28.setPassword(charArray40);
        mongoProperties21.setPassword(charArray40);
        mongoProperties9.setPassword(charArray40);
        mongoProperties0.setPassword(charArray40);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties45 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties45.setAuthenticationDatabase("");
        mongoProperties45.setDatabase("hi!");
        char[] charArray55 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties45.setPassword(charArray55);
        java.lang.Integer int57 = mongoProperties45.getPort();
        java.lang.Integer int58 = mongoProperties45.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties59 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions60 = null;
        org.springframework.core.env.Environment environment61 = null;
        com.mongodb.MongoClient mongoClient62 = mongoProperties59.createMongoClient(mongoClientOptions60, environment61);
        com.mongodb.MongoClientOptions.Builder builder63 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder65 = builder63.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder65.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder68 = builder65.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions69 = builder65.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory70 = mongoClientOptions69.getDbEncoderFactory();
        org.springframework.core.env.Environment environment71 = null;
        com.mongodb.MongoClient mongoClient72 = mongoProperties59.createMongoClient(mongoClientOptions69, environment71);
        java.lang.String str73 = mongoClientOptions69.getDescription();
        com.mongodb.MongoClient mongoClient74 = mongoProperties45.createMongoClient(mongoClientOptions69);
        int int75 = mongoClientOptions69.getMinHeartbeatFrequency();
        int int76 = mongoClientOptions69.getSocketTimeout();
        boolean boolean77 = mongoClientOptions69.isSocketKeepAlive();
        org.springframework.core.env.Environment environment78 = null;
        com.mongodb.MongoClient mongoClient79 = mongoProperties0.createMongoClient(mongoClientOptions69, environment78);
        int int80 = mongoClientOptions69.getMinConnectionsPerHost();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(mongoClient6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int57);
        org.junit.Assert.assertNull(int58);
        org.junit.Assert.assertNotNull(mongoClient62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(mongoClientOptions69);
        org.junit.Assert.assertNotNull(dBEncoderFactory70);
        org.junit.Assert.assertNotNull(mongoClient72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(mongoClient74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 500 + "'", int75 == 500);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(mongoClient79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.toString();
        int int9 = mongoClientOptions6.getLocalThreshold();
        int int10 = mongoClientOptions6.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.connectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.connectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.connectionsPerHost(15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.localThreshold((int) '#');
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.requiredReplicaSetName("test");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean8 = mongoClientOptions6.isSocketKeepAlive();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        java.lang.String str11 = mongoClientOptions6.toString();
        int int12 = mongoClientOptions6.getConnectionsPerHost();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions6.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        long long10 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str11 = mongoClientOptions6.getDescription();
        boolean boolean12 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getHost();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        mongoProperties0.setUri("");
        mongoProperties0.clearPassword();
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions27.getDbDecoderFactory();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder20.readPreference(readPreference31);
        boolean boolean33 = mongoClientOptions10.equals((java.lang.Object) builder20);
        boolean boolean34 = mongoClientOptions10.isAutoConnectRetry();
        int int35 = mongoClientOptions10.getHeartbeatThreadCount();
        java.lang.String str36 = mongoClientOptions10.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory33 = mongoClientOptions32.getDbDecoderFactory();
        int int34 = mongoClientOptions32.getSocketTimeout();
        int int35 = mongoClientOptions32.getSocketTimeout();
        java.lang.String str36 = mongoClientOptions32.getRequiredReplicaSetName();
        long long37 = mongoClientOptions32.getMaxAutoConnectRetryTime();
        boolean boolean38 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions32);
        int int39 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean40 = mongoClientOptions19.isSocketKeepAlive();
        int int41 = mongoClientOptions19.getMaxWaitTime();
        java.lang.String str42 = mongoClientOptions19.getDescription();
        java.lang.String str43 = mongoClientOptions19.getDescription();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBDecoderFactory33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 120000 + "'", int41 == 120000);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        java.lang.String str12 = mongoProperties0.getHost();
        java.lang.String str13 = mongoProperties0.getHost();
        mongoProperties0.setGridFsDatabase("test");
        java.lang.String str16 = mongoProperties0.getUri();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "mongodb://localhost/test" + "'", str16, "mongodb://localhost/test");
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        com.mongodb.WriteConcern writeConcern22 = mongoClientOptions19.getWriteConcern();
        int int23 = mongoClientOptions19.getMaxWaitTime();
        long long24 = mongoClientOptions19.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions19.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(writeConcern22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getConnectionsPerHost();
        int int18 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int19 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int20 = mongoClientOptions10.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions10.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions10.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getConnectTimeout();
        java.lang.String str12 = mongoClientOptions6.getRequiredReplicaSetName();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minHeartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.autoConnectRetry(false);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder16.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray11 = mongoProperties0.getPassword();
        java.lang.String str12 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(charArray11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder21.build();
        boolean boolean23 = mongoClientOptions22.isSocketKeepAlive();
        int int24 = mongoClientOptions22.getAcceptableLatencyDifference();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxWaitTime(10000);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference18 = mongoClientOptions10.getReadPreference();
        int int19 = mongoClientOptions10.getSocketTimeout();
        int int20 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        int int21 = mongoClientOptions10.getConnectionsPerHost();
        int int22 = mongoClientOptions10.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
        org.junit.Assert.assertNotNull(readPreference18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        boolean boolean13 = mongoClientOptions6.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions6.getReadPreference();
        int int15 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setPort((java.lang.Integer) 20000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties7 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties7.setAuthenticationDatabase("");
        mongoProperties7.setDatabase("hi!");
        java.lang.String str12 = mongoProperties7.getUsername();
        mongoProperties7.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray19 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties7.setPassword(charArray19);
        java.lang.String str21 = mongoProperties7.getGridFsDatabase();
        java.lang.String str22 = mongoProperties7.getHost();
        mongoProperties7.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Integer int25 = mongoProperties7.getPort();
        char[] charArray26 = mongoProperties7.getPassword();
        mongoProperties0.setPassword(charArray26);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions29 = null;
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties28.createMongoClient(mongoClientOptions29, environment30);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory39 = mongoClientOptions38.getDbEncoderFactory();
        org.springframework.core.env.Environment environment40 = null;
        com.mongodb.MongoClient mongoClient41 = mongoProperties28.createMongoClient(mongoClientOptions38, environment40);
        int int42 = mongoClientOptions38.getSocketTimeout();
        int int43 = mongoClientOptions38.getLocalThreshold();
        int int44 = mongoClientOptions38.getHeartbeatFrequency();
        int int45 = mongoClientOptions38.getSocketTimeout();
        int int46 = mongoClientOptions38.getMaxWaitTime();
        java.lang.String str47 = mongoClientOptions38.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions38.getReadPreference();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties0.createMongoClient(mongoClientOptions38, environment49);
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBEncoderFactory39);
        org.junit.Assert.assertNotNull(mongoClient41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5000 + "'", int44 == 5000);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 120000 + "'", int46 == 120000);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertNotNull(mongoClient50);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder4.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatThreadCount((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.heartbeatThreadCount(5);
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.localThreshold(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.autoConnectRetry(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.description("");
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder18.build();
        int int22 = mongoClientOptions21.getSocketTimeout();
        int int23 = mongoClientOptions21.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions21.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean12 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean13 = mongoClientOptions6.isCursorFinalizerEnabled();
        int int14 = mongoClientOptions6.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory15 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(socketFactory15);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost(52);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions57.getDbDecoderFactory();
        int int59 = mongoClientOptions57.getMaxConnectionIdleTime();
        int int60 = mongoClientOptions57.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder46.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder35.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder28.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder68.cursorFinalizerEnabled(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 500 + "'", int60 == 500);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder14 = builder12.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setPort((java.lang.Integer) 27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties11 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties11.setAuthenticationDatabase("");
        mongoProperties11.setDatabase("hi!");
        java.lang.String str16 = mongoProperties11.getUsername();
        java.lang.Class<?> wildcardClass17 = mongoProperties11.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions18 = null;
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties11.createMongoClient(mongoClientOptions18, environment19);
        java.lang.String str21 = mongoProperties11.getMongoClientDatabase();
        java.lang.String str22 = mongoProperties11.getUri();
        char[] charArray23 = mongoProperties11.getPassword();
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder26.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions30.getReadPreference();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties11.createMongoClient(mongoClientOptions30, environment33);
        com.mongodb.MongoClient mongoClient35 = mongoProperties0.createMongoClient(mongoClientOptions30);
        javax.net.SocketFactory socketFactory36 = mongoClientOptions30.getSocketFactory();
        int int37 = mongoClientOptions30.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "mongodb://localhost/test" + "'", str22, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNotNull(mongoClient35);
        org.junit.Assert.assertNotNull(socketFactory36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.alwaysUseMBeans(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder22.build();
        int int24 = mongoClientOptions23.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder45 = builder43.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties46.setAuthenticationDatabase("");
        mongoProperties46.setDatabase("hi!");
        java.lang.String str51 = mongoProperties46.getUsername();
        java.lang.Class<?> wildcardClass52 = mongoProperties46.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.springframework.core.env.Environment environment54 = null;
        com.mongodb.MongoClient mongoClient55 = mongoProperties46.createMongoClient(mongoClientOptions53, environment54);
        java.lang.String str56 = mongoProperties46.getMongoClientDatabase();
        java.lang.String str57 = mongoProperties46.getUri();
        com.mongodb.MongoClientOptions.Builder builder58 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder60 = builder58.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder61 = builder60.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder63 = builder60.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions64 = builder60.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions64.getDbDecoderFactory();
        int int66 = mongoClientOptions64.getMaxConnectionIdleTime();
        int int67 = mongoClientOptions64.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference68 = mongoClientOptions64.getReadPreference();
        com.mongodb.MongoClient mongoClient69 = mongoProperties46.createMongoClient(mongoClientOptions64);
        com.mongodb.DBDecoderFactory dBDecoderFactory70 = mongoClientOptions64.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder71 = builder45.dbDecoderFactory(dBDecoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder72 = builder24.dbDecoderFactory(dBDecoderFactory70);
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.heartbeatThreadCount((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder76 = builder72.localThreshold(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "mongodb://localhost/test" + "'", str57, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(mongoClientOptions64);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 500 + "'", int67 == 500);
        org.junit.Assert.assertNotNull(readPreference68);
        org.junit.Assert.assertNotNull(mongoClient69);
        org.junit.Assert.assertNotNull(dBDecoderFactory70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        int int22 = mongoClientOptions15.getMaxConnectionIdleTime();
        int int23 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.heartbeatConnectTimeout(1);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder10.build();
        com.mongodb.MongoClientOptions.Builder builder25 = builder10.acceptableLatencyDifference(5);
        com.mongodb.MongoClientOptions.Builder builder27 = builder10.heartbeatSocketTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatSocketTimeout(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.clearPassword();
        java.lang.String str2 = mongoProperties0.getUsername();
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount(5);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUsername("hi!");
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.connectionsPerHost(20000);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.socketKeepAlive(false);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder26 = builder24.minHeartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        boolean boolean9 = mongoClientOptions6.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory10 = mongoClientOptions6.getSocketFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(socketFactory10);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        boolean boolean24 = mongoClientOptions19.isAlwaysUseMBeans();
        int int25 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getDatabase();
        java.lang.String str11 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxAutoConnectRetryTime(1L);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions25.getDbDecoderFactory();
        int int27 = mongoClientOptions25.getSocketTimeout();
        int int28 = mongoClientOptions25.getSocketTimeout();
        java.lang.String str29 = mongoClientOptions25.getRequiredReplicaSetName();
        java.lang.String str30 = mongoClientOptions25.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions25.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder18.writeConcern(writeConcern32);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        int int11 = mongoClientOptions6.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions6.getWriteConcern();
        boolean boolean13 = mongoClientOptions6.isSocketKeepAlive();
        int int14 = mongoClientOptions6.getLocalThreshold();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20000 + "'", int11 == 20000);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        mongoProperties0.setUsername("test");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions32.getDbEncoderFactory();
        boolean boolean34 = mongoClientOptions32.isSocketKeepAlive();
        int int35 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean36 = mongoClientOptions32.isAlwaysUseMBeans();
        int int37 = mongoClientOptions32.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions32, environment38);
        java.lang.String str40 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory19 = mongoClientOptions18.getDbDecoderFactory();
        int int20 = mongoClientOptions18.getMaxConnectionIdleTime();
        int int21 = mongoClientOptions18.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference22 = mongoClientOptions18.getReadPreference();
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions18);
        long long24 = mongoClientOptions18.getMaxAutoConnectRetryTime();
        int int25 = mongoClientOptions18.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions18.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBDecoderFactory19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
        org.junit.Assert.assertNotNull(readPreference22);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20000 + "'", int26 == 20000);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatSocketTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxAutoConnectRetryTime(100L);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties29 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties29.setAuthenticationDatabase("");
        mongoProperties29.setDatabase("hi!");
        java.lang.String str34 = mongoProperties29.getUsername();
        java.lang.String str35 = mongoProperties29.getDatabase();
        mongoProperties29.setGridFsDatabase("");
        mongoProperties29.setPort((java.lang.Integer) 27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties40 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties40.setAuthenticationDatabase("");
        mongoProperties40.setDatabase("hi!");
        java.lang.String str45 = mongoProperties40.getUsername();
        java.lang.Class<?> wildcardClass46 = mongoProperties40.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions47 = null;
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties40.createMongoClient(mongoClientOptions47, environment48);
        java.lang.String str50 = mongoProperties40.getMongoClientDatabase();
        java.lang.String str51 = mongoProperties40.getUri();
        char[] charArray52 = mongoProperties40.getPassword();
        com.mongodb.MongoClientOptions.Builder builder53 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder55 = builder53.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder56 = builder55.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder58 = builder55.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions59 = builder55.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory60 = mongoClientOptions59.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions59.getReadPreference();
        org.springframework.core.env.Environment environment62 = null;
        com.mongodb.MongoClient mongoClient63 = mongoProperties40.createMongoClient(mongoClientOptions59, environment62);
        com.mongodb.MongoClient mongoClient64 = mongoProperties29.createMongoClient(mongoClientOptions59);
        javax.net.SocketFactory socketFactory65 = mongoClientOptions59.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder28.socketFactory(socketFactory65);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "mongodb://localhost/test" + "'", str51, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(mongoClientOptions59);
        org.junit.Assert.assertNotNull(dBEncoderFactory60);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(mongoClient63);
        org.junit.Assert.assertNotNull(mongoClient64);
        org.junit.Assert.assertNotNull(socketFactory65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.minConnectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.heartbeatConnectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        boolean boolean17 = mongoClientOptions10.isAlwaysUseMBeans();
        int int18 = mongoClientOptions10.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions10.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getConnectionsPerHost();
        long long13 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        javax.net.SocketFactory socketFactory14 = mongoClientOptions6.getSocketFactory();
        boolean boolean15 = mongoClientOptions6.isAutoConnectRetry();
        int int16 = mongoClientOptions6.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(socketFactory14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20000 + "'", int16 == 20000);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        boolean boolean19 = mongoClientOptions10.isCursorFinalizerEnabled();
        boolean boolean20 = mongoClientOptions10.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        int int26 = mongoClientOptions19.getLocalThreshold();
        int int27 = mongoClientOptions19.getAcceptableLatencyDifference();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties28 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties28.setAuthenticationDatabase("");
        java.lang.String str31 = mongoProperties28.getGridFsDatabase();
        mongoProperties28.setHost("test");
        mongoProperties28.setDatabase("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties36 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties36.setAuthenticationDatabase("");
        mongoProperties36.setDatabase("hi!");
        char[] charArray46 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties36.setPassword(charArray46);
        mongoProperties28.setPassword(charArray46);
        java.lang.String str49 = mongoProperties28.getGridFsDatabase();
        mongoProperties28.setUri("hi!");
        boolean boolean52 = mongoClientOptions19.equals((java.lang.Object) mongoProperties28);
        java.lang.String str53 = mongoProperties28.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "test" + "'", str53, "test");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference(0);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder4 = builder3.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder6 = builder3.description("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder48 = builder46.connectTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder27 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder29.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder32 = builder29.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions33 = builder29.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory34 = mongoClientOptions33.getDbEncoderFactory();
        int int35 = mongoClientOptions33.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory36 = mongoClientOptions33.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference37 = mongoClientOptions33.getReadPreference();
        boolean boolean38 = mongoClientOptions33.isAutoConnectRetry();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions33.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder22.readPreference(readPreference39);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(mongoClientOptions33);
        org.junit.Assert.assertNotNull(dBEncoderFactory34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory36);
        org.junit.Assert.assertNotNull(readPreference37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxAutoConnectRetryTime((long) 10000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder22.socketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.minHeartbeatFrequency(500);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.description("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.description("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties42 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions43 = null;
        org.springframework.core.env.Environment environment44 = null;
        com.mongodb.MongoClient mongoClient45 = mongoProperties42.createMongoClient(mongoClientOptions43, environment44);
        com.mongodb.MongoClientOptions.Builder builder46 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder49 = builder48.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder51 = builder48.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions52 = builder48.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory53 = mongoClientOptions52.getDbEncoderFactory();
        org.springframework.core.env.Environment environment54 = null;
        com.mongodb.MongoClient mongoClient55 = mongoProperties42.createMongoClient(mongoClientOptions52, environment54);
        int int56 = mongoClientOptions52.getSocketTimeout();
        int int57 = mongoClientOptions52.getLocalThreshold();
        javax.net.SocketFactory socketFactory58 = mongoClientOptions52.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder59 = builder41.socketFactory(socketFactory58);
        com.mongodb.MongoClientOptions.Builder builder60 = builder16.socketFactory(socketFactory58);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.threadsAllowedToBlockForConnectionMultiplier(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClientOptions52);
        org.junit.Assert.assertNotNull(dBEncoderFactory53);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(socketFactory58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        int int27 = mongoClientOptions25.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions25.getDbDecoderFactory();
        int int29 = mongoClientOptions25.getConnectionsPerHost();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions25.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder31 = builder14.readPreference(readPreference30);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.maxConnectionLifeTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.maxConnectionIdleTime((int) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions13.getDbEncoderFactory();
        java.lang.String str15 = mongoClientOptions13.getDescription();
        boolean boolean16 = mongoClientOptions13.isAlwaysUseMBeans();
        int int17 = mongoClientOptions13.getHeartbeatThreadCount();
        int int18 = mongoClientOptions13.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions13.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder6.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder6.requiredReplicaSetName("");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder31.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder60 = builder54.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder60.build();
        int int62 = mongoClientOptions61.getMinHeartbeatFrequency();
        java.lang.String str63 = mongoClientOptions61.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference64 = mongoClientOptions61.getReadPreference();
        javax.net.SocketFactory socketFactory65 = mongoClientOptions61.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder43.socketFactory(socketFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder16.socketFactory(socketFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 20000 + "'", int62 == 20000);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(readPreference64);
        org.junit.Assert.assertNotNull(socketFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency(27017);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.maxWaitTime((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.cursorFinalizerEnabled(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties35 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties35.setAuthenticationDatabase("");
        mongoProperties35.setDatabase("hi!");
        java.lang.String str40 = mongoProperties35.getUsername();
        java.lang.Class<?> wildcardClass41 = mongoProperties35.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties35.createMongoClient(mongoClientOptions42, environment43);
        java.lang.String str45 = mongoProperties35.getMongoClientDatabase();
        java.lang.String str46 = mongoProperties35.getUri();
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder49.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder49.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder49.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions53.getDbDecoderFactory();
        int int55 = mongoClientOptions53.getMaxConnectionIdleTime();
        int int56 = mongoClientOptions53.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions53.getReadPreference();
        com.mongodb.MongoClient mongoClient58 = mongoProperties35.createMongoClient(mongoClientOptions53);
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions53.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder34.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder61 = builder10.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.heartbeatThreadCount((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "mongodb://localhost/test" + "'", str46, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 500 + "'", int56 == 500);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertNotNull(mongoClient58);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder20.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder20.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        int int27 = mongoClientOptions25.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions25.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.dbDecoderFactory(dBDecoderFactory28);
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder34.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder37 = builder34.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        boolean boolean40 = mongoClientOptions38.isSocketKeepAlive();
        boolean boolean41 = mongoClientOptions38.isSocketKeepAlive();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions38.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder43 = builder10.dbEncoderFactory(dBEncoderFactory42);
        com.mongodb.MongoClientOptions.Builder builder45 = builder10.alwaysUseMBeans(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getAcceptableLatencyDifference();
        int int28 = mongoClientOptions26.getHeartbeatConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        int int35 = mongoClientOptions10.getMaxWaitTime();
        int int36 = mongoClientOptions10.getMaxWaitTime();
        int int37 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.DBDecoderFactory dBDecoderFactory38 = mongoClientOptions10.getDbDecoderFactory();
        boolean boolean39 = mongoClientOptions10.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 120000 + "'", int35 == 120000);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120000 + "'", int36 == 120000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions27.getDbDecoderFactory();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder20.readPreference(readPreference31);
        com.mongodb.MongoClientOptions.Builder builder33 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.maxConnectionIdleTime(15);
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder44 = builder38.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.requiredReplicaSetName("test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties47 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties47.createMongoClient(mongoClientOptions48, environment49);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory58 = mongoClientOptions57.getDbEncoderFactory();
        org.springframework.core.env.Environment environment59 = null;
        com.mongodb.MongoClient mongoClient60 = mongoProperties47.createMongoClient(mongoClientOptions57, environment59);
        java.lang.String str61 = mongoClientOptions57.getDescription();
        com.mongodb.ReadPreference readPreference62 = mongoClientOptions57.getReadPreference();
        java.lang.String str63 = mongoClientOptions57.getDescription();
        int int64 = mongoClientOptions57.getSocketTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory65 = mongoClientOptions57.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder66 = builder46.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder67 = builder37.dbDecoderFactory(dBDecoderFactory65);
        com.mongodb.MongoClientOptions.Builder builder69 = builder37.description("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBEncoderFactory58);
        org.junit.Assert.assertNotNull(mongoClient60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(readPreference62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(dBDecoderFactory65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory13 = mongoClientOptions6.getDbEncoderFactory();
        int int14 = mongoClientOptions6.getSocketTimeout();
        int int15 = mongoClientOptions6.getHeartbeatThreadCount();
        boolean boolean16 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder9 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        javax.net.SocketFactory socketFactory22 = mongoClientOptions19.getSocketFactory();
        int int23 = mongoClientOptions19.getHeartbeatThreadCount();
        int int24 = mongoClientOptions19.getMaxWaitTime();
        int int25 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int26 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(socketFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        int int17 = mongoClientOptions10.getConnectTimeout();
        boolean boolean18 = mongoClientOptions10.isAutoConnectRetry();
        java.lang.String str19 = mongoClientOptions10.getDescription();
        int int20 = mongoClientOptions10.getHeartbeatFrequency();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10000 + "'", int17 == 10000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder2.maxWaitTime((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout(100);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        int int28 = mongoClientOptions23.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions23.getDbEncoderFactory();
        int int31 = mongoClientOptions23.getHeartbeatSocketTimeout();
        int int32 = mongoClientOptions23.getSocketTimeout();
        int int33 = mongoClientOptions23.getHeartbeatConnectTimeout();
        com.mongodb.WriteConcern writeConcern34 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.writeConcern(writeConcern34);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20000 + "'", int31 == 20000);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertNotNull(writeConcern34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost(5);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.connectTimeout(5);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.description("");
        com.mongodb.MongoClientOptions.Builder builder44 = builder40.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder40.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder49.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder49.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder49.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions53.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory55 = mongoClientOptions53.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder56 = builder46.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder57 = builder26.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder58 = builder21.socketFactory(socketFactory55);
        com.mongodb.MongoClientOptions.Builder builder60 = builder21.maxConnectionIdleTime((int) (byte) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertNotNull(socketFactory55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectionsPerHost((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.maxConnectionIdleTime(500);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder25 = builder21.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.description("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatConnectRetryFrequency(500);
        boolean boolean34 = mongoClientOptions10.equals((java.lang.Object) builder33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder33.minHeartbeatFrequency((int) '4');
        com.mongodb.MongoClientOptions.Builder builder38 = builder33.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.maxWaitTime((int) (short) 10);
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder20 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = builder22.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder25 = builder22.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder22.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory27 = mongoClientOptions26.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory28 = mongoClientOptions26.getSocketFactory();
        int int29 = mongoClientOptions26.getHeartbeatFrequency();
        java.lang.String str30 = mongoClientOptions26.toString();
        int int31 = mongoClientOptions26.getHeartbeatConnectRetryFrequency();
        int int32 = mongoClientOptions26.getMinHeartbeatFrequency();
        int int33 = mongoClientOptions26.getHeartbeatFrequency();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions26.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder35 = builder16.readPreference(readPreference34);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder16.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertNotNull(dBDecoderFactory27);
        org.junit.Assert.assertNotNull(socketFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5000 + "'", int29 == 5000);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 500 + "'", int32 == 500);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5000 + "'", int33 == 5000);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions10.getDbDecoderFactory();
        int int12 = mongoClientOptions10.getSocketTimeout();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        java.lang.String str19 = mongoClientOptions10.getDescription();
        int int20 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        int int10 = mongoClientOptions6.getConnectTimeout();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern12 = mongoClientOptions6.getWriteConcern();
        int int13 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(writeConcern12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder28.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder34 = builder28.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder35 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder38 = builder37.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder40 = builder37.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder37.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory42 = mongoClientOptions41.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern43 = mongoClientOptions41.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder44 = builder34.writeConcern(writeConcern43);
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder49.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder49.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder49.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions53.getDbEncoderFactory();
        int int55 = mongoClientOptions53.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory56 = mongoClientOptions53.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions53.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder58 = builder46.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder21.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder61 = builder21.heartbeatThreadCount((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder63 = builder61.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder66.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder69 = builder66.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder66.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions70.getDbDecoderFactory();
        int int72 = mongoClientOptions70.getMaxConnectionIdleTime();
        int int73 = mongoClientOptions70.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference74 = mongoClientOptions70.getReadPreference();
        boolean boolean75 = mongoClientOptions70.isAutoConnectRetry();
        int int76 = mongoClientOptions70.getLocalThreshold();
        boolean boolean77 = mongoClientOptions70.isAutoConnectRetry();
        boolean boolean78 = mongoClientOptions70.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory79 = mongoClientOptions70.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder80 = builder63.dbEncoderFactory(dBEncoderFactory79);
        com.mongodb.MongoClientOptions.Builder builder81 = builder10.dbEncoderFactory(dBEncoderFactory79);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertNotNull(dBEncoderFactory42);
        org.junit.Assert.assertNotNull(writeConcern43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory56);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 500 + "'", int73 == 500);
        org.junit.Assert.assertNotNull(readPreference74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.connectTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        int int20 = mongoClientOptions17.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions17.getHeartbeatConnectTimeout();
        boolean boolean22 = mongoClientOptions17.isAutoConnectRetry();
        boolean boolean23 = mongoClientOptions17.isAutoConnectRetry();
        com.mongodb.WriteConcern writeConcern24 = mongoClientOptions17.getWriteConcern();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions17.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder8.dbDecoderFactory(dBDecoderFactory25);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder26.maxConnectionLifeTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(writeConcern24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.heartbeatConnectTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder16.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder16.connectionsPerHost(100);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.localThreshold((int) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.String str8 = mongoProperties0.getUsername();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder10 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder13 = builder12.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder15 = builder12.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions16 = builder12.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory17 = mongoClientOptions16.getDbDecoderFactory();
        int int18 = mongoClientOptions16.getSocketTimeout();
        long long19 = mongoClientOptions16.getMaxAutoConnectRetryTime();
        int int20 = mongoClientOptions16.getConnectionsPerHost();
        int int21 = mongoClientOptions16.getHeartbeatThreadCount();
        boolean boolean22 = mongoClientOptions16.isAutoConnectRetry();
        int int23 = mongoClientOptions16.getThreadsAllowedToBlockForConnectionMultiplier();
        int int24 = mongoClientOptions16.getLocalThreshold();
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions16);
        java.lang.String str26 = mongoClientOptions16.toString();
        int int27 = mongoClientOptions16.getMaxConnectionIdleTime();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "mongodb://localhost/test" + "'", str9, "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(mongoClientOptions16);
        org.junit.Assert.assertNotNull(dBDecoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder0.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxWaitTime((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.threadsAllowedToBlockForConnectionMultiplier(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("");
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.heartbeatConnectTimeout((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.localThreshold((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str6 = mongoProperties0.getHost();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.threadsAllowedToBlockForConnectionMultiplier(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.connectTimeout(52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int13 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 500 + "'", int12 == 500);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        int int9 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int10 = mongoClientOptions6.getHeartbeatConnectTimeout();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory14 = mongoClientOptions6.getDbEncoderFactory();
        boolean boolean15 = mongoClientOptions6.isAlwaysUseMBeans();
        int int16 = mongoClientOptions6.getLocalThreshold();
        int int17 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean18 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20000 + "'", int10 == 20000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertNotNull(dBEncoderFactory14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("");
        mongoProperties16.setDatabase("hi!");
        java.lang.String str21 = mongoProperties16.getUsername();
        java.lang.Integer int22 = mongoProperties16.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        mongoProperties23.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray35 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties23.setPassword(charArray35);
        mongoProperties16.setPassword(charArray35);
        mongoProperties0.setPassword(charArray35);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions47.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions47.getReadPreference();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions47, environment50);
        int int52 = mongoClientOptions47.getHeartbeatFrequency();
        int int53 = mongoClientOptions47.getHeartbeatFrequency();
        java.lang.String str54 = mongoClientOptions47.getDescription();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5000 + "'", int52 == 5000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5000 + "'", int53 == 5000);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUri("hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory20 = mongoClientOptions19.getDbDecoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        com.mongodb.MongoClient mongoClient22 = mongoProperties0.createMongoClient(mongoClientOptions19);
        int int23 = mongoClientOptions19.getHeartbeatSocketTimeout();
        int int24 = mongoClientOptions19.getHeartbeatThreadCount();
        int int25 = mongoClientOptions19.getConnectionsPerHost();
        int int26 = mongoClientOptions19.getMaxConnectionLifeTime();
        int int27 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        int int28 = mongoClientOptions19.getThreadsAllowedToBlockForConnectionMultiplier();
        int int29 = mongoClientOptions19.getMinHeartbeatFrequency();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBDecoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20000 + "'", int21 == 20000);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20000 + "'", int23 == 20000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder24 = builder18.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference(5000);
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.minConnectionsPerHost(52);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.acceptableLatencyDifference((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.description("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder46.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder51 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder53.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder56 = builder53.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions57 = builder53.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory58 = mongoClientOptions57.getDbDecoderFactory();
        int int59 = mongoClientOptions57.getMaxConnectionIdleTime();
        int int60 = mongoClientOptions57.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference61 = mongoClientOptions57.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder62 = builder46.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder63 = builder35.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder64 = builder28.readPreference(readPreference61);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.minConnectionsPerHost((int) '4');
        com.mongodb.MongoClientOptions.Builder builder68 = builder64.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder70 = builder64.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder72 = builder70.connectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mongoClientOptions57);
        org.junit.Assert.assertNotNull(dBDecoderFactory58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 500 + "'", int60 == 500);
        org.junit.Assert.assertNotNull(readPreference61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties8.createMongoClient(mongoClientOptions9, environment10);
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties8.createMongoClient(mongoClientOptions18, environment20);
        int int22 = mongoClientOptions18.getSocketTimeout();
        int int23 = mongoClientOptions18.getLocalThreshold();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        int int27 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions18);
        com.mongodb.ReadPreference readPreference29 = mongoClientOptions18.getReadPreference();
        boolean boolean30 = mongoClientOptions18.isCursorFinalizerEnabled();
        int int31 = mongoClientOptions18.getAcceptableLatencyDifference();
        int int32 = mongoClientOptions18.getAcceptableLatencyDifference();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNotNull(readPreference29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory24 = mongoClientOptions23.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory25 = mongoClientOptions23.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder16.socketFactory(socketFactory25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder16.build();
        int int30 = mongoClientOptions29.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBDecoderFactory24);
        org.junit.Assert.assertNotNull(socketFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10000 + "'", int30 == 10000);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatFrequency((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.localThreshold(10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.String str1 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int2 = mongoProperties0.getPort();
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions10.getDbDecoderFactory();
        int int12 = mongoClientOptions10.getMaxConnectionIdleTime();
        int int13 = mongoClientOptions10.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference14 = mongoClientOptions10.getReadPreference();
        boolean boolean15 = mongoClientOptions10.isAutoConnectRetry();
        int int16 = mongoClientOptions10.getLocalThreshold();
        boolean boolean17 = mongoClientOptions10.isAutoConnectRetry();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        org.springframework.core.env.Environment environment19 = null;
        com.mongodb.MongoClient mongoClient20 = mongoProperties0.createMongoClient(mongoClientOptions10, environment19);
        int int21 = mongoClientOptions10.getMinHeartbeatFrequency();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "test" + "'", str1, "test");
        org.junit.Assert.assertNull(int2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 500 + "'", int13 == 500);
        org.junit.Assert.assertNotNull(readPreference14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertNotNull(mongoClient20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 500 + "'", int21 == 500);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        mongoProperties0.setUsername("");
        java.lang.String str16 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        java.lang.String str25 = mongoClientOptions23.getDescription();
        boolean boolean26 = mongoClientOptions23.isAlwaysUseMBeans();
        boolean boolean27 = mongoClientOptions23.isAutoConnectRetry();
        boolean boolean28 = mongoClientOptions23.isAlwaysUseMBeans();
        int int29 = mongoClientOptions23.getMaxConnectionLifeTime();
        com.mongodb.MongoClient mongoClient30 = mongoProperties0.createMongoClient(mongoClientOptions23);
        boolean boolean31 = mongoClientOptions23.isCursorFinalizerEnabled();
        int int32 = mongoClientOptions23.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mongoClient30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder42.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder42.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder54 = builder52.maxConnectionIdleTime(500);
        com.mongodb.MongoClientOptions.Builder builder55 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder58 = builder57.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder60 = builder57.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions61 = builder57.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory62 = mongoClientOptions61.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder63 = builder52.dbDecoderFactory(dBDecoderFactory62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder10.dbDecoderFactory(dBDecoderFactory62);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder66 = builder10.threadsAllowedToBlockForConnectionMultiplier(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mongoClientOptions61);
        org.junit.Assert.assertNotNull(dBDecoderFactory62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory22 = mongoClientOptions21.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder23 = builder14.dbEncoderFactory(dBEncoderFactory22);
        com.mongodb.MongoClientOptions.Builder builder25 = builder14.heartbeatFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions26 = builder25.build();
        int int27 = mongoClientOptions26.getMinConnectionsPerHost();
        long long28 = mongoClientOptions26.getMaxAutoConnectRetryTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions26.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions26.getWriteConcern();
        int int31 = mongoClientOptions26.getMinHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions26.getDbDecoderFactory();
        int int33 = mongoClientOptions26.getMaxWaitTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBEncoderFactory22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(mongoClientOptions26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 120000 + "'", int33 == 120000);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        java.lang.String str7 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str10 = mongoProperties0.getDatabase();
        mongoProperties0.setDatabase("hi!");
        mongoProperties0.setUri("test");
        java.lang.String str15 = mongoProperties0.getUri();
        java.lang.String str16 = mongoProperties0.getUri();
        java.lang.String str17 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties18 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions19 = null;
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties18.createMongoClient(mongoClientOptions19, environment20);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties18.createMongoClient(mongoClientOptions28, environment30);
        java.lang.String str32 = mongoClientOptions28.getDescription();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions28.getReadPreference();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions28.getReadPreference();
        int int35 = mongoClientOptions28.getMaxConnectionLifeTime();
        int int36 = mongoClientOptions28.getAcceptableLatencyDifference();
        int int37 = mongoClientOptions28.getSocketTimeout();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions28, environment38);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "test" + "'", str7, "test");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "test" + "'", str15, "test");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "test" + "'", str16, "test");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(mongoClient39);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int24 = mongoClientOptions19.getMaxConnectionIdleTime();
        int int25 = mongoClientOptions19.getLocalThreshold();
        int int26 = mongoClientOptions19.getSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern8 = mongoClientOptions6.getWriteConcern();
        boolean boolean9 = mongoClientOptions6.isSocketKeepAlive();
        int int10 = mongoClientOptions6.getConnectTimeout();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getMinConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNotNull(writeConcern8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10000 + "'", int10 == 10000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder14 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions20 = builder16.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory21 = mongoClientOptions20.getDbEncoderFactory();
        boolean boolean22 = mongoClientOptions20.isSocketKeepAlive();
        int int23 = mongoClientOptions20.getMaxConnectionLifeTime();
        boolean boolean24 = mongoClientOptions20.isAlwaysUseMBeans();
        int int25 = mongoClientOptions20.getMinConnectionsPerHost();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions20);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties27 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties27.setAuthenticationDatabase("");
        mongoProperties27.setDatabase("hi!");
        java.lang.String str32 = mongoProperties27.getUsername();
        mongoProperties27.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions35 = null;
        org.springframework.core.env.Environment environment36 = null;
        com.mongodb.MongoClient mongoClient37 = mongoProperties27.createMongoClient(mongoClientOptions35, environment36);
        com.mongodb.MongoClientOptions.Builder builder38 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder40.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder43 = builder40.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions44 = builder40.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions44.getDbDecoderFactory();
        int int46 = mongoClientOptions44.getHeartbeatConnectTimeout();
        java.lang.String str47 = mongoClientOptions44.toString();
        org.springframework.core.env.Environment environment48 = null;
        com.mongodb.MongoClient mongoClient49 = mongoProperties27.createMongoClient(mongoClientOptions44, environment48);
        javax.net.SocketFactory socketFactory50 = mongoClientOptions44.getSocketFactory();
        int int51 = mongoClientOptions44.getSocketTimeout();
        int int52 = mongoClientOptions44.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory53 = mongoClientOptions44.getDbDecoderFactory();
        com.mongodb.MongoClient mongoClient54 = mongoProperties0.createMongoClient(mongoClientOptions44);
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions44.getReadPreference();
        java.lang.String str56 = mongoClientOptions44.getDescription();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(mongoClientOptions20);
        org.junit.Assert.assertNotNull(dBEncoderFactory21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(mongoClient37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClientOptions44);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20000 + "'", int46 == 20000);
        org.junit.Assert.assertNotNull(mongoClient49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5000 + "'", int52 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory53);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder6 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder9 = builder8.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder11 = builder8.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions12 = builder8.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory13 = mongoClientOptions12.getDbDecoderFactory();
        int int14 = mongoClientOptions12.getMaxConnectionIdleTime();
        int int15 = mongoClientOptions12.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference16 = mongoClientOptions12.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder17 = builder5.readPreference(readPreference16);
        com.mongodb.MongoClientOptions.Builder builder19 = builder5.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatThreadCount(97);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatSocketTimeout((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatSocketTimeout must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mongoClientOptions12);
        org.junit.Assert.assertNotNull(dBDecoderFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 500 + "'", int15 == 500);
        org.junit.Assert.assertNotNull(readPreference16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatConnectRetryFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        boolean boolean20 = mongoClientOptions19.isAutoConnectRetry();
        int int21 = mongoClientOptions19.getHeartbeatConnectTimeout();
        int int22 = mongoClientOptions19.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions10.getSocketFactory();
        int int17 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions10.getWriteConcern();
        long long20 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions10.getReadPreference();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 120000 + "'", int17 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(readPreference21);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        com.mongodb.MongoClientOptions.Builder builder42 = builder14.minConnectionsPerHost(27017);
        com.mongodb.MongoClientOptions.Builder builder44 = builder14.minHeartbeatFrequency(20000);
        com.mongodb.MongoClientOptions.Builder builder46 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder48 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder50 = builder14.heartbeatConnectRetryFrequency(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder14.maxWaitTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory28 = mongoClientOptions27.getDbDecoderFactory();
        int int29 = mongoClientOptions27.getMaxConnectionIdleTime();
        int int30 = mongoClientOptions27.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference31 = mongoClientOptions27.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder32 = builder20.readPreference(readPreference31);
        boolean boolean33 = mongoClientOptions10.equals((java.lang.Object) builder20);
        com.mongodb.MongoClientOptions.Builder builder35 = builder20.maxConnectionLifeTime((int) '#');
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBDecoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertNotNull(readPreference31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("");
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        char[] charArray8 = mongoProperties0.getPassword();
        java.lang.String str9 = mongoProperties0.getAuthenticationDatabase();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(charArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        boolean boolean10 = mongoClientOptions6.isSocketKeepAlive();
        boolean boolean11 = mongoClientOptions6.isAlwaysUseMBeans();
        boolean boolean12 = mongoClientOptions6.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder10.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions14.getDbDecoderFactory();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        mongoProperties0.setDatabase("");
        mongoProperties0.setDatabase("");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setUri("");
        java.lang.Integer int28 = mongoProperties0.getPort();
        java.lang.Integer int29 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties30 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions31 = null;
        org.springframework.core.env.Environment environment32 = null;
        com.mongodb.MongoClient mongoClient33 = mongoProperties30.createMongoClient(mongoClientOptions31, environment32);
        com.mongodb.MongoClientOptions.Builder builder34 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder37 = builder36.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder39 = builder36.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions40 = builder36.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory41 = mongoClientOptions40.getDbEncoderFactory();
        org.springframework.core.env.Environment environment42 = null;
        com.mongodb.MongoClient mongoClient43 = mongoProperties30.createMongoClient(mongoClientOptions40, environment42);
        java.lang.String str44 = mongoClientOptions40.getDescription();
        com.mongodb.ReadPreference readPreference45 = mongoClientOptions40.getReadPreference();
        com.mongodb.WriteConcern writeConcern46 = mongoClientOptions40.getWriteConcern();
        int int47 = mongoClientOptions40.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference48 = mongoClientOptions40.getReadPreference();
        int int49 = mongoClientOptions40.getHeartbeatConnectRetryFrequency();
        int int50 = mongoClientOptions40.getHeartbeatFrequency();
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: uri needs to start with mongodb://");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(mongoClientOptions40);
        org.junit.Assert.assertNotNull(dBEncoderFactory41);
        org.junit.Assert.assertNotNull(mongoClient43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(readPreference45);
        org.junit.Assert.assertNotNull(writeConcern46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 500 + "'", int47 == 500);
        org.junit.Assert.assertNotNull(readPreference48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 500 + "'", int49 == 500);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5000 + "'", int50 == 5000);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int13 = mongoClientOptions6.getMaxWaitTime();
        int int14 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 120000 + "'", int13 == 120000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern10 = mongoClientOptions6.getWriteConcern();
        java.lang.String str11 = mongoClientOptions6.toString();
        boolean boolean12 = mongoClientOptions6.isCursorFinalizerEnabled();
        javax.net.SocketFactory socketFactory13 = mongoClientOptions6.getSocketFactory();
        int int14 = mongoClientOptions6.getHeartbeatSocketTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(writeConcern10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(socketFactory13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 20000 + "'", int14 == 20000);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setGridFsDatabase("hi!");
        java.lang.String str3 = mongoProperties0.getHost();
        mongoProperties0.setUsername("");
        java.lang.String str6 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.String str4 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setPort((java.lang.Integer) 27017);
        char[] charArray7 = mongoProperties0.getPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties8 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions9 = null;
        org.springframework.core.env.Environment environment10 = null;
        com.mongodb.MongoClient mongoClient11 = mongoProperties8.createMongoClient(mongoClientOptions9, environment10);
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder15 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder17 = builder14.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions18 = builder14.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory19 = mongoClientOptions18.getDbEncoderFactory();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties8.createMongoClient(mongoClientOptions18, environment20);
        int int22 = mongoClientOptions18.getSocketTimeout();
        int int23 = mongoClientOptions18.getLocalThreshold();
        int int24 = mongoClientOptions18.getHeartbeatFrequency();
        int int25 = mongoClientOptions18.getSocketTimeout();
        int int26 = mongoClientOptions18.getMaxWaitTime();
        int int27 = mongoClientOptions18.getConnectionsPerHost();
        com.mongodb.MongoClient mongoClient28 = mongoProperties0.createMongoClient(mongoClientOptions18);
        java.lang.String str29 = mongoProperties0.getDatabase();
        java.lang.String str30 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(charArray7);
        org.junit.Assert.assertNotNull(mongoClient11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mongoClientOptions18);
        org.junit.Assert.assertNotNull(dBEncoderFactory19);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5000 + "'", int24 == 5000);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 120000 + "'", int26 == 120000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        int int11 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str15 = mongoClientOptions6.getDescription();
        boolean boolean16 = mongoClientOptions6.isAlwaysUseMBeans();
        int int17 = mongoClientOptions6.getMinHeartbeatFrequency();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 500 + "'", int17 == 500);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        mongoProperties0.setUri("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties32 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties32.setAuthenticationDatabase("");
        java.lang.String str35 = mongoProperties32.getUri();
        java.lang.String str36 = mongoProperties32.getUri();
        java.lang.String str37 = mongoProperties32.getAuthenticationDatabase();
        java.lang.Class<?> wildcardClass38 = mongoProperties32.getFieldNamingStrategy();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties39 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties39.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties41.setAuthenticationDatabase("");
        mongoProperties41.setDatabase("hi!");
        java.lang.String str46 = mongoProperties41.getUsername();
        java.lang.Class<?> wildcardClass47 = mongoProperties41.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions48 = null;
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties41.createMongoClient(mongoClientOptions48, environment49);
        java.lang.String str51 = mongoProperties41.getMongoClientDatabase();
        java.lang.String str52 = mongoProperties41.getUsername();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties53 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties53.setAuthenticationDatabase("");
        mongoProperties53.setDatabase("hi!");
        char[] charArray63 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties53.setPassword(charArray63);
        mongoProperties41.setPassword(charArray63);
        mongoProperties39.setPassword(charArray63);
        mongoProperties32.setPassword(charArray63);
        mongoProperties0.setPassword(charArray63);
        mongoProperties0.setDatabase("hi!");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "mongodb://localhost/test" + "'", str35, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "mongodb://localhost/test" + "'", str36, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#,  ,  , a,  ]");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        javax.net.SocketFactory socketFactory11 = mongoClientOptions6.getSocketFactory();
        int int12 = mongoClientOptions6.getLocalThreshold();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertNotNull(socketFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxConnectionIdleTime(20000);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isAlwaysUseMBeans();
        int int15 = mongoClientOptions6.getMinConnectionsPerHost();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions6.getSocketFactory();
        boolean boolean17 = mongoClientOptions6.isAutoConnectRetry();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("test");
        java.lang.String str6 = mongoProperties0.getMongoClientDatabase();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties10 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions11 = null;
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties10.createMongoClient(mongoClientOptions11, environment12);
        mongoProperties10.setGridFsDatabase("");
        java.lang.String str16 = mongoProperties10.getUsername();
        java.lang.String str17 = mongoProperties10.getAuthenticationDatabase();
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        boolean boolean26 = mongoClientOptions24.isSocketKeepAlive();
        int int27 = mongoClientOptions24.getConnectionsPerHost();
        int int28 = mongoClientOptions24.getHeartbeatSocketTimeout();
        com.mongodb.MongoClient mongoClient29 = mongoProperties10.createMongoClient(mongoClientOptions24);
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties0.createMongoClient(mongoClientOptions24, environment30);
        int int32 = mongoClientOptions24.getLocalThreshold();
        int int33 = mongoClientOptions24.getHeartbeatConnectTimeout();
        int int34 = mongoClientOptions24.getHeartbeatFrequency();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "test" + "'", str6, "test");
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20000 + "'", int28 == 20000);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20000 + "'", int33 == 20000);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5000 + "'", int34 == 5000);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("hi!");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties16 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties16.setAuthenticationDatabase("");
        mongoProperties16.setDatabase("hi!");
        java.lang.String str21 = mongoProperties16.getUsername();
        java.lang.Integer int22 = mongoProperties16.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties23 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties23.setAuthenticationDatabase("");
        mongoProperties23.setDatabase("hi!");
        java.lang.String str28 = mongoProperties23.getUsername();
        mongoProperties23.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray35 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties23.setPassword(charArray35);
        mongoProperties16.setPassword(charArray35);
        mongoProperties0.setPassword(charArray35);
        mongoProperties0.setPort((java.lang.Integer) 27017);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions47.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference49 = mongoClientOptions47.getReadPreference();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions47, environment50);
        com.mongodb.ReadPreference readPreference52 = mongoClientOptions47.getReadPreference();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(int22);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(readPreference49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNotNull(readPreference52);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatThreadCount(100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.connectTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        boolean boolean10 = mongoClientOptions6.isSocketKeepAlive();
        java.lang.String str11 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getGridFsDatabase();
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory11 = mongoClientOptions10.getDbDecoderFactory();
        int int12 = mongoClientOptions10.getSocketTimeout();
        long long13 = mongoClientOptions10.getMaxAutoConnectRetryTime();
        int int14 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean15 = mongoClientOptions10.isAlwaysUseMBeans();
        int int16 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties0.createMongoClient(mongoClientOptions10, environment17);
        java.lang.Integer int19 = mongoProperties0.getPort();
        java.lang.String str20 = mongoProperties0.getMongoClientDatabase();
        mongoProperties0.setGridFsDatabase("mongodb://localhost/test");
        java.lang.Integer int23 = mongoProperties0.getPort();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBDecoderFactory11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "test" + "'", str20, "test");
        org.junit.Assert.assertNull(int23);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.threadsAllowedToBlockForConnectionMultiplier((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder35 = builder29.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder35.build();
        int int37 = mongoClientOptions36.getMinHeartbeatFrequency();
        java.lang.String str38 = mongoClientOptions36.getRequiredReplicaSetName();
        com.mongodb.ReadPreference readPreference39 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.readPreference(readPreference39);
        com.mongodb.MongoClientOptions.Builder builder41 = builder14.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20000 + "'", int37 == 20000);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(readPreference39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.maxWaitTime(0);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference38 = mongoClientOptions36.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder39 = builder29.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder40 = builder6.readPreference(readPreference38);
        com.mongodb.MongoClientOptions.Builder builder42 = builder6.socketTimeout(52);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.heartbeatThreadCount(5);
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder51 = builder47.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder56 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder60 = builder56.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder66 = builder62.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder68 = builder66.description("");
        com.mongodb.MongoClientOptions.Builder builder70 = builder66.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder72 = builder66.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder73 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder76 = builder75.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder78 = builder75.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions79 = builder75.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory80 = mongoClientOptions79.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory81 = mongoClientOptions79.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder82 = builder72.socketFactory(socketFactory81);
        com.mongodb.MongoClientOptions.Builder builder83 = builder51.socketFactory(socketFactory81);
        com.mongodb.MongoClientOptions.Builder builder84 = builder46.socketFactory(socketFactory81);
        com.mongodb.MongoClientOptions.Builder builder86 = builder46.maxWaitTime((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(readPreference38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(mongoClientOptions79);
        org.junit.Assert.assertNotNull(dBDecoderFactory80);
        org.junit.Assert.assertNotNull(socketFactory81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        int int11 = mongoClientOptions6.getConnectTimeout();
        com.mongodb.ReadPreference readPreference12 = mongoClientOptions6.getReadPreference();
        boolean boolean13 = mongoClientOptions6.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10000 + "'", int11 == 10000);
        org.junit.Assert.assertNotNull(readPreference12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder30 = builder10.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatThreadCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.cursorFinalizerEnabled(false);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder41 = builder33.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder46 = builder44.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder48 = builder44.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder52 = builder50.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder54 = builder50.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder56 = builder54.description("");
        com.mongodb.MongoClientOptions.Builder builder58 = builder54.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder60 = builder54.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder62 = builder54.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder64 = builder54.heartbeatSocketTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.autoConnectRetry(true);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties67 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions68 = null;
        org.springframework.core.env.Environment environment69 = null;
        com.mongodb.MongoClient mongoClient70 = mongoProperties67.createMongoClient(mongoClientOptions68, environment69);
        com.mongodb.MongoClientOptions.Builder builder71 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder74 = builder73.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder76 = builder73.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions77 = builder73.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory78 = mongoClientOptions77.getDbEncoderFactory();
        org.springframework.core.env.Environment environment79 = null;
        com.mongodb.MongoClient mongoClient80 = mongoProperties67.createMongoClient(mongoClientOptions77, environment79);
        int int81 = mongoClientOptions77.getSocketTimeout();
        int int82 = mongoClientOptions77.getLocalThreshold();
        javax.net.SocketFactory socketFactory83 = mongoClientOptions77.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder84 = builder66.socketFactory(socketFactory83);
        com.mongodb.MongoClientOptions.Builder builder85 = builder41.socketFactory(socketFactory83);
        com.mongodb.MongoClientOptions.Builder builder86 = builder18.socketFactory(socketFactory83);
        com.mongodb.MongoClientOptions.Builder builder88 = builder18.maxAutoConnectRetryTime(100L);
        com.mongodb.MongoClientOptions.Builder builder89 = builder88.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(mongoClient70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(mongoClientOptions77);
        org.junit.Assert.assertNotNull(dBEncoderFactory78);
        org.junit.Assert.assertNotNull(mongoClient80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(socketFactory83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        int int38 = mongoClientOptions31.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern39 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder40 = builder20.writeConcern(writeConcern39);
        com.mongodb.MongoClientOptions.Builder builder42 = builder20.heartbeatConnectTimeout(97);
        com.mongodb.MongoClientOptions.Builder builder44 = builder20.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder46 = builder20.heartbeatConnectTimeout((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder48 = builder46.socketKeepAlive(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder50 = builder48.maxAutoConnectRetryTime((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 500 + "'", int38 == 500);
        org.junit.Assert.assertNotNull(writeConcern39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.threadsAllowedToBlockForConnectionMultiplier((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder13 = builder9.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder17.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder27 = builder8.dbDecoderFactory(dBDecoderFactory25);
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost(10);
        com.mongodb.MongoClientOptions.Builder builder31 = builder27.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        com.mongodb.MongoClientOptions.Builder builder34 = builder31.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder36 = builder31.socketTimeout(27017);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxWaitTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder14.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder14.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.heartbeatConnectTimeout(10000);
        java.lang.Class<?> wildcardClass28 = builder27.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        com.mongodb.WriteConcern writeConcern16 = mongoClientOptions10.getWriteConcern();
        int int17 = mongoClientOptions10.getMinConnectionsPerHost();
        int int18 = mongoClientOptions10.getSocketTimeout();
        int int19 = mongoClientOptions10.getConnectionsPerHost();
        int int20 = mongoClientOptions10.getConnectTimeout();
        int int21 = mongoClientOptions10.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNotNull(writeConcern16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        char[] charArray12 = new char[] { '#', '#', 'a', ' ' };
        mongoProperties0.setPassword(charArray12);
        java.lang.String str14 = mongoProperties0.getDatabase();
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getSocketTimeout();
        long long24 = mongoClientOptions21.getMaxAutoConnectRetryTime();
        java.lang.String str25 = mongoClientOptions21.getDescription();
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions21);
        char[] charArray27 = mongoProperties0.getPassword();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000, \000, \000, \000]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000, \000, \000, \000]");
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.minConnectionsPerHost((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.threadsAllowedToBlockForConnectionMultiplier(27017);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.connectionsPerHost(500);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.alwaysUseMBeans(true);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder30 = builder28.maxConnectionIdleTime((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions10.getHeartbeatFrequency();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions10.getDbDecoderFactory();
        com.mongodb.DBEncoderFactory dBEncoderFactory17 = mongoClientOptions10.getDbEncoderFactory();
        int int18 = mongoClientOptions10.getHeartbeatFrequency();
        int int19 = mongoClientOptions10.getSocketTimeout();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(dBEncoderFactory17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5000 + "'", int18 == 5000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        long long11 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str12 = mongoClientOptions6.toString();
        long long13 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        java.lang.String str14 = mongoClientOptions6.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.socketTimeout((int) '#');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime(27017);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.requiredReplicaSetName("hi!");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.requiredReplicaSetName("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass1 = mongoProperties0.getFieldNamingStrategy();
        char[] charArray2 = mongoProperties0.getPassword();
        java.lang.String str3 = mongoProperties0.getDatabase();
        mongoProperties0.setPort((java.lang.Integer) 15);
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("test");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.clearPassword();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties12 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions13 = null;
        org.springframework.core.env.Environment environment14 = null;
        com.mongodb.MongoClient mongoClient15 = mongoProperties12.createMongoClient(mongoClientOptions13, environment14);
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions22 = builder18.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory23 = mongoClientOptions22.getDbEncoderFactory();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties12.createMongoClient(mongoClientOptions22, environment24);
        java.lang.String str26 = mongoClientOptions22.getDescription();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions22.getReadPreference();
        com.mongodb.WriteConcern writeConcern28 = mongoClientOptions22.getWriteConcern();
        int int29 = mongoClientOptions22.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference30 = mongoClientOptions22.getReadPreference();
        int int31 = mongoClientOptions22.getSocketTimeout();
        int int32 = mongoClientOptions22.getSocketTimeout();
        com.mongodb.MongoClient mongoClient33 = mongoProperties0.createMongoClient(mongoClientOptions22);
        java.lang.String str34 = mongoProperties0.getGridFsDatabase();
        org.junit.Assert.assertNull(wildcardClass1);
        org.junit.Assert.assertNull(charArray2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mongoClient15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(mongoClientOptions22);
        org.junit.Assert.assertNotNull(dBEncoderFactory23);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(writeConcern28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 500 + "'", int29 == 500);
        org.junit.Assert.assertNotNull(readPreference30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(mongoClient33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.String str16 = mongoProperties0.getHost();
        mongoProperties0.setHost("");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties19 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions20 = null;
        org.springframework.core.env.Environment environment21 = null;
        com.mongodb.MongoClient mongoClient22 = mongoProperties19.createMongoClient(mongoClientOptions20, environment21);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder26 = builder25.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder28 = builder25.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions29 = builder25.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions29.getDbEncoderFactory();
        org.springframework.core.env.Environment environment31 = null;
        com.mongodb.MongoClient mongoClient32 = mongoProperties19.createMongoClient(mongoClientOptions29, environment31);
        java.lang.String str33 = mongoClientOptions29.getDescription();
        com.mongodb.ReadPreference readPreference34 = mongoClientOptions29.getReadPreference();
        com.mongodb.WriteConcern writeConcern35 = mongoClientOptions29.getWriteConcern();
        int int36 = mongoClientOptions29.getConnectionsPerHost();
        int int37 = mongoClientOptions29.getHeartbeatFrequency();
        com.mongodb.MongoClient mongoClient38 = mongoProperties0.createMongoClient(mongoClientOptions29);
        int int39 = mongoClientOptions29.getMaxConnectionLifeTime();
        int int40 = mongoClientOptions29.getMinConnectionsPerHost();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions29.getReadPreference();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mongoClient22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(mongoClientOptions29);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(mongoClient32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(readPreference34);
        org.junit.Assert.assertNotNull(writeConcern35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5000 + "'", int37 == 5000);
        org.junit.Assert.assertNotNull(mongoClient38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(readPreference41);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.acceptableLatencyDifference(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getLocalThreshold();
        javax.net.SocketFactory socketFactory16 = mongoClientOptions10.getSocketFactory();
        boolean boolean17 = mongoClientOptions10.isAutoConnectRetry();
        int int18 = mongoClientOptions10.getHeartbeatSocketTimeout();
        java.lang.String str19 = mongoClientOptions10.getDescription();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(socketFactory16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder15 = builder11.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder19 = builder15.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder21 = builder15.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory29 = mongoClientOptions28.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions28.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder21.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder32 = builder4.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.threadsAllowedToBlockForConnectionMultiplier(120000);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime(52);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties37 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions38 = null;
        org.springframework.core.env.Environment environment39 = null;
        com.mongodb.MongoClient mongoClient40 = mongoProperties37.createMongoClient(mongoClientOptions38, environment39);
        com.mongodb.MongoClientOptions.Builder builder41 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder44 = builder43.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder46 = builder43.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions47 = builder43.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory48 = mongoClientOptions47.getDbEncoderFactory();
        org.springframework.core.env.Environment environment49 = null;
        com.mongodb.MongoClient mongoClient50 = mongoProperties37.createMongoClient(mongoClientOptions47, environment49);
        java.lang.String str51 = mongoClientOptions47.getDescription();
        com.mongodb.ReadPreference readPreference52 = mongoClientOptions47.getReadPreference();
        com.mongodb.WriteConcern writeConcern53 = mongoClientOptions47.getWriteConcern();
        int int54 = mongoClientOptions47.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference55 = mongoClientOptions47.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder56 = builder32.readPreference(readPreference55);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBEncoderFactory29);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClient40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(mongoClientOptions47);
        org.junit.Assert.assertNotNull(dBEncoderFactory48);
        org.junit.Assert.assertNotNull(mongoClient50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(readPreference52);
        org.junit.Assert.assertNotNull(writeConcern53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 500 + "'", int54 == 500);
        org.junit.Assert.assertNotNull(readPreference55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str6 = mongoProperties0.getUsername();
        java.lang.Integer int7 = mongoProperties0.getPort();
        mongoProperties0.setAuthenticationDatabase("test");
        java.lang.Integer int10 = mongoProperties0.getPort();
        mongoProperties0.clearPassword();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        java.lang.String str8 = mongoProperties0.getGridFsDatabase();
        mongoProperties0.setHost("");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        java.lang.String str14 = mongoClientOptions10.getDescription();
        com.mongodb.ReadPreference readPreference15 = mongoClientOptions10.getReadPreference();
        java.lang.String str16 = mongoClientOptions10.getDescription();
        int int17 = mongoClientOptions10.getMaxConnectionIdleTime();
        boolean boolean18 = mongoClientOptions10.isSocketKeepAlive();
        int int19 = mongoClientOptions10.getConnectTimeout();
        int int20 = mongoClientOptions10.getMaxConnectionLifeTime();
        int int21 = mongoClientOptions10.getHeartbeatThreadCount();
        boolean boolean22 = mongoClientOptions10.isAutoConnectRetry();
        int int23 = mongoClientOptions10.getThreadsAllowedToBlockForConnectionMultiplier();
        java.lang.String str24 = mongoClientOptions10.getDescription();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(readPreference15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10000 + "'", int19 == 10000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setAuthenticationDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUri();
        java.lang.Integer int6 = mongoProperties0.getPort();
        char[] charArray7 = mongoProperties0.getPassword();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "mongodb://localhost/test" + "'", str5, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(charArray7);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.maxAutoConnectRetryTime((long) 120000);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory32 = mongoClientOptions31.getDbDecoderFactory();
        int int33 = mongoClientOptions31.getSocketTimeout();
        long long34 = mongoClientOptions31.getMaxAutoConnectRetryTime();
        int int35 = mongoClientOptions31.getConnectionsPerHost();
        int int36 = mongoClientOptions31.getHeartbeatThreadCount();
        boolean boolean37 = mongoClientOptions31.isAutoConnectRetry();
        int int38 = mongoClientOptions31.getThreadsAllowedToBlockForConnectionMultiplier();
        int int39 = mongoClientOptions31.getLocalThreshold();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder41 = builder24.writeConcern(writeConcern40);
        com.mongodb.MongoClientOptions.Builder builder43 = builder24.maxConnectionLifeTime(5);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBDecoderFactory32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(writeConcern40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        com.mongodb.MongoClientOptions.Builder builder4 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder7 = builder6.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder9 = builder6.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions10 = builder6.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory11 = mongoClientOptions10.getDbEncoderFactory();
        org.springframework.core.env.Environment environment12 = null;
        com.mongodb.MongoClient mongoClient13 = mongoProperties0.createMongoClient(mongoClientOptions10, environment12);
        int int14 = mongoClientOptions10.getSocketTimeout();
        int int15 = mongoClientOptions10.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder26.connectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.alwaysUseMBeans(true);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.maxAutoConnectRetryTime((long) 10);
        boolean boolean39 = mongoClientOptions10.equals((java.lang.Object) builder38);
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern50 = mongoClientOptions48.getWriteConcern();
        long long51 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        int int52 = mongoClientOptions48.getHeartbeatThreadCount();
        long long53 = mongoClientOptions48.getMaxAutoConnectRetryTime();
        com.mongodb.DBEncoderFactory dBEncoderFactory54 = mongoClientOptions48.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder55 = builder41.dbEncoderFactory(dBEncoderFactory54);
        com.mongodb.MongoClientOptions.Builder builder57 = builder55.maxConnectionLifeTime((int) (short) 1);
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(mongoClientOptions10);
        org.junit.Assert.assertNotNull(dBEncoderFactory11);
        org.junit.Assert.assertNotNull(mongoClient13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 120000 + "'", int15 == 120000);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(writeConcern50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dBEncoderFactory54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.minHeartbeatFrequency(5000);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.maxAutoConnectRetryTime((long) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectTimeout(5000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        java.lang.Class<?> wildcardClass22 = mongoProperties21.getFieldNamingStrategy();
        char[] charArray23 = mongoProperties21.getPassword();
        java.lang.String str24 = mongoProperties21.getDatabase();
        java.lang.String str25 = mongoProperties21.getHost();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions27 = null;
        org.springframework.core.env.Environment environment28 = null;
        com.mongodb.MongoClient mongoClient29 = mongoProperties26.createMongoClient(mongoClientOptions27, environment28);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder33 = builder32.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder35 = builder32.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder32.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory37 = mongoClientOptions36.getDbEncoderFactory();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties26.createMongoClient(mongoClientOptions36, environment38);
        java.lang.String str40 = mongoClientOptions36.getDescription();
        com.mongodb.ReadPreference readPreference41 = mongoClientOptions36.getReadPreference();
        com.mongodb.WriteConcern writeConcern42 = mongoClientOptions36.getWriteConcern();
        boolean boolean43 = mongoClientOptions36.isAlwaysUseMBeans();
        int int44 = mongoClientOptions36.getHeartbeatConnectRetryFrequency();
        com.mongodb.MongoClient mongoClient45 = mongoProperties21.createMongoClient(mongoClientOptions36);
        int int46 = mongoClientOptions36.getAcceptableLatencyDifference();
        javax.net.SocketFactory socketFactory47 = mongoClientOptions36.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder48 = builder18.socketFactory(socketFactory47);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(charArray23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
        org.junit.Assert.assertNotNull(dBEncoderFactory37);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(readPreference41);
        org.junit.Assert.assertNotNull(writeConcern42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 500 + "'", int44 == 500);
        org.junit.Assert.assertNotNull(mongoClient45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(socketFactory47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions28.getDbDecoderFactory();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions28.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions28.getReadPreference();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions28.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        boolean boolean38 = mongoClientOptions37.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory39 = mongoClientOptions37.getSocketFactory();
        int int40 = mongoClientOptions37.getHeartbeatConnectTimeout();
        int int41 = mongoClientOptions37.getThreadsAllowedToBlockForConnectionMultiplier();
        int int42 = mongoClientOptions37.getConnectionsPerHost();
        boolean boolean43 = mongoClientOptions37.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(socketFactory39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getUri();
        char[] charArray12 = mongoProperties0.getPassword();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        com.mongodb.ReadPreference readPreference21 = mongoClientOptions19.getReadPreference();
        org.springframework.core.env.Environment environment22 = null;
        com.mongodb.MongoClient mongoClient23 = mongoProperties0.createMongoClient(mongoClientOptions19, environment22);
        java.lang.String str24 = mongoProperties0.getHost();
        java.lang.Class<?> wildcardClass25 = mongoProperties0.getFieldNamingStrategy();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "mongodb://localhost/test" + "'", str11, "mongodb://localhost/test");
        org.junit.Assert.assertNull(charArray12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertNotNull(readPreference21);
        org.junit.Assert.assertNotNull(mongoClient23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        java.lang.String str11 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.MongoClientOptions.Builder builder12 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.description("");
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxWaitTime(1);
        boolean boolean29 = mongoClientOptions6.equals((java.lang.Object) builder24);
        com.mongodb.MongoClientOptions.Builder builder30 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder42 = builder36.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.maxWaitTime(27017);
        boolean boolean45 = mongoClientOptions6.equals((java.lang.Object) 27017);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties46 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties46.setAuthenticationDatabase("");
        java.lang.String str49 = mongoProperties46.getGridFsDatabase();
        mongoProperties46.setHost("test");
        java.lang.String str52 = mongoProperties46.getMongoClientDatabase();
        java.lang.Integer int53 = mongoProperties46.getPort();
        mongoProperties46.setUri("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties56 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties56.setAuthenticationDatabase("");
        mongoProperties56.setDatabase("hi!");
        java.lang.String str61 = mongoProperties56.getUsername();
        java.lang.String str62 = mongoProperties56.getDatabase();
        java.lang.String str63 = mongoProperties56.getUsername();
        com.mongodb.MongoClientOptions.Builder builder64 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder66 = builder64.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder67 = builder66.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder69 = builder66.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions70 = builder66.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory71 = mongoClientOptions70.getDbDecoderFactory();
        int int72 = mongoClientOptions70.getMaxConnectionIdleTime();
        boolean boolean73 = mongoClientOptions70.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment74 = null;
        com.mongodb.MongoClient mongoClient75 = mongoProperties56.createMongoClient(mongoClientOptions70, environment74);
        int int76 = mongoClientOptions70.getHeartbeatFrequency();
        int int77 = mongoClientOptions70.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment78 = null;
        com.mongodb.MongoClient mongoClient79 = mongoProperties46.createMongoClient(mongoClientOptions70, environment78);
        boolean boolean80 = mongoClientOptions6.equals((java.lang.Object) mongoClient79);
        int int81 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "test" + "'", str52, "test");
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(mongoClientOptions70);
        org.junit.Assert.assertNotNull(dBDecoderFactory71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(mongoClient75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5000 + "'", int76 == 5000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(mongoClient79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.minHeartbeatFrequency((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties15.setAuthenticationDatabase("");
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions24.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory26 = mongoClientOptions24.getSocketFactory();
        int int27 = mongoClientOptions24.getHeartbeatFrequency();
        java.lang.String str28 = mongoClientOptions24.toString();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions24.getSocketFactory();
        org.springframework.core.env.Environment environment30 = null;
        com.mongodb.MongoClient mongoClient31 = mongoProperties15.createMongoClient(mongoClientOptions24, environment30);
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions24.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions mongoClientOptions36 = builder10.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(socketFactory26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5000 + "'", int27 == 5000);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertNotNull(mongoClient31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mongoClientOptions36);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        int int15 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions6.getHeartbeatThreadCount();
        int int18 = mongoClientOptions6.getConnectTimeout();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10000 + "'", int18 == 10000);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        java.lang.Object obj15 = null;
        boolean boolean16 = mongoClientOptions6.equals(obj15);
        int int17 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions6.getAcceptableLatencyDifference();
        java.lang.String str19 = mongoClientOptions6.getRequiredReplicaSetName();
        int int20 = mongoClientOptions6.getConnectionsPerHost();
        java.lang.String str21 = mongoClientOptions6.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder28 = builder24.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder28.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder34 = builder30.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder38 = builder34.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder34.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions41 = builder40.build();
        int int42 = mongoClientOptions41.getMinHeartbeatFrequency();
        int int43 = mongoClientOptions41.getMaxConnectionIdleTime();
        boolean boolean44 = mongoClientOptions19.equals((java.lang.Object) mongoClientOptions41);
        boolean boolean45 = mongoClientOptions19.isSocketKeepAlive();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClientOptions41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20000 + "'", int42 == 20000);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.threadsAllowedToBlockForConnectionMultiplier((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder23 = builder21.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder24 = builder23.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder26 = builder23.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions27 = builder23.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory28 = mongoClientOptions27.getDbEncoderFactory();
        int int29 = mongoClientOptions27.getHeartbeatThreadCount();
        com.mongodb.DBEncoderFactory dBEncoderFactory30 = mongoClientOptions27.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder31 = builder18.dbEncoderFactory(dBEncoderFactory30);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        int int33 = mongoClientOptions32.getHeartbeatThreadCount();
        int int34 = mongoClientOptions32.getMinConnectionsPerHost();
        int int35 = mongoClientOptions32.getHeartbeatConnectRetryFrequency();
        boolean boolean36 = mongoClientOptions32.isSocketKeepAlive();
        java.lang.String str37 = mongoClientOptions32.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(mongoClientOptions27);
        org.junit.Assert.assertNotNull(dBEncoderFactory28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dBEncoderFactory30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 500 + "'", int35 == 500);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.maxConnectionLifeTime(15);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.acceptableLatencyDifference((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder19 = builder18.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder21 = builder18.heartbeatConnectTimeout(5000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder23 = builder18.heartbeatConnectRetryFrequency((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: minHeartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder39 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder41 = builder39.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder42 = builder41.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder44 = builder41.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions45 = builder41.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory46 = mongoClientOptions45.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference47 = mongoClientOptions45.getReadPreference();
        com.mongodb.DBDecoderFactory dBDecoderFactory48 = mongoClientOptions45.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder49 = builder14.dbDecoderFactory(dBDecoderFactory48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder49.maxConnectionIdleTime(0);
        com.mongodb.MongoClientOptions.Builder builder53 = builder51.maxWaitTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder55 = builder51.description("test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(mongoClientOptions45);
        org.junit.Assert.assertNotNull(dBDecoderFactory46);
        org.junit.Assert.assertNotNull(readPreference47);
        org.junit.Assert.assertNotNull(dBDecoderFactory48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.maxConnectionLifeTime(0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder20 = builder18.connectionsPerHost(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder17.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder23 = builder17.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder24 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder27 = builder26.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder29 = builder26.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions30 = builder26.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions30.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions30.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder23.writeConcern(writeConcern32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder36 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder39 = builder38.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder41 = builder38.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions42 = builder38.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory43 = mongoClientOptions42.getDbEncoderFactory();
        int int44 = mongoClientOptions42.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory45 = mongoClientOptions42.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference46 = mongoClientOptions42.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder47 = builder35.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder48 = builder10.readPreference(readPreference46);
        com.mongodb.MongoClientOptions.Builder builder50 = builder10.description("hi!");
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder52 = builder10.heartbeatThreadCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatThreadCount must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(mongoClientOptions30);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(mongoClientOptions42);
        org.junit.Assert.assertNotNull(dBEncoderFactory43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory45);
        org.junit.Assert.assertNotNull(readPreference46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        boolean boolean13 = mongoClientOptions6.isCursorFinalizerEnabled();
        boolean boolean14 = mongoClientOptions6.isSocketKeepAlive();
        int int15 = mongoClientOptions6.getSocketTimeout();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.description("");
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder32 = builder26.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.maxWaitTime((int) (byte) 10);
        boolean boolean37 = mongoClientOptions6.equals((java.lang.Object) builder36);
        com.mongodb.WriteConcern writeConcern38 = mongoClientOptions6.getWriteConcern();
        int int39 = mongoClientOptions6.getSocketTimeout();
        com.mongodb.WriteConcern writeConcern40 = mongoClientOptions6.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(writeConcern38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(writeConcern40);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.connectionsPerHost((int) '#');
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder29 = builder25.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder31.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder35 = builder31.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder37 = builder35.description("");
        com.mongodb.MongoClientOptions.Builder builder39 = builder35.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder41 = builder35.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder42 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder45 = builder44.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder47 = builder44.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions48 = builder44.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory49 = mongoClientOptions48.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory50 = mongoClientOptions48.getSocketFactory();
        com.mongodb.MongoClientOptions.Builder builder51 = builder41.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder52 = builder21.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder53 = builder18.socketFactory(socketFactory50);
        com.mongodb.MongoClientOptions.Builder builder55 = builder18.description("hi!");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mongoClientOptions48);
        org.junit.Assert.assertNotNull(dBDecoderFactory49);
        org.junit.Assert.assertNotNull(socketFactory50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.cursorFinalizerEnabled(true);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.description("hi!");
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.description("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatSocketTimeout(0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectTimeout((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        int int25 = mongoClientOptions23.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory26 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference27 = mongoClientOptions23.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder28 = builder16.readPreference(readPreference27);
        com.mongodb.MongoClientOptions.Builder builder30 = builder16.heartbeatSocketTimeout((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory26);
        org.junit.Assert.assertNotNull(readPreference27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.acceptableLatencyDifference((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.acceptableLatencyDifference((int) '#');
        com.mongodb.MongoClientOptions.Builder builder14 = builder6.requiredReplicaSetName("test");
        com.mongodb.MongoClientOptions.Builder builder15 = builder6.legacyDefaults();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxWaitTime(27017);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxAutoConnectRetryTime((long) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.maxWaitTime(1);
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxWaitTime(10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder18.build();
        int int20 = mongoClientOptions19.getAcceptableLatencyDifference();
        boolean boolean21 = mongoClientOptions19.isAutoConnectRetry();
        int int22 = mongoClientOptions19.getMaxConnectionLifeTime();
        boolean boolean23 = mongoClientOptions19.isCursorFinalizerEnabled();
        int int24 = mongoClientOptions19.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern25 = mongoClientOptions19.getWriteConcern();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 15 + "'", int20 == 15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(writeConcern25);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.String str6 = mongoProperties0.getUri();
        java.lang.String str7 = mongoProperties0.getDatabase();
        java.lang.Class<?> wildcardClass8 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setDatabase("mongodb://localhost/test");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str13 = mongoProperties0.getUri();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "mongodb://localhost/test" + "'", str6, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.maxConnectionIdleTime((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.description("");
        com.mongodb.MongoClientOptions.Builder builder18 = builder12.heartbeatConnectRetryFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder12.maxAutoConnectRetryTime(10L);
        com.mongodb.MongoClientOptions.Builder builder22 = builder12.socketTimeout(1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str9 = mongoClientOptions6.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory10 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern11 = mongoClientOptions6.getWriteConcern();
        int int12 = mongoClientOptions6.getConnectionsPerHost();
        int int13 = mongoClientOptions6.getMaxConnectionIdleTime();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties14.setAuthenticationDatabase("");
        java.lang.String str17 = mongoProperties14.getUri();
        java.lang.String str18 = mongoProperties14.getGridFsDatabase();
        mongoProperties14.setPort((java.lang.Integer) 27017);
        java.lang.String str21 = mongoProperties14.getMongoClientDatabase();
        mongoProperties14.setGridFsDatabase("hi!");
        java.lang.String str24 = mongoProperties14.getDatabase();
        mongoProperties14.setDatabase("hi!");
        mongoProperties14.setUri("test");
        java.lang.String str29 = mongoProperties14.getUri();
        char[] charArray30 = mongoProperties14.getPassword();
        java.lang.String str31 = mongoProperties14.getAuthenticationDatabase();
        mongoProperties14.setDatabase("mongodb://localhost/test");
        boolean boolean34 = mongoClientOptions6.equals((java.lang.Object) "mongodb://localhost/test");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dBDecoderFactory10);
        org.junit.Assert.assertNotNull(writeConcern11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "mongodb://localhost/test" + "'", str17, "mongodb://localhost/test");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "test" + "'", str21, "test");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "test" + "'", str29, "test");
        org.junit.Assert.assertNull(charArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        java.lang.String str10 = mongoClientOptions6.getDescription();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties21 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions22 = null;
        org.springframework.core.env.Environment environment23 = null;
        com.mongodb.MongoClient mongoClient24 = mongoProperties21.createMongoClient(mongoClientOptions22, environment23);
        com.mongodb.MongoClientOptions.Builder builder25 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder27 = builder25.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder28 = builder27.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder30 = builder27.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions31 = builder27.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions31.getDbEncoderFactory();
        org.springframework.core.env.Environment environment33 = null;
        com.mongodb.MongoClient mongoClient34 = mongoProperties21.createMongoClient(mongoClientOptions31, environment33);
        java.lang.String str35 = mongoClientOptions31.getDescription();
        com.mongodb.ReadPreference readPreference36 = mongoClientOptions31.getReadPreference();
        com.mongodb.WriteConcern writeConcern37 = mongoClientOptions31.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder38 = builder14.writeConcern(writeConcern37);
        com.mongodb.MongoClientOptions.Builder builder40 = builder14.socketTimeout(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties41 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions42 = null;
        org.springframework.core.env.Environment environment43 = null;
        com.mongodb.MongoClient mongoClient44 = mongoProperties41.createMongoClient(mongoClientOptions42, environment43);
        com.mongodb.MongoClientOptions.Builder builder45 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder47 = builder45.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder48 = builder47.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder50 = builder47.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions51 = builder47.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory52 = mongoClientOptions51.getDbEncoderFactory();
        org.springframework.core.env.Environment environment53 = null;
        com.mongodb.MongoClient mongoClient54 = mongoProperties41.createMongoClient(mongoClientOptions51, environment53);
        int int55 = mongoClientOptions51.getSocketTimeout();
        int int56 = mongoClientOptions51.getLocalThreshold();
        javax.net.SocketFactory socketFactory57 = mongoClientOptions51.getSocketFactory();
        int int58 = mongoClientOptions51.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory59 = mongoClientOptions51.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder60 = builder14.dbDecoderFactory(dBDecoderFactory59);
        com.mongodb.MongoClientOptions.Builder builder62 = builder60.heartbeatConnectRetryFrequency(97);
        com.mongodb.MongoClientOptions.Builder builder64 = builder60.minConnectionsPerHost((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClient24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(mongoClientOptions31);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(mongoClient34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(readPreference36);
        org.junit.Assert.assertNotNull(writeConcern37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(mongoClient44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(mongoClientOptions51);
        org.junit.Assert.assertNotNull(dBEncoderFactory52);
        org.junit.Assert.assertNotNull(mongoClient54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(socketFactory57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 120000 + "'", int58 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        long long9 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        int int10 = mongoClientOptions6.getConnectionsPerHost();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        java.lang.String str12 = mongoClientOptions6.toString();
        int int13 = mongoClientOptions6.getSocketTimeout();
        int int14 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int15 = mongoClientOptions6.getHeartbeatFrequency();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions6.getDbEncoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5000 + "'", int15 == 5000);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.mongodb.MongoClientOptions.Builder builder0 = new com.mongodb.MongoClientOptions.Builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.socketKeepAlive(false);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder6 = builder2.heartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder8 = builder2.socketTimeout(20000);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatFrequency((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        java.lang.String str14 = mongoProperties0.getAuthenticationDatabase();
        mongoProperties0.setUsername("hi!");
        mongoProperties0.setGridFsDatabase("");
        mongoProperties0.setDatabase("mongodb://localhost/test");
        java.lang.String str21 = mongoProperties0.getMongoClientDatabase();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#  a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#,  ,  , a,  ]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "mongodb://localhost/test" + "'", str21, "mongodb://localhost/test");
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.heartbeatSocketTimeout(100);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.heartbeatThreadCount(20000);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.acceptableLatencyDifference(10000);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        int int27 = mongoClientOptions23.getAcceptableLatencyDifference();
        int int28 = mongoClientOptions23.getHeartbeatFrequency();
        int int29 = mongoClientOptions23.getConnectTimeout();
        com.mongodb.WriteConcern writeConcern30 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder31 = builder12.writeConcern(writeConcern30);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder31.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5000 + "'", int28 == 5000);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10000 + "'", int29 == 10000);
        org.junit.Assert.assertNotNull(writeConcern30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.alwaysUseMBeans(false);
        com.mongodb.MongoClientOptions.Builder builder14 = builder12.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder16 = builder12.connectionsPerHost(10000);
        com.mongodb.MongoClientOptions.Builder builder17 = builder16.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.heartbeatSocketTimeout((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder21 = builder17.localThreshold((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: localThreshold must be greater than or equal to 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.threadsAllowedToBlockForConnectionMultiplier(10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder8.heartbeatConnectTimeout(500);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties13 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions14 = null;
        org.springframework.core.env.Environment environment15 = null;
        com.mongodb.MongoClient mongoClient16 = mongoProperties13.createMongoClient(mongoClientOptions14, environment15);
        com.mongodb.MongoClientOptions.Builder builder17 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder19.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder22 = builder19.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions23 = builder19.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory24 = mongoClientOptions23.getDbEncoderFactory();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties13.createMongoClient(mongoClientOptions23, environment25);
        int int27 = mongoClientOptions23.getSocketTimeout();
        int int28 = mongoClientOptions23.getLocalThreshold();
        javax.net.SocketFactory socketFactory29 = mongoClientOptions23.getSocketFactory();
        int int30 = mongoClientOptions23.getMaxWaitTime();
        com.mongodb.DBDecoderFactory dBDecoderFactory31 = mongoClientOptions23.getDbDecoderFactory();
        com.mongodb.WriteConcern writeConcern32 = mongoClientOptions23.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder33 = builder8.writeConcern(writeConcern32);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder35 = builder8.heartbeatFrequency((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: heartbeatFrequency must be greater than 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClient16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(mongoClientOptions23);
        org.junit.Assert.assertNotNull(dBEncoderFactory24);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(socketFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 120000 + "'", int30 == 120000);
        org.junit.Assert.assertNotNull(dBDecoderFactory31);
        org.junit.Assert.assertNotNull(writeConcern32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.String str3 = mongoProperties0.getUri();
        java.lang.Integer int4 = mongoProperties0.getPort();
        char[] charArray5 = mongoProperties0.getPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        java.lang.Class<?> wildcardClass9 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str10 = mongoProperties0.getHost();
        mongoProperties0.setPort((java.lang.Integer) 5000);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "mongodb://localhost/test" + "'", str3, "mongodb://localhost/test");
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(charArray5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties15 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions16 = null;
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties15.createMongoClient(mongoClientOptions16, environment17);
        com.mongodb.MongoClientOptions.Builder builder19 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder22 = builder21.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder24 = builder21.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions25 = builder21.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory26 = mongoClientOptions25.getDbEncoderFactory();
        org.springframework.core.env.Environment environment27 = null;
        com.mongodb.MongoClient mongoClient28 = mongoProperties15.createMongoClient(mongoClientOptions25, environment27);
        int int29 = mongoClientOptions25.getSocketTimeout();
        int int30 = mongoClientOptions25.getLocalThreshold();
        int int31 = mongoClientOptions25.getConnectTimeout();
        com.mongodb.DBEncoderFactory dBEncoderFactory32 = mongoClientOptions25.getDbEncoderFactory();
        com.mongodb.MongoClientOptions.Builder builder33 = builder10.dbEncoderFactory(dBEncoderFactory32);
        com.mongodb.MongoClientOptions.Builder builder35 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder36 = builder35.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.connectionsPerHost(100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(mongoClientOptions25);
        org.junit.Assert.assertNotNull(dBEncoderFactory26);
        org.junit.Assert.assertNotNull(mongoClient28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10000 + "'", int31 == 10000);
        org.junit.Assert.assertNotNull(dBEncoderFactory32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.String str6 = mongoProperties0.getDatabase();
        java.lang.String str7 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder8 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder10 = builder8.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder11 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder13 = builder10.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions14 = builder10.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory15 = mongoClientOptions14.getDbDecoderFactory();
        int int16 = mongoClientOptions14.getMaxConnectionIdleTime();
        boolean boolean17 = mongoClientOptions14.isCursorFinalizerEnabled();
        org.springframework.core.env.Environment environment18 = null;
        com.mongodb.MongoClient mongoClient19 = mongoProperties0.createMongoClient(mongoClientOptions14, environment18);
        int int20 = mongoClientOptions14.getHeartbeatFrequency();
        int int21 = mongoClientOptions14.getMinConnectionsPerHost();
        int int22 = mongoClientOptions14.getConnectTimeout();
        int int23 = mongoClientOptions14.getHeartbeatFrequency();
        int int24 = mongoClientOptions14.getConnectTimeout();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(mongoClientOptions14);
        org.junit.Assert.assertNotNull(dBDecoderFactory15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mongoClient19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5000 + "'", int20 == 5000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10000 + "'", int22 == 10000);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5000 + "'", int23 == 5000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.minConnectionsPerHost(5000);
        javax.net.SocketFactory socketFactory11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketFactory(socketFactory11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null is not a legal value");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder4.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder10 = builder4.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory18 = mongoClientOptions17.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern19 = mongoClientOptions17.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.writeConcern(writeConcern19);
        com.mongodb.MongoClientOptions.Builder builder22 = builder10.socketTimeout((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder23 = builder10.legacyDefaults();
        java.lang.Class<?> wildcardClass24 = builder23.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBEncoderFactory18);
        org.junit.Assert.assertNotNull(writeConcern19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        javax.net.SocketFactory socketFactory8 = mongoClientOptions6.getSocketFactory();
        int int9 = mongoClientOptions6.getHeartbeatFrequency();
        java.lang.String str10 = mongoClientOptions6.toString();
        int int11 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        int int12 = mongoClientOptions6.getMaxWaitTime();
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder17 = builder13.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder19 = builder17.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder21 = builder19.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder23 = builder19.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.description("");
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder29 = builder23.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder23.localThreshold((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder32 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder36 = builder32.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder40 = builder38.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder42 = builder38.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder44 = builder42.description("");
        com.mongodb.MongoClientOptions.Builder builder46 = builder42.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder47 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder49 = builder47.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder50 = builder49.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder52 = builder49.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions53 = builder49.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory54 = mongoClientOptions53.getDbDecoderFactory();
        int int55 = mongoClientOptions53.getMaxConnectionIdleTime();
        int int56 = mongoClientOptions53.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference57 = mongoClientOptions53.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder58 = builder42.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder59 = builder31.readPreference(readPreference57);
        com.mongodb.MongoClientOptions.Builder builder61 = builder59.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder62 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder64 = builder62.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder65 = builder64.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder67 = builder64.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions68 = builder64.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory69 = mongoClientOptions68.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference70 = mongoClientOptions68.getReadPreference();
        int int71 = mongoClientOptions68.getConnectionsPerHost();
        com.mongodb.MongoClientOptions.Builder builder72 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder74 = builder72.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder76 = builder72.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder78 = builder76.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder80 = builder78.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder82 = builder78.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder84 = builder82.description("");
        com.mongodb.MongoClientOptions.Builder builder86 = builder82.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder87 = builder82.legacyDefaults();
        boolean boolean88 = mongoClientOptions68.equals((java.lang.Object) builder87);
        int int89 = mongoClientOptions68.getHeartbeatConnectRetryFrequency();
        int int90 = mongoClientOptions68.getConnectionsPerHost();
        boolean boolean92 = mongoClientOptions68.equals((java.lang.Object) 0.0d);
        boolean boolean93 = mongoClientOptions68.isAlwaysUseMBeans();
        com.mongodb.WriteConcern writeConcern94 = mongoClientOptions68.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder95 = builder61.writeConcern(writeConcern94);
        boolean boolean96 = mongoClientOptions6.equals((java.lang.Object) builder95);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertNotNull(socketFactory8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5000 + "'", int9 == 5000);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 120000 + "'", int12 == 120000);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(mongoClientOptions53);
        org.junit.Assert.assertNotNull(dBDecoderFactory54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 500 + "'", int56 == 500);
        org.junit.Assert.assertNotNull(readPreference57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(mongoClientOptions68);
        org.junit.Assert.assertNotNull(dBDecoderFactory69);
        org.junit.Assert.assertNotNull(readPreference70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 500 + "'", int89 == 500);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(writeConcern94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        boolean boolean30 = mongoClientOptions24.isCursorFinalizerEnabled();
        com.mongodb.DBEncoderFactory dBEncoderFactory31 = mongoClientOptions24.getDbEncoderFactory();
        int int32 = mongoClientOptions24.getAcceptableLatencyDifference();
        int int33 = mongoClientOptions24.getHeartbeatFrequency();
        java.lang.String str34 = mongoClientOptions24.toString();
        boolean boolean35 = mongoClientOptions24.isAlwaysUseMBeans();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dBEncoderFactory31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5000 + "'", int33 == 5000);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        java.lang.String str11 = mongoProperties0.getDatabase();
        java.lang.String str12 = mongoProperties0.getUri();
        java.lang.String str13 = mongoProperties0.getUri();
        java.lang.Class<?> wildcardClass14 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.clearPassword();
        mongoProperties0.setPort((java.lang.Integer) 10000);
        mongoProperties0.setAuthenticationDatabase("test");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "mongodb://localhost/test" + "'", str12, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "mongodb://localhost/test" + "'", str13, "mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getSocketTimeout();
        int int9 = mongoClientOptions6.getSocketTimeout();
        java.lang.String str10 = mongoClientOptions6.getRequiredReplicaSetName();
        int int11 = mongoClientOptions6.getAcceptableLatencyDifference();
        int int12 = mongoClientOptions6.getHeartbeatFrequency();
        int int13 = mongoClientOptions6.getConnectionsPerHost();
        int int14 = mongoClientOptions6.getMaxWaitTime();
        int int15 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int16 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int17 = mongoClientOptions6.getHeartbeatThreadCount();
        long long18 = mongoClientOptions6.getMaxAutoConnectRetryTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5000 + "'", int12 == 5000);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 120000 + "'", int14 == 120000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        int int8 = mongoClientOptions6.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory9 = mongoClientOptions6.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        int int11 = mongoClientOptions6.getHeartbeatThreadCount();
        javax.net.SocketFactory socketFactory12 = mongoClientOptions6.getSocketFactory();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isAlwaysUseMBeans();
        int int15 = mongoClientOptions6.getConnectionsPerHost();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory9);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(socketFactory12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        java.lang.String str5 = mongoProperties0.getUsername();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        com.mongodb.MongoClientOptions mongoClientOptions7 = null;
        org.springframework.core.env.Environment environment8 = null;
        com.mongodb.MongoClient mongoClient9 = mongoProperties0.createMongoClient(mongoClientOptions7, environment8);
        java.lang.String str10 = mongoProperties0.getMongoClientDatabase();
        com.mongodb.MongoClientOptions.Builder builder11 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder13 = builder11.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder14 = builder13.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder16 = builder13.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder13.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory18 = mongoClientOptions17.getDbDecoderFactory();
        int int19 = mongoClientOptions17.getSocketTimeout();
        int int20 = mongoClientOptions17.getSocketTimeout();
        java.lang.String str21 = mongoClientOptions17.getRequiredReplicaSetName();
        java.lang.String str22 = mongoClientOptions17.getRequiredReplicaSetName();
        com.mongodb.DBDecoderFactory dBDecoderFactory23 = mongoClientOptions17.getDbDecoderFactory();
        int int24 = mongoClientOptions17.getHeartbeatConnectTimeout();
        org.springframework.core.env.Environment environment25 = null;
        com.mongodb.MongoClient mongoClient26 = mongoProperties0.createMongoClient(mongoClientOptions17, environment25);
        java.lang.String str27 = mongoProperties0.getUri();
        java.lang.String str28 = mongoProperties0.getDatabase();
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(mongoClient9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(dBDecoderFactory18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dBDecoderFactory23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20000 + "'", int24 == 20000);
        org.junit.Assert.assertNotNull(mongoClient26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "mongodb://localhost/test" + "'", str27, "mongodb://localhost/test");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder15 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder17 = builder15.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder17.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder20 = builder17.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions21 = builder17.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions21.getDbDecoderFactory();
        int int23 = mongoClientOptions21.getMaxConnectionIdleTime();
        int int24 = mongoClientOptions21.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference25 = mongoClientOptions21.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder26 = builder10.readPreference(readPreference25);
        com.mongodb.MongoClientOptions.Builder builder28 = builder10.heartbeatConnectRetryFrequency((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder10.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder10.socketKeepAlive(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(mongoClientOptions21);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 500 + "'", int24 == 500);
        org.junit.Assert.assertNotNull(readPreference25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder2.acceptableLatencyDifference(27017);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.maxConnectionIdleTime((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.maxConnectionLifeTime((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder6.connectionsPerHost(5000);
        com.mongodb.MongoClientOptions.Builder builder13 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder15 = builder13.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder15.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder18 = builder15.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions19 = builder15.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory20 = mongoClientOptions19.getDbEncoderFactory();
        int int21 = mongoClientOptions19.getHeartbeatThreadCount();
        com.mongodb.DBDecoderFactory dBDecoderFactory22 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.ReadPreference readPreference23 = mongoClientOptions19.getReadPreference();
        int int24 = mongoClientOptions19.getConnectTimeout();
        com.mongodb.DBDecoderFactory dBDecoderFactory25 = mongoClientOptions19.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder26 = builder6.dbDecoderFactory(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(mongoClientOptions19);
        org.junit.Assert.assertNotNull(dBEncoderFactory20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dBDecoderFactory22);
        org.junit.Assert.assertNotNull(readPreference23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10000 + "'", int24 == 10000);
        org.junit.Assert.assertNotNull(dBDecoderFactory25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.socketKeepAlive(true);
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory16 = mongoClientOptions15.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder17 = builder8.dbDecoderFactory(dBDecoderFactory16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder22 = builder18.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder28 = builder22.socketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder29 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.minHeartbeatFrequency((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.heartbeatFrequency(100);
        com.mongodb.MongoClientOptions.Builder builder40 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder42 = builder40.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder43 = builder42.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder45 = builder42.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions46 = builder42.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory47 = mongoClientOptions46.getDbEncoderFactory();
        com.mongodb.WriteConcern writeConcern48 = mongoClientOptions46.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder49 = builder39.writeConcern(writeConcern48);
        com.mongodb.MongoClientOptions.Builder builder50 = builder22.writeConcern(writeConcern48);
        com.mongodb.MongoClientOptions.Builder builder51 = builder8.writeConcern(writeConcern48);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties52 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions53 = null;
        org.springframework.core.env.Environment environment54 = null;
        com.mongodb.MongoClient mongoClient55 = mongoProperties52.createMongoClient(mongoClientOptions53, environment54);
        com.mongodb.MongoClientOptions.Builder builder56 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder58 = builder56.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder59 = builder58.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder61 = builder58.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions62 = builder58.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory63 = mongoClientOptions62.getDbEncoderFactory();
        org.springframework.core.env.Environment environment64 = null;
        com.mongodb.MongoClient mongoClient65 = mongoProperties52.createMongoClient(mongoClientOptions62, environment64);
        int int66 = mongoClientOptions62.getAcceptableLatencyDifference();
        com.mongodb.MongoClientOptions.Builder builder67 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder71 = builder67.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder73 = builder71.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder75 = builder73.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder77 = builder73.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder79 = builder77.description("");
        com.mongodb.MongoClientOptions.Builder builder81 = builder79.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder83 = builder81.heartbeatConnectTimeout(0);
        com.mongodb.MongoClientOptions.Builder builder85 = builder81.heartbeatConnectRetryFrequency(500);
        boolean boolean86 = mongoClientOptions62.equals((java.lang.Object) builder85);
        int int87 = mongoClientOptions62.getMaxWaitTime();
        int int88 = mongoClientOptions62.getMaxWaitTime();
        int int89 = mongoClientOptions62.getAcceptableLatencyDifference();
        com.mongodb.WriteConcern writeConcern90 = mongoClientOptions62.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder91 = builder51.writeConcern(writeConcern90);
        com.mongodb.MongoClientOptions mongoClientOptions92 = builder51.build();
        int int93 = mongoClientOptions92.getMaxConnectionIdleTime();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBDecoderFactory16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mongoClientOptions46);
        org.junit.Assert.assertNotNull(dBEncoderFactory47);
        org.junit.Assert.assertNotNull(writeConcern48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(mongoClient55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(mongoClientOptions62);
        org.junit.Assert.assertNotNull(dBEncoderFactory63);
        org.junit.Assert.assertNotNull(mongoClient65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 120000 + "'", int87 == 120000);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 120000 + "'", int88 == 120000);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(writeConcern90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(mongoClientOptions92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions1 = null;
        org.springframework.core.env.Environment environment2 = null;
        com.mongodb.MongoClient mongoClient3 = mongoProperties0.createMongoClient(mongoClientOptions1, environment2);
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str6 = mongoProperties0.getUsername();
        com.mongodb.MongoClientOptions.Builder builder7 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder9 = builder7.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder10 = builder9.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder12 = builder9.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions13 = builder9.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory14 = mongoClientOptions13.getDbDecoderFactory();
        int int15 = mongoClientOptions13.getMaxConnectionIdleTime();
        int int16 = mongoClientOptions13.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference17 = mongoClientOptions13.getReadPreference();
        boolean boolean18 = mongoClientOptions13.isAutoConnectRetry();
        int int19 = mongoClientOptions13.getLocalThreshold();
        int int20 = mongoClientOptions13.getConnectTimeout();
        int int21 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int22 = mongoClientOptions13.getThreadsAllowedToBlockForConnectionMultiplier();
        int int23 = mongoClientOptions13.getHeartbeatThreadCount();
        org.springframework.core.env.Environment environment24 = null;
        com.mongodb.MongoClient mongoClient25 = mongoProperties0.createMongoClient(mongoClientOptions13, environment24);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties26 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties26.setAuthenticationDatabase("");
        mongoProperties26.setDatabase("hi!");
        java.lang.String str31 = mongoProperties26.getUsername();
        mongoProperties26.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions mongoClientOptions34 = null;
        org.springframework.core.env.Environment environment35 = null;
        com.mongodb.MongoClient mongoClient36 = mongoProperties26.createMongoClient(mongoClientOptions34, environment35);
        com.mongodb.MongoClientOptions.Builder builder37 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder39 = builder37.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder40 = builder39.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder42 = builder39.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions43 = builder39.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory44 = mongoClientOptions43.getDbDecoderFactory();
        int int45 = mongoClientOptions43.getHeartbeatConnectTimeout();
        java.lang.String str46 = mongoClientOptions43.toString();
        org.springframework.core.env.Environment environment47 = null;
        com.mongodb.MongoClient mongoClient48 = mongoProperties26.createMongoClient(mongoClientOptions43, environment47);
        java.lang.String str49 = mongoClientOptions43.getDescription();
        org.springframework.core.env.Environment environment50 = null;
        com.mongodb.MongoClient mongoClient51 = mongoProperties0.createMongoClient(mongoClientOptions43, environment50);
        java.lang.String str52 = mongoClientOptions43.getRequiredReplicaSetName();
        org.junit.Assert.assertNotNull(mongoClient3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(mongoClientOptions13);
        org.junit.Assert.assertNotNull(dBDecoderFactory14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 500 + "'", int16 == 500);
        org.junit.Assert.assertNotNull(readPreference17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10000 + "'", int20 == 10000);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mongoClient25);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(mongoClient36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(mongoClientOptions43);
        org.junit.Assert.assertNotNull(dBDecoderFactory44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20000 + "'", int45 == 20000);
        org.junit.Assert.assertNotNull(mongoClient48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(mongoClient51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory7 = mongoClientOptions6.getDbDecoderFactory();
        int int8 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int9 = mongoClientOptions6.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference10 = mongoClientOptions6.getReadPreference();
        boolean boolean11 = mongoClientOptions6.isAutoConnectRetry();
        int int12 = mongoClientOptions6.getLocalThreshold();
        int int13 = mongoClientOptions6.getConnectTimeout();
        int int14 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        int int15 = mongoClientOptions6.getThreadsAllowedToBlockForConnectionMultiplier();
        com.mongodb.MongoClientOptions.Builder builder16 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder18 = builder16.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder20 = builder16.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder26 = builder22.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder30 = builder26.heartbeatConnectRetryFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder32 = builder30.minHeartbeatFrequency((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder34 = builder32.minHeartbeatFrequency(1);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.heartbeatSocketTimeout(27017);
        com.mongodb.MongoClientOptions.Builder builder38 = builder36.heartbeatSocketTimeout(5000);
        com.mongodb.MongoClientOptions.Builder builder40 = builder36.minHeartbeatFrequency(15);
        boolean boolean41 = mongoClientOptions6.equals((java.lang.Object) 15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBDecoderFactory7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 500 + "'", int9 == 500);
        org.junit.Assert.assertNotNull(readPreference10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10000 + "'", int13 == 10000);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setDatabase("hi!");
        char[] charArray10 = new char[] { '#', ' ', ' ', 'a', ' ' };
        mongoProperties0.setPassword(charArray10);
        java.lang.Integer int12 = mongoProperties0.getPort();
        java.lang.Integer int13 = mongoProperties0.getPort();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties14 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions15 = null;
        org.springframework.core.env.Environment environment16 = null;
        com.mongodb.MongoClient mongoClient17 = mongoProperties14.createMongoClient(mongoClientOptions15, environment16);
        com.mongodb.MongoClientOptions.Builder builder18 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder20 = builder18.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder21 = builder20.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder23 = builder20.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions24 = builder20.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory25 = mongoClientOptions24.getDbEncoderFactory();
        org.springframework.core.env.Environment environment26 = null;
        com.mongodb.MongoClient mongoClient27 = mongoProperties14.createMongoClient(mongoClientOptions24, environment26);
        java.lang.String str28 = mongoClientOptions24.getDescription();
        com.mongodb.MongoClient mongoClient29 = mongoProperties0.createMongoClient(mongoClientOptions24);
        int int30 = mongoClientOptions24.getMinHeartbeatFrequency();
        boolean boolean31 = mongoClientOptions24.isSocketKeepAlive();
        javax.net.SocketFactory socketFactory32 = mongoClientOptions24.getSocketFactory();
        boolean boolean33 = mongoClientOptions24.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000, \000, \000, \000, \000]");
        org.junit.Assert.assertNull(int12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(mongoClient17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(mongoClientOptions24);
        org.junit.Assert.assertNotNull(dBEncoderFactory25);
        org.junit.Assert.assertNotNull(mongoClient27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mongoClient29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 500 + "'", int30 == 500);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(socketFactory32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder16 = builder14.localThreshold((int) (byte) 100);
        com.mongodb.MongoClientOptions.Builder builder18 = builder14.heartbeatConnectTimeout(10);
        com.mongodb.MongoClientOptions.Builder builder20 = builder14.heartbeatSocketTimeout((int) (byte) 1);
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.minConnectionsPerHost((int) (byte) 10);
        com.mongodb.MongoClientOptions.Builder builder23 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder25 = builder23.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder27 = builder23.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder29 = builder27.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder31 = builder29.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder33 = builder29.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder35 = builder33.description("");
        com.mongodb.MongoClientOptions.Builder builder37 = builder33.maxConnectionLifeTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder39 = builder33.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder41 = builder33.autoConnectRetry(false);
        com.mongodb.MongoClientOptions.Builder builder43 = builder41.heartbeatThreadCount((int) (byte) 1);
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties44 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions45 = null;
        org.springframework.core.env.Environment environment46 = null;
        com.mongodb.MongoClient mongoClient47 = mongoProperties44.createMongoClient(mongoClientOptions45, environment46);
        com.mongodb.MongoClientOptions.Builder builder48 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder50 = builder48.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder51 = builder50.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder53 = builder50.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions54 = builder50.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory55 = mongoClientOptions54.getDbEncoderFactory();
        org.springframework.core.env.Environment environment56 = null;
        com.mongodb.MongoClient mongoClient57 = mongoProperties44.createMongoClient(mongoClientOptions54, environment56);
        java.lang.String str58 = mongoClientOptions54.getDescription();
        com.mongodb.ReadPreference readPreference59 = mongoClientOptions54.getReadPreference();
        com.mongodb.WriteConcern writeConcern60 = mongoClientOptions54.getWriteConcern();
        int int61 = mongoClientOptions54.getHeartbeatConnectRetryFrequency();
        com.mongodb.WriteConcern writeConcern62 = mongoClientOptions54.getWriteConcern();
        com.mongodb.MongoClientOptions.Builder builder63 = builder43.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder64 = builder20.writeConcern(writeConcern62);
        com.mongodb.MongoClientOptions.Builder builder66 = builder20.localThreshold(10000);
        com.mongodb.MongoClientOptions.Builder builder67 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder69 = builder67.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder70 = builder69.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder72 = builder69.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions73 = builder69.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory74 = mongoClientOptions73.getDbDecoderFactory();
        int int75 = mongoClientOptions73.getHeartbeatConnectTimeout();
        int int76 = mongoClientOptions73.getHeartbeatConnectTimeout();
        int int77 = mongoClientOptions73.getHeartbeatFrequency();
        boolean boolean78 = mongoClientOptions73.isAlwaysUseMBeans();
        com.mongodb.DBDecoderFactory dBDecoderFactory79 = mongoClientOptions73.getDbDecoderFactory();
        com.mongodb.MongoClientOptions.Builder builder80 = builder20.dbDecoderFactory(dBDecoderFactory79);
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder82 = builder20.connectionsPerHost((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(mongoClient47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(mongoClientOptions54);
        org.junit.Assert.assertNotNull(dBEncoderFactory55);
        org.junit.Assert.assertNotNull(mongoClient57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(readPreference59);
        org.junit.Assert.assertNotNull(writeConcern60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 500 + "'", int61 == 500);
        org.junit.Assert.assertNotNull(writeConcern62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(mongoClientOptions73);
        org.junit.Assert.assertNotNull(dBDecoderFactory74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20000 + "'", int75 == 20000);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20000 + "'", int76 == 20000);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5000 + "'", int77 == 5000);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dBDecoderFactory79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        java.lang.Class<?> wildcardClass3 = mongoProperties0.getFieldNamingStrategy();
        java.lang.String str4 = mongoProperties0.getAuthenticationDatabase();
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties5 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        com.mongodb.MongoClientOptions mongoClientOptions6 = null;
        org.springframework.core.env.Environment environment7 = null;
        com.mongodb.MongoClient mongoClient8 = mongoProperties5.createMongoClient(mongoClientOptions6, environment7);
        com.mongodb.MongoClientOptions.Builder builder9 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder11 = builder9.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder12 = builder11.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder14 = builder11.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions15 = builder11.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory16 = mongoClientOptions15.getDbEncoderFactory();
        org.springframework.core.env.Environment environment17 = null;
        com.mongodb.MongoClient mongoClient18 = mongoProperties5.createMongoClient(mongoClientOptions15, environment17);
        int int19 = mongoClientOptions15.getAcceptableLatencyDifference();
        org.springframework.core.env.Environment environment20 = null;
        com.mongodb.MongoClient mongoClient21 = mongoProperties0.createMongoClient(mongoClientOptions15, environment20);
        mongoProperties0.setUsername("test");
        mongoProperties0.setAuthenticationDatabase("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder26 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder28 = builder26.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder29 = builder28.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder31 = builder28.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions32 = builder28.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory33 = mongoClientOptions32.getDbEncoderFactory();
        boolean boolean34 = mongoClientOptions32.isSocketKeepAlive();
        int int35 = mongoClientOptions32.getMaxConnectionLifeTime();
        boolean boolean36 = mongoClientOptions32.isAlwaysUseMBeans();
        int int37 = mongoClientOptions32.getMinConnectionsPerHost();
        org.springframework.core.env.Environment environment38 = null;
        com.mongodb.MongoClient mongoClient39 = mongoProperties0.createMongoClient(mongoClientOptions32, environment38);
        mongoProperties0.setAuthenticationDatabase("hi!");
        mongoProperties0.setUri("mongodb://localhost/test");
        java.lang.String str44 = mongoProperties0.getDatabase();
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(mongoClient8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mongoClientOptions15);
        org.junit.Assert.assertNotNull(dBEncoderFactory16);
        org.junit.Assert.assertNotNull(mongoClient18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(mongoClient21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(mongoClientOptions32);
        org.junit.Assert.assertNotNull(dBEncoderFactory33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mongoClient39);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder3 = builder2.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder5 = builder2.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions6 = builder2.build();
        com.mongodb.DBEncoderFactory dBEncoderFactory7 = mongoClientOptions6.getDbEncoderFactory();
        java.lang.String str8 = mongoClientOptions6.getDescription();
        boolean boolean9 = mongoClientOptions6.isAlwaysUseMBeans();
        int int10 = mongoClientOptions6.getHeartbeatThreadCount();
        int int11 = mongoClientOptions6.getMinHeartbeatFrequency();
        int int12 = mongoClientOptions6.getMaxConnectionLifeTime();
        int int13 = mongoClientOptions6.getMaxConnectionLifeTime();
        boolean boolean14 = mongoClientOptions6.isCursorFinalizerEnabled();
        java.lang.String str15 = mongoClientOptions6.getDescription();
        boolean boolean16 = mongoClientOptions6.isAlwaysUseMBeans();
        int int17 = mongoClientOptions6.getMaxConnectionIdleTime();
        int int18 = mongoClientOptions6.getHeartbeatConnectTimeout();
        int int19 = mongoClientOptions6.getAcceptableLatencyDifference();
        boolean boolean20 = mongoClientOptions6.isCursorFinalizerEnabled();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(mongoClientOptions6);
        org.junit.Assert.assertNotNull(dBEncoderFactory7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 500 + "'", int11 == 500);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20000 + "'", int18 == 20000);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.socketTimeout((int) (short) 1);
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.minHeartbeatFrequency(10);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.heartbeatConnectRetryFrequency(20000);
        com.mongodb.MongoClientOptions mongoClientOptions17 = builder16.build();
        com.mongodb.MongoClientOptions.Builder builder19 = builder16.maxWaitTime((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder21 = builder16.heartbeatSocketTimeout((int) ' ');
        com.mongodb.MongoClientOptions.Builder builder22 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.acceptableLatencyDifference((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder25 = builder24.legacyDefaults();
        com.mongodb.MongoClientOptions.Builder builder27 = builder24.socketTimeout((int) (byte) 10);
        com.mongodb.MongoClientOptions mongoClientOptions28 = builder24.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory29 = mongoClientOptions28.getDbDecoderFactory();
        int int30 = mongoClientOptions28.getMaxConnectionIdleTime();
        int int31 = mongoClientOptions28.getHeartbeatConnectRetryFrequency();
        com.mongodb.ReadPreference readPreference32 = mongoClientOptions28.getReadPreference();
        com.mongodb.ReadPreference readPreference33 = mongoClientOptions28.getReadPreference();
        com.mongodb.MongoClientOptions.Builder builder34 = builder16.readPreference(readPreference33);
        com.mongodb.MongoClientOptions.Builder builder36 = builder34.description("test");
        com.mongodb.MongoClientOptions mongoClientOptions37 = builder34.build();
        com.mongodb.MongoClientOptions mongoClientOptions38 = builder34.build();
        com.mongodb.DBDecoderFactory dBDecoderFactory39 = mongoClientOptions38.getDbDecoderFactory();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mongoClientOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(mongoClientOptions28);
        org.junit.Assert.assertNotNull(dBDecoderFactory29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 500 + "'", int31 == 500);
        org.junit.Assert.assertNotNull(readPreference32);
        org.junit.Assert.assertNotNull(readPreference33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(mongoClientOptions37);
        org.junit.Assert.assertNotNull(mongoClientOptions38);
        org.junit.Assert.assertNotNull(dBDecoderFactory39);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.mongodb.MongoClientOptions.Builder builder0 = com.mongodb.MongoClientOptions.builder();
        com.mongodb.MongoClientOptions.Builder builder2 = builder0.maxConnectionIdleTime((int) (short) 0);
        com.mongodb.MongoClientOptions.Builder builder4 = builder0.requiredReplicaSetName("");
        com.mongodb.MongoClientOptions.Builder builder6 = builder4.minConnectionsPerHost((int) (byte) 0);
        com.mongodb.MongoClientOptions.Builder builder8 = builder6.heartbeatConnectTimeout((int) 'a');
        com.mongodb.MongoClientOptions.Builder builder10 = builder6.heartbeatThreadCount((int) '4');
        com.mongodb.MongoClientOptions.Builder builder12 = builder10.description("");
        com.mongodb.MongoClientOptions.Builder builder14 = builder10.autoConnectRetry(true);
        com.mongodb.MongoClientOptions.Builder builder16 = builder10.socketTimeout((int) (short) 10);
        com.mongodb.MongoClientOptions.Builder builder18 = builder10.localThreshold((int) (short) 100);
        com.mongodb.MongoClientOptions.Builder builder20 = builder10.requiredReplicaSetName("mongodb://localhost/test");
        com.mongodb.MongoClientOptions.Builder builder22 = builder20.maxWaitTime(5);
        com.mongodb.MongoClientOptions.Builder builder24 = builder22.connectTimeout(15);
        com.mongodb.MongoClientOptions.Builder builder26 = builder24.heartbeatThreadCount((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            com.mongodb.MongoClientOptions.Builder builder28 = builder24.maxConnectionIdleTime((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value is 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.springframework.boot.autoconfigure.mongo.MongoProperties mongoProperties0 = new org.springframework.boot.autoconfigure.mongo.MongoProperties();
        mongoProperties0.setAuthenticationDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.clearPassword();
        java.lang.Class<?> wildcardClass6 = mongoProperties0.getFieldNamingStrategy();
        mongoProperties0.setGridFsDatabase("");
        java.lang.String str9 = mongoProperties0.getUsername();
        mongoProperties0.clearPassword();
        mongoProperties0.setDatabase("");
        mongoProperties0.setGridFsDatabase("test");
        mongoProperties0.setHost("mongodb://localhost/test");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(str9);
    }
}

